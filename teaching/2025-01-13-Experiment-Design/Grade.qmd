---
title: "ESRM64103: Student Grades"
sidebar: false
execute: 
  echo: false
format: 
  html:
    code-link: false
    code-tools: false
---

```{r}
#| eval: false

## Read in homework 3
library(tidyverse)
hw3 <- readxl::read_xlsx("ESRM 64503_Homework3.xlsx")
hw3_scores <- hw3 |> 
  select(
    Name = `Choose your name`, Points = `Total points`
  ) |> 
  mutate(Points = ifelse(Name == "Binhuwaimel, Azizah Abdulrahman A", Points +1, Points)) |>  # Azizah add one more point
  mutate(HW3_Grade = paste0(Points, "/20"),
         raw_Grade = 22 + Points)
Student_name = c(
  "Ayankoya, Monisola Beauty",
  "Barr, Stephanie Marie",
  "Binhuwaimel, Azizah Abdulrahman A",
  "Bonge, Nicole Grace",
  "Cascante  Vallejo,Diana Carolina",
  "Hughes, Yale",
  "Lan, Xi",
  "Negrete  Becerra,Luis Arturo",
  "Shakeri, Sepideh",
  "West, Abigail Joan"
)
Student_ID = 
c(
  "011021830",
  "002796491",
  "010686196",
  "010734654",
  "010827156",
  "011088780",
  "010848887",
  "010866994",
  "011015879",
  "010953825"
)

# Example data: Student IDs and their corresponding grades
grades_data <- data.frame(
  Student_ID = Student_ID,
  Name = Student_name,
  Bonus = rep("2pts", 10),
  HW1_Grade = rep("10/10", 10),
  HW2_Grade = rep("10/10", 10),
  Total = rep("22", 10)
)

grades_data_final <- grades_data |> 
  left_join(hw3_scores, by = "Name") |> 
  mutate(Scaled_Grade = ifelse(raw_Grade > 40, 100, raw_Grade / 40 * 100)) |> 
  select(Student_ID:HW2_Grade, HW3_Grade, raw_Grade, Scaled_Grade)
write.csv(grades_data_final, "homework_scores.csv")
```

```{ojs}
// Import necessary modules
import { Table, Inputs } from "@observablehq/inputs";

// Load the CSV data and ensure Student_ID is a string with leading zeros
data = FileAttachment("homework_scores.csv")
  .csv({ typed: true })
  .then(rows =>
    rows.map(row => ({
      ...row,
      Student_ID: String(row.Student_ID).padStart(9, '0')
    }))
  );

// Create a flexbox container to align input and custom button in the same row
viewof inputContainer = html`<div style="
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
"></div>`;

// Create the input box
viewof studentID = Inputs.text({
  placeholder: "Enter Student ID (e.g., 012345667)"
});

// Create a custom HTML button (not using Inputs.button)
viewof confirmButton = Inputs.button("Confirm");

// Append the input box and custom button to the flexbox row
inputContainer.append(viewof studentID, viewof confirmButton);

// Filter the data based on the entered student ID
filteredData = {
  if (confirmButton) {
    return data.filter(d => d.Student_ID === studentID);
  }
  return [];
};

// Display the filtered data in a table with custom styling
Table(filteredData, {
  columns: ["Student_ID","Name","Bonus","HW1_Grade","HW2_Grade","HW3_Grade","raw_Grade","Scaled_Grade"]
});


```
