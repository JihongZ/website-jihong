{
  "hash": "080f52b6d22e0cbaa4f2c94312fcac2e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A tutorial for forester R package\"\nauthor: \"Jihong Zhang\"\ndescription: \"\"\ndate: \"2023-06-28\"\ncategories: \n  - tutorial\n  - package\ntoc: true\ncode-fold: show\ncode-summary: ' R Code'\ncode-line-numbers: false\nnumber-sections: true\nnumber-offset: 1\n---\n\n\n![Workflow of forester](intro.png){fig-align=\"center\" width=\"1000\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE, include = FALSE)\noptions(knitr.kable.NA = '')\nlibrary('tidyverse')\nlibrary('forester')\nmycolors = c(\"#4682B4\", \"#B4464B\", \"#B4AF46\", \n             \"#1B9E77\", \"#D95F02\", \"#7570B3\",\n             \"#E7298A\", \"#66A61E\", \"#B4F60A\")\nsoftcolors = c(\"#B4464B\", \"#F3DCD4\", \"#ECC9C7\", \n               \"#D9E3DA\", \"#D1CFC0\", \"#C2C2B4\")\nmykbl <- function(x, ...){\n  kbl(x, digits = 2, ...) |> kable_styling(bootstrap_options = c(\"striped\", \"condensed\")) \n}\n```\n:::\n\n\n\n\nAs contributors of the R package said in their [github website](https://github.com/ModelOriented/forester):\n\n> \"The *forester* package is **an AutoML tool in R** that wraps up all machine learning processes into a single `train()` function, which includes:\"\n\n-   rendering a brief **data check** report,\n-   **preprocessing** initial dataset enough for models to be trained,\n-   **training** 5 tree-based models with default parameters, random search and Bayesian optimization,\n-   **evaluating** them and providing a ranked list.\n\nIn this blog, I will introduce `forester` package as a case study using a simulation example and a real example.\n\n\n```{mermaid}\ngraph TD;\n    A[data check]-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n\n## Useful links\n\n-   One of the contributor, Hubert Ruczynski, wrote up a detailed [tutorial](https://medium.com/responsibleml/forester-predicting-house-prices-use-case-b537253b6142) published in Mar 1, 2023.\n\n## An example\n\nFirst of all, `forester::check_data` is a very convenient function to glimpse the data for data analysis. By default it will output a \"CHECK DATA REPORT\", including some data quality checking list, meanwhile it will also do Spearman correlations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_dat_res <- forester::check_data(iris, 'Species')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n -------------------- CHECK DATA REPORT -------------------- \n \nThe dataset has 150 observations and 5 columns, which names are: \nSepal.Length; Sepal.Width; Petal.Length; Petal.Width; Species; \n\nWith the target value described by a column Species.\n\n✔ No static columns. \n\n✔ No duplicate columns.\n\n✔ No target values are missing. \n\n✔ No predictor values are missing. \n\n✔ No issues with dimensionality. \n\n✖ Strongly correlated, by Spearman rank, pairs of numerical values are: \n \n Sepal.Length - Petal.Length: 0.87;\n Sepal.Length - Petal.Width: 0.82;\n Petal.Length - Petal.Width: 0.96;\n\n✖ These observations migth be outliers due to their numerical columns values: \n 16 ;\n\n✖ Multilabel classification is not supported yet. \n\n✔ Columns names suggest that none of them are IDs. \n\n✔ Columns data suggest that none of them are IDs. \n\n -------------------- CHECK DATA REPORT END -------------------- \n \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(check_dat_res$str)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:38] \" -------------------- **CHECK DATA REPORT** -------------------- \" ...\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}