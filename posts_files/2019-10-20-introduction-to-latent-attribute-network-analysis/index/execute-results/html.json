{
  "hash": "37ea9a8ec9369ced9a30cbfe4c6f346c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Introduction to Latent Attribute Network Analysis\nsummary: \"A brief introduction of using Network Model to visualize latent attributes' hierarchy of Diagnostic Modeling.\"\ntoc: true\ndate: '2019-10-20'\nslug: introduction-to-latent-attribute-network-analysis\ncategories:\n  - blog\n  - Network\n  - DCM\ndraft: false\n---\n\n\n> Network analysis is a very useful tool. This post show how to visualize the latent attribute network in Diagnostic Classification Modeling(DCM). There are a ton of R package could be used to visualize network structure.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(CDM)\nlibrary(tidyverse)\nlibrary(network)\n```\n:::\n\n\n## Data Preparation\n\nI will use a simulated hierachial data from `CDM` package. The *node.list* depicts the traget nodes and starting nodes. Those information could be extracted from the $Q^{T}Q$ square matrix, in which $Q$ is the Q matrix of the model.\n\nAs shown below, there are 6 latent attributes including A1, A2, A3, B1, C1, C2. The A attributes share common items and the C attributes share common items but B attribute does not share common items with other attributes. The numbers in each cell represents the number of items shared by the pair of attributes. The number of common items will be used for the weights of network edges.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"data.cdm10\")\nq.matrix <- data.cdm10$q.matrix\nt(q.matrix) %*% q.matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   A1 A2 A3 B1 C1 C2\nA1  6  4  2  0  0  0\nA2  4  4  2  0  0  0\nA3  2  2  2  0  0  0\nB1  0  0  0  3  0  0\nC1  0  0  0  0  6  3\nC2  0  0  0  0  3  3\n```\n\n\n:::\n\n```{.r .cell-code}\n## prepare the edge and node table based on t(Q)%*%Q\nedge.list = tibble(from = c(1,1,2,2,3,3,5,6), \n                   to = c(2,3,1,3,1,2,6,5), \n                   weight = c(4,2,4,2,2,2,3,3))\nnode.list = tibble(label = c(\"A1\", \"A2\", \"A3\", \"B1\", \"C1\", \"C2\")) %>% rowid_to_column(\"id\")\n```\n:::\n\n\n## `Network` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Network package\nlibrary(network)\nroutes_work <- network(x = edge.list, vertex.attr = node.list, \n                       matrix.type = \"edgelist\", ignore.eval = FALSE)\nplot(routes_work, vertex.cex = 3, mode = \"circle\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## `igraph` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## igraph package \ndetach(package:network)\nrm(routes_work)\nlibrary(igraph)\nroutes_igraph <- graph_from_data_frame(d = edge.list, vertices = node.list, directed = TRUE)\nplot(routes_igraph, edge.arrow.size = 0.5, layout = layout_with_graphopt)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## `tidygraph` and `ggraph`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nlibrary(ggraph)\nroutes_tidy <- tbl_graph(nodes = node.list, edges = edge.list, directed = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(routes_tidy, layout = \"graphopt\") + \n  geom_node_point() +\n  geom_edge_link(aes(width = weight), alpha = 0.8) + \n  scale_edge_width(range = c(0.2, 2)) +\n  geom_node_text(aes(label = label), repel = TRUE) +\n  labs(edge_width = \"Number of Common Items\") +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Linear Layout\nggraph(routes_tidy, layout = \"linear\") + \n  geom_edge_arc(aes(width = weight), alpha = 0.8) + \n  scale_edge_width(range = c(0.2, 2)) +\n  geom_node_text(aes(label = label)) +\n  labs(edge_width = \"Number of Common Items\") +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}