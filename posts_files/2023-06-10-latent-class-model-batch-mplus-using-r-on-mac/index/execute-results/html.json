{
  "hash": "ca0045334be2ed32d8a075ab2d0ce43a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Latent Class Model: Batch Mplus using R on Mac'\nauthor: 'Jihong Zhang'\ndate: '2023-06-10'\nslug: latent-class-model-batch-mplus-using-r-on-mac\ncategories:\n  - blog\n  - LCM\n  - R\n\nlastmod: '2023-06-10T07:38:47+08:00'\nfeatured: no\nprojects: []\ntoc: true\n---\n\n::: {.cell}\n\n:::\n\n\n> [Mplus](https://www.statmodel.com/glance.shtml) is a very popular program for varied latent varaible modeling: (1) Structural equation modeling (2) multilevel analysis (3) mixture modeling (latent class model). R, in the other hand, is a general statistical programming language which not limits to certain statistical models. However, there are scarcely online resources illustrate how to run Mplus using R on Mac.\n\n## Requirement\n\nTo make sure Mplus can been successfully called in R, the very first thing is checking whether your MacOS can use command-line version of Mplus. Simply type `Mplus` command in your terminal app on Mac, if you see \"Mplus VERSION (Mac)\", then Mplus on MacOS should work and can be called within R. Otherwise, you should check whether you install Mplus software successfully beforehand.\n\n![](figures/fig1-terminal-mplus.png)\n\nSecond, you should install R + Rstudio (Optional). Rstudio is optional but strongly recommended.\n\nThird, `MplusAutomation` package should also been installed in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(MplusAutomation)) install.packages(\"MplusAutomation\")\nlibrary(tidyverse)\nlibrary(purrr) # for map functions\nlibrary(furrr) # for parallel map\n```\n:::\n\n\nIf everything looks good, we are ready to go.\n\n## Latent Class Analysis\n\nA vanilla Mplus input file for latent class model look like followings:\n\n\n::: {.cell}\n\n```{.mplus .cell-code}\nTITLE:\nBatch Analysis of Latent Class Models;\nDATA:\nFILE = \"Code/Mplus/datFile.dat\";\n \nVARIABLE:\nNAMES = Male Age Chinese EduF_Med EduF_High EduM_Med EduM_High EduS_Med EduS_High YM\n     HY SD PSD YASB YRCS YO YCR SEN Subgroup CE1 SC1 SI1 YCDC1 CLDH1; \n MISSING=.;\n \n      CATEGORICAL = Male-SEN;\n      CLASSES = c(10);\n      AUXILIARY = CE1-CLDH1 (R3STEP);\n      \nANALYSIS:\n\n      TYPE = MIXTURE;\n      \nOUTPUT:\nTECH1 TECH8 TECH11;\nSAVEDATA:\n\n      FILE IS model1_savedata.txt;\n      SAVE IS cprob;\n      FORMAT IS free;\n```\n:::\n\n\nIt looks very cumbersome to write one by one line by hand. For example, `VARIABLE > NAMES` in Mplus input file contains all indicators and auxiliary variables used for latent class modeling. Any typos may give rise to Mplus throwing out error messages in the estimation.\n\nThankfully, there's no need to write the Mplus syntax manually in text editor. Instead, you can write R code to automatically compile Mplus input files for you. In the following sections, I will illustrate how to do that using a real example.\n\n### An example\n\nThe example makes use of a data set including nine variables of demographic variables of youth, such as gender, age, ethnicity, education levels for father, mother and self etc. The goal is to cluster youth into multiple latent classes based on their demographic characteristics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read.csv(\"exampleDat.csv\", row.names = \"X\")\nglimpse(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,175\nColumns: 9\n$ Male      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, …\n$ Age       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Chinese   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ EduF_Med  <int> 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, …\n$ EduF_High <int> 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, …\n$ EduM_Med  <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, …\n$ EduM_High <int> 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, …\n$ EduS_Med  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ EduS_High <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n\n\n:::\n:::\n\n\nUsing `mplusObject` function, we can create a R object (or a Mplus model object stored in R), which holds all necessary sections for Mplus input syntax of latent class modeling. As shown in the code chunk below, users specify each Mplus section by assigning text strings to arguments. The only difference is that we don't have to put variables' names into a text file, instead, we can assign a R dataframe - `dat` to this model object directly. Then, it can be read by `mplusModeler` function later to run a latent class model with 2 latent classes.\n\nIn other words, we assigned text strings to three arguments -`VARIABLE`, `ANALYSIS`, `SAVEDATA` in mplusObject, which correspond to the sections in Mplus input file. Moreover, the most convenient part of MplusAutomation is allowing users to input variables' names directly (`usevariables = colnames(dat)`). That is, `rdata` and `usevariables` arguments can be used to specify the variables' names used for LCA in Mplus, which is equal to `NAMES =` in vanilla mplus input file.\n\nAfter we run and extract Mplus results using `mplusModeler` function, the next step is to parse and extract results from another Mplus model object with results - `res_m1`. Here, I'm interested in model fit indices of the model, then I can use `get_summaries` function in R to extract those information of this 2-class latent class model. Pretty neat, right?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#------------#\n# 2-class model\n#------------#\nm1 <- mplusObject(\n  TITLE = \"Latent Class Models using R;\",\n  VARIABLE = \"\n  CATEGORICAL = Male-EduS_High;\n  CLASSES = c(2);\",\n  ANALYSIS = \"\n    TYPE = MIXTURE;\n    ALGORITHM = INTEGRATION;\n    STARTS = 500 20;\n  \",\n  SAVEDATA = \"\n    FILE IS LCA_M1_save.txt;\n    SAVE IS cprob;\n    FORMAT IS free;\n  \",\n  OUTPUT = \"TECH1 TECH8;\",\n  rdata = dat,\n  usevariables = colnames(dat),\n  autov = TRUE\n)\nsuppressWarnings(res_m1 <- mplusModeler(m1, modelout = \"Mplus/model.inp\", run = 1L))\nsummary_m1 <- get_summaries(res_m1, simplify = T)\nkbl(summary_m1, digits = 3) |> \n  kable_material_dark(full_width = F, html_font = \"Maven Pro\") |> \n  kable_styling(bootstrap_options = c(\"condensed\", \"hover\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-material-dark table table-condensed table-hover\" style=\"font-family: Maven Pro; width: auto !important; margin-left: auto; margin-right: auto; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:left;\"> Model_1 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Mplus.version </td>\n   <td style=\"text-align:left;\"> 8.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Title </td>\n   <td style=\"text-align:left;\"> Latent Class Models using R; </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AnalysisType </td>\n   <td style=\"text-align:left;\"> MIXTURE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DataType </td>\n   <td style=\"text-align:left;\"> INDIVIDUAL </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Estimator </td>\n   <td style=\"text-align:left;\"> MLR </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Observations </td>\n   <td style=\"text-align:left;\"> 2175 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NGroups </td>\n   <td style=\"text-align:left;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NDependentVars </td>\n   <td style=\"text-align:left;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NIndependentVars </td>\n   <td style=\"text-align:left;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NContinuousLatentVars </td>\n   <td style=\"text-align:left;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NCategoricalLatentVars </td>\n   <td style=\"text-align:left;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Parameters </td>\n   <td style=\"text-align:left;\"> 19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalPearson_Value </td>\n   <td style=\"text-align:left;\"> 2255.894 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalPearson_DF </td>\n   <td style=\"text-align:left;\"> 491 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalPearson_PValue </td>\n   <td style=\"text-align:left;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalLRT_Value </td>\n   <td style=\"text-align:left;\"> 1669.323 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalLRT_DF </td>\n   <td style=\"text-align:left;\"> 491 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqCategoricalLRT_PValue </td>\n   <td style=\"text-align:left;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedPearson_Value </td>\n   <td style=\"text-align:left;\"> 54.839 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedPearson_DF </td>\n   <td style=\"text-align:left;\"> 637 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedPearson_PValue </td>\n   <td style=\"text-align:left;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedLRT_Value </td>\n   <td style=\"text-align:left;\"> 26.06 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedLRT_DF </td>\n   <td style=\"text-align:left;\"> 637 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ChiSqMCARUnrestrictedLRT_PValue </td>\n   <td style=\"text-align:left;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> LL </td>\n   <td style=\"text-align:left;\"> -8527.781 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> LLCorrectionFactor </td>\n   <td style=\"text-align:left;\"> 1.0086 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AIC </td>\n   <td style=\"text-align:left;\"> 17093.562 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> BIC </td>\n   <td style=\"text-align:left;\"> 17201.573 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> aBIC </td>\n   <td style=\"text-align:left;\"> 17141.207 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Entropy </td>\n   <td style=\"text-align:left;\"> 0.936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> AICC </td>\n   <td style=\"text-align:left;\"> 17093.9146682135 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Filename </td>\n   <td style=\"text-align:left;\"> model.out </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NLatentClasses </td>\n   <td style=\"text-align:left;\"> 2 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThis is a simplistic procedure for one model. What about a bunch of models?\n\n### Batch LCA in R: select number of latent classes\n\nOne most important step of latent class analysis is to select the number of latent classes, which best summarize the data. This research question can be translated to \"when we have multiple alternative latent class models with different number of latent class (C), which one has optimal model fit\". The general rule of model selection is using information criterion such as AIC, BIC. Alternatively, model comparison method such as likelihood ratio test can be used to compare nested models. Here, I created a function to batch run multiple LCA across different number of classes to select the optimal models.\n\n\n::: {.cell hl_lines='[1,3]' linenos='[\"function (..., exclude = if (useNA == \\\"no\\\") c(NA, NaN), useNA = c(\\\"no\\\", \",\"    \\\"ifany\\\", \\\"always\\\"), dnn = list.names(...), deparse.level = 1) \",\"{\",\"    list.names <- function(...) {\",\"        l <- as.list(substitute(list(...)))[-1L]\",\"        if (length(l) == 1L && is.list(..1) && !is.null(nm <- names(..1))) \",\"            return(nm)\",\"        nm <- names(l)\",\"        fixup <- if (is.null(nm)) \",\"            seq_along(l)\",\"        else nm == \\\"\\\"\",\"        dep <- vapply(l[fixup], function(x) switch(deparse.level + \",\"            1, \\\"\\\", if (is.symbol(x)) as.character(x) else \\\"\\\", \",\"            deparse(x, nlines = 1)[1L]), \\\"\\\")\",\"        if (is.null(nm)) \",\"            dep\",\"        else {\",\"            nm[fixup] <- dep\",\"            nm\",\"        }\",\"    }\",\"    miss.use <- missing(useNA)\",\"    miss.exc <- missing(exclude)\",\"    useNA <- if (miss.use && !miss.exc && !match(NA, exclude, \",\"        nomatch = 0L)) \",\"        \\\"ifany\\\"\",\"    else match.arg(useNA)\",\"    doNA <- useNA != \\\"no\\\"\",\"    if (!miss.use && !miss.exc && doNA && match(NA, exclude, \",\"        nomatch = 0L)) \",\"        warning(\\\"\\'exclude\\' containing NA and \\'useNA\\' != \\\\\\\"no\\\\\\\"\\' are a bit contradicting\\\")\",\"    args <- list(...)\",\"    if (length(args) == 1L && is.list(args[[1L]])) {\",\"        args <- args[[1L]]\",\"        if (length(dnn) != length(args)) \",\"            dnn <- paste(dnn[1L], seq_along(args), sep = \\\".\\\")\",\"    }\",\"    if (!length(args)) \",\"        stop(\\\"nothing to tabulate\\\")\",\"    bin <- 0L\",\"    lens <- NULL\",\"    dims <- integer()\",\"    pd <- 1L\",\"    dn <- NULL\",\"    for (a in args) {\",\"        if (is.null(lens)) \",\"            lens <- length(a)\",\"        else if (length(a) != lens) \",\"            stop(\\\"all arguments must have the same length\\\")\",\"        fact.a <- is.factor(a)\",\"        if (doNA) \",\"            aNA <- anyNA(a)\",\"        if (!fact.a) {\",\"            a0 <- a\",\"            op <- options(warn = 2)\",\"            a <- factor(a, exclude = exclude)\",\"            options(op)\",\"        }\",\"        add.na <- doNA\",\"        if (add.na) {\",\"            ifany <- (useNA == \\\"ifany\\\")\",\"            anNAc <- anyNA(a)\",\"            add.na <- if (!ifany || anNAc) {\",\"                ll <- levels(a)\",\"                if (add.ll <- !anyNA(ll)) {\",\"                  ll <- c(ll, NA)\",\"                  TRUE\",\"                }\",\"                else if (!ifany && !anNAc) \",\"                  FALSE\",\"                else TRUE\",\"            }\",\"            else FALSE\",\"        }\",\"        if (add.na) \",\"            a <- factor(a, levels = ll, exclude = NULL)\",\"        else ll <- levels(a)\",\"        a <- as.integer(a)\",\"        if (fact.a && !miss.exc) {\",\"            ll <- ll[keep <- which(match(ll, exclude, nomatch = 0L) == \",\"                0L)]\",\"            a <- match(a, keep)\",\"        }\",\"        else if (!fact.a && add.na) {\",\"            if (ifany && !aNA && add.ll) {\",\"                ll <- ll[!is.na(ll)]\",\"                is.na(a) <- match(a0, c(exclude, NA), nomatch = 0L) > \",\"                  0L\",\"            }\",\"            else {\",\"                is.na(a) <- match(a0, exclude, nomatch = 0L) > \",\"                  0L\",\"            }\",\"        }\",\"        nl <- length(ll)\",\"        dims <- c(dims, nl)\",\"        if (prod(dims) > .Machine$integer.max) \",\"            stop(\\\"attempt to make a table with >= 2^31 elements\\\")\",\"        dn <- c(dn, list(ll))\",\"        bin <- bin + pd * (a - 1L)\",\"        pd <- pd * nl\",\"    }\",\"    names(dn) <- dnn\",\"    bin <- bin[!is.na(bin)]\",\"    if (length(bin)) \",\"        bin <- bin + 1L\",\"    y <- array(tabulate(bin, pd), dims, dimnames = dn)\",\"    class(y) <- \\\"table\\\"\",\"    y\",\"}\"]'}\n\n```{.r .cell-code}\nfitMplus <- function(data = dat, class, \n                     uvars = \"Male-EduS_High\", auxvars= NULL, \n                     modelout = NULL, savedata = NULL ) {\n  ## specify the used variables\n  fitIndices <- c(\"LL\", \"AIC\", \"BIC\", \"aBIC\", \"Entropy\", \"T11_LMR_PValue\")\n  \n  if (is.null(savedata)) {\n    savedata = \"Mplus/model_Temp_save.txt\"\n  }\n  \n  if (!is.null(auxvars)) {\n    start_index = which(colnames(data) == str_split(uvars, \"-\")[[1]][1])\n    end_index = which(colnames(data) == str_split(auxvars, \"-\")[[1]][2])\n    modelTEMP <- mplusObject(\n      TITLE = \"Batch Analysis of Latent Class Models;\",\n      VARIABLE = paste0(\"\n      CATEGORICAL = \", uvars, \";\n      CLASSES = c(\", class, \");\n      AUXILIARY = \", auxvars,\" (R3STEP);\n      \"),\n      ANALYSIS = \"\n      TYPE = MIXTURE;\n      \",\n      SAVEDATA = \n      paste0(\"\n      FILE IS \", savedata,\";\n      SAVE IS cprob;\n      FORMAT IS free;\n      \"),\n      OUTPUT = \"TECH1 TECH8 TECH11;\",\n      rdata = data,\n      usevariables = colnames(data[start_index:end_index]),\n      autov = TRUE\n    )\n  }else{\n    start_index = which(colnames(data) == str_split(uvars, \"-\")[[1]][1])\n    end_index = which(colnames(data) == str_split(uvars, \"-\")[[1]][2])\n    modelTEMP <- mplusObject(\n      TITLE = \"Batch Analysis of Latent Class Models;\",\n      VARIABLE = paste0(\"\n      CATEGORICAL = \", uvars, \";\n      CLASSES = c(\", class, \");\n      \"),\n      ANALYSIS = \"\n      TYPE = MIXTURE;\n      \",\n      SAVEDATA = \n      paste0(\"\n      FILE IS \", savedata,\";\n      SAVE IS cprob;\n      FORMAT IS free;\n      \"),\n      OUTPUT = \"TECH1 TECH8 TECH11;\",\n      rdata = data,\n      usevariables = colnames(data[start_index:end_index]),\n      autov = TRUE\n    )\n  }\n  \n  if (!is.null(modelout)) {\n    suppressMessages(resTEMP <- mplusModeler(modelTEMP, modelout = modelout, run = 1L))\n  }else{\n    suppressMessages(resTEMP <- mplusModeler(modelTEMP, modelout = \"Mplus/modelTEMP.inp\", run = 1L))\n  }\n  \n  summaryTEMP <- get_summaries(resTEMP, simplify = T)\n  summaryTEMP <- data.frame(X = unlist(summaryTEMP[rownames(summaryTEMP) %in% fitIndices, ]))\n  colnames(summaryTEMP) = paste0(class, \"-class Model\")\n  \n  # return\n  list(\n    model = resTEMP,\n    summary = t(summaryTEMP)  \n  )\n}\n```\n:::\n\n\nThen, I ran a series of latent class models with different number of classes (from 2 to 7 latent classes):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlcmFit = as.data.frame(Reduce(rbind, future_map(\n  2:7, \\(x) fitMplus(data = dat, class = x, \n                     uvars = \"Male-EduS_High\",\n                     modelout = \"Mplus/model1fit.inp\",\n                     savedata = \"Mplus/model_Temp_save.txt\")$summary\n)))\nknitr::kable(lcmFit, digits = 3) |> \n  kable_material_dark(full_width = F, html_font = \"Maven Pro\") |> \n  kable_styling(bootstrap_options = c(\"condensed\", \"hover\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-material-dark table table-condensed table-hover\" style=\"font-family: Maven Pro; width: auto !important; margin-left: auto; margin-right: auto; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> LL </th>\n   <th style=\"text-align:right;\"> AIC </th>\n   <th style=\"text-align:right;\"> BIC </th>\n   <th style=\"text-align:right;\"> aBIC </th>\n   <th style=\"text-align:right;\"> Entropy </th>\n   <th style=\"text-align:right;\"> T11_LMR_PValue </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 2-class Model </td>\n   <td style=\"text-align:right;\"> -8527.781 </td>\n   <td style=\"text-align:right;\"> 17093.56 </td>\n   <td style=\"text-align:right;\"> 17201.57 </td>\n   <td style=\"text-align:right;\"> 17141.21 </td>\n   <td style=\"text-align:right;\"> 0.936 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3-class Model </td>\n   <td style=\"text-align:right;\"> -8240.625 </td>\n   <td style=\"text-align:right;\"> 16539.25 </td>\n   <td style=\"text-align:right;\"> 16704.11 </td>\n   <td style=\"text-align:right;\"> 16611.97 </td>\n   <td style=\"text-align:right;\"> 0.952 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4-class Model </td>\n   <td style=\"text-align:right;\"> -8049.198 </td>\n   <td style=\"text-align:right;\"> 16176.40 </td>\n   <td style=\"text-align:right;\"> 16398.10 </td>\n   <td style=\"text-align:right;\"> 16274.19 </td>\n   <td style=\"text-align:right;\"> 0.969 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5-class Model </td>\n   <td style=\"text-align:right;\"> -7978.962 </td>\n   <td style=\"text-align:right;\"> 16055.92 </td>\n   <td style=\"text-align:right;\"> 16334.48 </td>\n   <td style=\"text-align:right;\"> 16178.80 </td>\n   <td style=\"text-align:right;\"> 0.951 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 6-class Model </td>\n   <td style=\"text-align:right;\"> -7917.136 </td>\n   <td style=\"text-align:right;\"> 15952.27 </td>\n   <td style=\"text-align:right;\"> 16287.67 </td>\n   <td style=\"text-align:right;\"> 16100.22 </td>\n   <td style=\"text-align:right;\"> 0.990 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 7-class Model </td>\n   <td style=\"text-align:right;\"> -7849.506 </td>\n   <td style=\"text-align:right;\"> 15837.01 </td>\n   <td style=\"text-align:right;\"> 16229.26 </td>\n   <td style=\"text-align:right;\"> 16010.04 </td>\n   <td style=\"text-align:right;\"> 0.934 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nAs the table shown, 7-class model appears to have the best model fit among 6 alternative models (lowest AIC/BIC/aBIC).\n\n## Conclusion\n\n`MplusAutomation` + R could be good tools for LCA. However, extracting information from Mplus output file is not so easy. For example, when there are auxiliary variables exists, the regression coefficients regressed on latent classes needed to be parsed and extract manually. For example, following functions can be used to extract the regression coefficients of latent class model using the 3-step approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#------------#\n# Extract output regression table from R3Step LCA\n#------------#\nextract_r3step <- function(model_path){\n  # browser()\n  tibble(x = read_lines(model_path)) %>%\n    mutate(row1 = (1:n())[str_detect(x, 'NUMBER OF OBSERVATIONS USED')],\n           row2 = (1:n())[str_detect(x, \n                                     '^ODDS RATIOS FOR TESTS OF CATEGORICAL LATENT VARIABLE')]) %>%\n    slice((.$row1[1] + 2):(.$row2[1] - 1)) %>%\n    mutate(type_comparison = str_detect(x, 'Parameterization using Reference'),\n           type_colname = str_detect(x, 'Estimate'),\n           type_classnum = str_detect(x, 'C#[0-9]+'),\n           type_predictor = str_detect(x, '[\\\\.\\\\-0-9]+[\\\\s]+[\\\\.\\\\-0-9]+')) %>%\n    mutate(class = ifelse(type_classnum, parse_number(x), NA),\n           predictors = ifelse(type_predictor, map(x, parse_predictors), list()),\n           comparison_group = cumsum(type_comparison)) %>%\n    group_by(comparison_group) %>%\n    mutate(class_group = cumsum(type_classnum)) %>%\n    ungroup() %>%\n    mutate(comparison_group = ifelse(comparison_group == 0, \n                                     max(class, na.rm = TRUE), comparison_group)) %>%\n    group_by(comparison_group, class_group) %>%\n    filter(class_group != 0) %>%\n    mutate(class_group2 = class[!is.na(class)]) %>%\n    ungroup() %>%\n    filter(type_predictor) %>%\n    select(comparison_group, class_group2, predictors) %>%\n    unnest() %>%\n    rename(comparison_class = comparison_group,\n           class = class_group2) %>%\n    mutate(estimate = as.numeric(estimate),\n           se = as.numeric(se),\n           tval = as.numeric(tval),\n           pval = as.numeric(pval)) \n}\n  \n#------------#\n# Read in save data from Mplus\n#------------#\nread_saveddata <- function(path_output, path_savedata, ...) {\n  ## extract data and latent classes\n  mplusOuput <- readLines(path_output)\n  top <- which(str_detect(mplusOuput, \"Order of variables\")) # start linenumber\n  bottom <- which(str_detect(mplusOuput, \"Save file format\")) # end linenumber\n  rawVars <- mplusOuput[(top+1):(bottom-1)]\n  savevarnames <- trimws(rawVars[rawVars != \"\"])\n  \n  ## read saved data from Mplus output\n  savedDat <- read.table(path_savedata, na.strings = \"*\", header = FALSE, \n                         col.names = savevarnames, ...)\n  savedDat\n}\n```\n:::\n\n\nHope this is helpful.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}