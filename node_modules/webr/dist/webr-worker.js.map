{
  "version": 3,
  "sources": ["../node_modules/@msgpack/msgpack/src/utils/int.ts", "../node_modules/@msgpack/msgpack/src/utils/utf8.ts", "../node_modules/@msgpack/msgpack/src/ExtData.ts", "../node_modules/@msgpack/msgpack/src/DecodeError.ts", "../node_modules/@msgpack/msgpack/src/timestamp.ts", "../node_modules/@msgpack/msgpack/src/ExtensionCodec.ts", "../node_modules/@msgpack/msgpack/src/utils/typedArrays.ts", "../node_modules/@msgpack/msgpack/src/Encoder.ts", "../node_modules/@msgpack/msgpack/src/encode.ts", "../node_modules/@msgpack/msgpack/src/utils/prettyByte.ts", "../node_modules/@msgpack/msgpack/src/CachedKeyDecoder.ts", "../node_modules/@msgpack/msgpack/src/Decoder.ts", "../node_modules/@msgpack/msgpack/src/decode.ts", "../node_modules/@msgpack/msgpack/src/utils/stream.ts", "../node_modules/@msgpack/msgpack/src/decodeAsync.ts", "../node_modules/@msgpack/msgpack/src/index.ts", "../node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js", "../webR/error.ts", "../webR/compat.ts", "../webR/robj.ts", "../webR/emscripten.ts", "../webR/utils-r.ts", "../webR/chan/task-common.ts", "../webR/robj-worker.ts", "../webR/utils.ts", "../webR/chan/task-main.ts", "../webR/chan/message.ts", "../webR/payload.ts", "../webR/chan/task-worker.ts", "../webR/chan/websocket.ts", "../webR/chan/channel-shared.ts", "../webR/chan/channel-postmessage.ts", "../webR/chan/channel-common.ts", "../node_modules/pako/dist/pako.esm.mjs", "../node_modules/@jupyterlite/contents/src/emscripten.ts", "../node_modules/@jupyterlite/contents/src/drivefs.ts", "../webR/mount.ts", "../webR/webr-worker.ts"],
  "sourcesContent": ["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n", "/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int\";\n\nconst TEXT_ENCODING_AVAILABLE =\n  (typeof process === \"undefined\" || process?.env?.[\"TEXT_ENCODING\"] !== \"never\") &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_ENCODING\"] !== \"force\"\n  ? 200\n  : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_DECODER\"] !== \"force\"\n  ? 200\n  : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder!.decode(stringBytes);\n}\n", "/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n", "export class DecodeError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    // fix the prototype chain in a cross-platform way\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\n    Object.setPrototypeOf(this, proto);\n\n    Object.defineProperty(this, \"name\", {\n      configurable: true,\n      enumerable: false,\n      value: DecodeError.name,\n    });\n  }\n}\n", "// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n", "// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n", "export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n", "import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n", "import { Encoder } from \"./Encoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    sortKeys: boolean;\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encodeSharedRef(value);\n}\n", "export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n", "import { utf8DecodeJs } from \"./utils/utf8\";\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly str: string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)`, which makes a sparse array,\n    // because a sparse array is typically slower than a non-sparse array.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number): boolean {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.str;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, str: value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to an arbitrary position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, str);\n    return str;\n  }\n}\n", "import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e: any) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = UINT32_MAX,\n    private readonly maxBinLength = UINT32_MAX,\n    private readonly maxArrayLength = UINT32_MAX,\n    private readonly maxMapLength = UINT32_MAX,\n    private readonly maxExtLength = UINT32_MAX,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.length = 0;\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | BufferSource): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | BufferSource) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | BufferSource): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1]!;\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n          }\n          if (object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1]!;\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeMulti(buffer);\n}\n", "// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport { defaultDecodeOptions } from \"./decode\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { DecodeOptions } from \"./decode\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  return decodeMultiStream(streamLike, options);\n}\n", "// Main Functions:\n\nimport { encode } from \"./encode\";\nexport { encode };\nimport type { EncodeOptions } from \"./encode\";\nexport type { EncodeOptions };\n\nimport { decode, decodeMulti } from \"./decode\";\nexport { decode, decodeMulti };\nimport type { DecodeOptions } from \"./decode\";\nexport { DecodeOptions };\n\nimport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream } from \"./decodeAsync\";\nexport { decodeAsync, decodeArrayStream, decodeMultiStream, decodeStream };\n\nimport { Decoder, DataViewIndexOutOfBoundsError } from \"./Decoder\";\nimport { DecodeError } from \"./DecodeError\";\nexport { Decoder, DecodeError, DataViewIndexOutOfBoundsError };\n\nimport { Encoder } from \"./Encoder\";\nexport { Encoder };\n\n// Utilitiies for Extension Types:\n\nimport { ExtensionCodec } from \"./ExtensionCodec\";\nexport { ExtensionCodec };\nimport type { ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType } from \"./ExtensionCodec\";\nexport type { ExtensionCodecType, ExtensionDecoderType, ExtensionEncoderType };\nimport { ExtData } from \"./ExtData\";\nexport { ExtData };\n\nimport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n} from \"./timestamp\";\nexport {\n  EXT_TIMESTAMP,\n  encodeDateToTimeSpec,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n  encodeTimestampExtension,\n  decodeTimestampExtension,\n};\n", "/**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @license MIT\n */\n\nvar fs = require('fs');\nvar Url = require('url');\nvar spawn = require('child_process').spawn;\n\n/**\n * Module exports.\n */\n\nmodule.exports = XMLHttpRequest;\n\n// backwards-compat\nXMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n/**\n * `XMLHttpRequest` constructor.\n *\n * Supported options for the `opts` object are:\n *\n *  - `agent`: An http.Agent instance; http.globalAgent may be used; if 'undefined', agent usage is disabled\n *\n * @param {Object} opts optional \"options\" object\n */\n\nfunction XMLHttpRequest(opts) {\n  \"use strict\";\n\n  opts = opts || {};\n\n  /**\n   * Private variables\n   */\n  var self = this;\n  var http = require('http');\n  var https = require('https');\n\n  // Holds http.js objects\n  var request;\n  var response;\n\n  // Request settings\n  var settings = {};\n\n  // Disable header blacklist.\n  // Not part of XHR specs.\n  var disableHeaderCheck = false;\n\n  // Set some default headers\n  var defaultHeaders = {\n    \"User-Agent\": \"node-XMLHttpRequest\",\n    \"Accept\": \"*/*\"\n  };\n\n  var headers = Object.assign({}, defaultHeaders);\n\n  // These headers are not user setable.\n  // The following are allowed but banned in the spec:\n  // * user-agent\n  var forbiddenRequestHeaders = [\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"access-control-request-headers\",\n    \"access-control-request-method\",\n    \"connection\",\n    \"content-length\",\n    \"content-transfer-encoding\",\n    \"cookie\",\n    \"cookie2\",\n    \"date\",\n    \"expect\",\n    \"host\",\n    \"keep-alive\",\n    \"origin\",\n    \"referer\",\n    \"te\",\n    \"trailer\",\n    \"transfer-encoding\",\n    \"upgrade\",\n    \"via\"\n  ];\n\n  // These request methods are not allowed\n  var forbiddenRequestMethods = [\n    \"TRACE\",\n    \"TRACK\",\n    \"CONNECT\"\n  ];\n\n  // Send flag\n  var sendFlag = false;\n  // Error flag, used when errors occur or abort is called\n  var errorFlag = false;\n  var abortedFlag = false;\n\n  // Event listeners\n  var listeners = {};\n\n  /**\n   * Constants\n   */\n\n  this.UNSENT = 0;\n  this.OPENED = 1;\n  this.HEADERS_RECEIVED = 2;\n  this.LOADING = 3;\n  this.DONE = 4;\n\n  /**\n   * Public vars\n   */\n\n  // Current state\n  this.readyState = this.UNSENT;\n\n  // default ready state change handler in case one is not set or is set late\n  this.onreadystatechange = null;\n\n  // Result & response\n  this.responseText = \"\";\n  this.responseXML = \"\";\n  this.response = Buffer.alloc(0);\n  this.status = null;\n  this.statusText = null;\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check if the specified header is allowed.\n   *\n   * @param string header Header to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpHeader = function(header) {\n    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);\n  };\n\n  /**\n   * Check if the specified method is allowed.\n   *\n   * @param string method Request method to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpMethod = function(method) {\n    return (method && forbiddenRequestMethods.indexOf(method) === -1);\n  };\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param string method Connection method (eg GET, POST)\n   * @param string url URL for the connection.\n   * @param boolean async Asynchronous connection. Default is true.\n   * @param string user Username for basic authentication (optional)\n   * @param string password Password for basic authentication (optional)\n   */\n  this.open = function(method, url, async, user, password) {\n    this.abort();\n    errorFlag = false;\n    abortedFlag = false;\n\n    // Check for valid request method\n    if (!isAllowedHttpMethod(method)) {\n      throw new Error(\"SecurityError: Request method not allowed\");\n    }\n\n    settings = {\n      \"method\": method,\n      \"url\": url.toString(),\n      \"async\": (typeof async !== \"boolean\" ? true : async),\n      \"user\": user || null,\n      \"password\": password || null\n    };\n\n    setState(this.OPENED);\n  };\n\n  /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param boolean state Enable or disable header checking.\n   */\n  this.setDisableHeaderCheck = function(state) {\n    disableHeaderCheck = state;\n  };\n\n  /**\n   * Sets a header for the request.\n   *\n   * @param string header Header name\n   * @param string value Header value\n   * @return boolean Header added\n   */\n  this.setRequestHeader = function(header, value) {\n    if (this.readyState != this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");\n    }\n    if (!isAllowedHttpHeader(header)) {\n      console.warn('Refused to set unsafe header \"' + header + '\"');\n      return false;\n    }\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send flag is true\");\n    }\n    headers[header] = value;\n    return true;\n  };\n\n  /**\n   * Gets a header from the server response.\n   *\n   * @param string header Name of header to get.\n   * @return string Text of the header or null if it doesn't exist.\n   */\n  this.getResponseHeader = function(header) {\n    if (typeof header === \"string\"\n      && this.readyState > this.OPENED\n      && response.headers[header.toLowerCase()]\n      && !errorFlag\n    ) {\n      return response.headers[header.toLowerCase()];\n    }\n\n    return null;\n  };\n\n  /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */\n  this.getAllResponseHeaders = function() {\n    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {\n      return \"\";\n    }\n    var result = \"\";\n\n    for (var i in response.headers) {\n      // Cookie headers are excluded\n      if (i !== \"set-cookie\" && i !== \"set-cookie2\") {\n        result += i + \": \" + response.headers[i] + \"\\r\\n\";\n      }\n    }\n    return result.substr(0, result.length - 2);\n  };\n\n  /**\n   * Gets a request header\n   *\n   * @param string name Name of header to get\n   * @return string Returns the request header or empty string if not set\n   */\n  this.getRequestHeader = function(name) {\n    // @TODO Make this case insensitive\n    if (typeof name === \"string\" && headers[name]) {\n      return headers[name];\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Sends the request to the server.\n   *\n   * @param string data Optional data to send as request body.\n   */\n  this.send = function(data) {\n    if (this.readyState != this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");\n    }\n\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send has already been called\");\n    }\n\n    var ssl = false, local = false;\n    var url = Url.parse(settings.url);\n    var host;\n    // Determine the server\n    switch (url.protocol) {\n      case 'https:':\n        ssl = true;\n        // SSL & non-SSL both need host, no break here.\n      case 'http:':\n        host = url.hostname;\n        break;\n\n      case 'file:':\n        local = true;\n        break;\n\n      case undefined:\n      case '':\n        host = \"localhost\";\n        break;\n\n      default:\n        throw new Error(\"Protocol not supported.\");\n    }\n\n    // Load files off the local filesystem (file://)\n    if (local) {\n      if (settings.method !== \"GET\") {\n        throw new Error(\"XMLHttpRequest: Only GET method is supported\");\n      }\n\n      if (settings.async) {\n        fs.readFile(unescape(url.pathname), function(error, data) {\n          if (error) {\n            self.handleError(error, error.errno || -1);\n          } else {\n            self.status = 200;\n            self.responseText = data.toString('utf8');\n            self.response = data;\n            setState(self.DONE);\n          }\n        });\n      } else {\n        try {\n          this.response = fs.readFileSync(unescape(url.pathname));\n          this.responseText = this.response.toString('utf8');\n          this.status = 200;\n          setState(self.DONE);\n        } catch(e) {\n          this.handleError(e, e.errno || -1);\n        }\n      }\n\n      return;\n    }\n\n    // Default to port 80. If accessing localhost on another port be sure\n    // to use http://localhost:port/path\n    var port = url.port || (ssl ? 443 : 80);\n    // Add query string if one is used\n    var uri = url.pathname + (url.search ? url.search : '');\n\n    // Set the Host header or the server may reject the request\n    headers[\"Host\"] = host;\n    if (!((ssl && port === 443) || port === 80)) {\n      headers[\"Host\"] += ':' + url.port;\n    }\n\n    // Set Basic Auth if necessary\n    if (settings.user) {\n      if (typeof settings.password == \"undefined\") {\n        settings.password = \"\";\n      }\n      var authBuf = new Buffer(settings.user + \":\" + settings.password);\n      headers[\"Authorization\"] = \"Basic \" + authBuf.toString(\"base64\");\n    }\n\n    // Set content length header\n    if (settings.method === \"GET\" || settings.method === \"HEAD\") {\n      data = null;\n    } else if (data) {\n      headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n\n      if (!headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n    } else if (settings.method === \"POST\") {\n      // For a post with no data set Content-Length: 0.\n      // This is required by buggy servers that don't meet the specs.\n      headers[\"Content-Length\"] = 0;\n    }\n\n    var agent = opts.agent || false;\n    var options = {\n      host: host,\n      port: port,\n      path: uri,\n      method: settings.method,\n      headers: headers,\n      agent: agent\n    };\n\n    if (ssl) {\n      options.pfx = opts.pfx;\n      options.key = opts.key;\n      options.passphrase = opts.passphrase;\n      options.cert = opts.cert;\n      options.ca = opts.ca;\n      options.ciphers = opts.ciphers;\n      options.rejectUnauthorized = opts.rejectUnauthorized === false ? false : true;\n    }\n\n    // Reset error flag\n    errorFlag = false;\n    // Handle async requests\n    if (settings.async) {\n      // Use the proper protocol\n      var doRequest = ssl ? https.request : http.request;\n\n      // Request is being sent, set send flag\n      sendFlag = true;\n\n      // As per spec, this is called here for historical reasons.\n      self.dispatchEvent(\"readystatechange\");\n\n      // Handler for the response\n      var responseHandler = function(resp) {\n        // Set response var to the response we got back\n        // This is so it remains accessable outside this scope\n        response = resp;\n        // Check for redirect\n        // @TODO Prevent looped redirects\n        if (response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n          // Change URL to the redirect location\n          settings.url = response.headers.location;\n          var url = Url.parse(settings.url);\n          // Set host var in case it's used later\n          host = url.hostname;\n          // Options for the new request\n          var newOptions = {\n            hostname: url.hostname,\n            port: url.port,\n            path: url.path,\n            method: response.statusCode === 303 ? 'GET' : settings.method,\n            headers: headers\n          };\n\n          if (ssl) {\n            newOptions.pfx = opts.pfx;\n            newOptions.key = opts.key;\n            newOptions.passphrase = opts.passphrase;\n            newOptions.cert = opts.cert;\n            newOptions.ca = opts.ca;\n            newOptions.ciphers = opts.ciphers;\n            newOptions.rejectUnauthorized = opts.rejectUnauthorized === false ? false : true;\n          }\n\n          // Issue the new request\n          request = doRequest(newOptions, responseHandler).on('error', errorHandler);\n          request.end();\n          // @TODO Check if an XHR event needs to be fired here\n          return;\n        }\n\n        setState(self.HEADERS_RECEIVED);\n        self.status = response.statusCode;\n\n        response.on('data', function(chunk) {\n          // Make sure there's some data\n          if (chunk) {\n            var data = Buffer.from(chunk);\n            self.response = Buffer.concat([self.response, data]);\n          }\n          // Don't emit state changes if the connection has been aborted.\n          if (sendFlag) {\n            setState(self.LOADING);\n          }\n        });\n\n        response.on('end', function() {\n          if (sendFlag) {\n            // The sendFlag needs to be set before setState is called.  Otherwise if we are chaining callbacks\n            // there can be a timing issue (the callback is called and a new call is made before the flag is reset).\n            sendFlag = false;\n            // Discard the 'end' event if the connection has been aborted\n            setState(self.DONE);\n            // Construct responseText from response\n            self.responseText = self.response.toString('utf8');\n          }\n        });\n\n        response.on('error', function(error) {\n          self.handleError(error);\n        });\n      }\n\n      // Error handler for the request\n      var errorHandler = function(error) {\n        self.handleError(error);\n      }\n\n      // Create the request\n      request = doRequest(options, responseHandler).on('error', errorHandler);\n\n      if (opts.autoUnref) {\n        request.on('socket', (socket) => {\n          socket.unref();\n        });\n      }\n\n      // Node 0.4 and later won't accept empty data. Make sure it's needed.\n      if (data) {\n        request.write(data);\n      }\n\n      request.end();\n\n      self.dispatchEvent(\"loadstart\");\n    } else { // Synchronous\n      // Create a temporary file for communication with the other Node process\n      var contentFile = \".node-xmlhttprequest-content-\" + process.pid;\n      var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;\n      fs.writeFileSync(syncFile, \"\", \"utf8\");\n      // The async request the other Node process executes\n      var execString = \"var http = require('http'), https = require('https'), fs = require('fs');\"\n        + \"var doRequest = http\" + (ssl ? \"s\" : \"\") + \".request;\"\n        + \"var options = \" + JSON.stringify(options) + \";\"\n        + \"var responseText = '';\"\n        + \"var responseData = Buffer.alloc(0);\"\n        + \"var req = doRequest(options, function(response) {\"\n        + \"response.on('data', function(chunk) {\"\n        + \"  var data = Buffer.from(chunk);\"\n        + \"  responseText += data.toString('utf8');\"\n        + \"  responseData = Buffer.concat([responseData, data]);\"\n        + \"});\"\n        + \"response.on('end', function() {\"\n        + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText, data: responseData.toString('base64')}}), 'utf8');\"\n        + \"fs.unlinkSync('\" + syncFile + \"');\"\n        + \"});\"\n        + \"response.on('error', function(error) {\"\n        + \"fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\"\n        + \"fs.unlinkSync('\" + syncFile + \"');\"\n        + \"});\"\n        + \"}).on('error', function(error) {\"\n        + \"fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\"\n        + \"fs.unlinkSync('\" + syncFile + \"');\"\n        + \"});\"\n        + (data ? \"req.write('\" + JSON.stringify(data).slice(1,-1).replace(/'/g, \"\\\\'\") + \"');\":\"\")\n        + \"req.end();\";\n      // Start the other Node Process, executing this string\n      var syncProc = spawn(process.argv[0], [\"-e\", execString]);\n      var statusText;\n      while(fs.existsSync(syncFile)) {\n        // Wait while the sync file is empty\n      }\n      self.responseText = fs.readFileSync(contentFile, 'utf8');\n      // Kill the child process once the file has data\n      syncProc.stdin.end();\n      // Remove the temporary file\n      fs.unlinkSync(contentFile);\n      if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {\n        // If the file returned an error, handle it\n        var errorObj = JSON.parse(self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, \"\"));\n        self.handleError(errorObj, 503);\n      } else {\n        // If the file returned okay, parse its data and move to the DONE state\n        self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, \"$1\");\n        var resp = JSON.parse(self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, \"$1\"));\n        response = {\n          statusCode: self.status,\n          headers: resp.data.headers\n        };\n        self.responseText = resp.data.text;\n        self.response = Buffer.from(resp.data.data, 'base64');\n        setState(self.DONE, true);\n      }\n    }\n  };\n\n  /**\n   * Called when an error is encountered to deal with it.\n   * @param  status  {number}    HTTP status code to use rather than the default (0) for XHR errors.\n   */\n  this.handleError = function(error, status) {\n    this.status = status || 0;\n    this.statusText = error;\n    this.responseText = error.stack;\n    errorFlag = true;\n    setState(this.DONE);\n  };\n\n  /**\n   * Aborts a request.\n   */\n  this.abort = function() {\n    if (request) {\n      request.abort();\n      request = null;\n    }\n\n    headers = Object.assign({}, defaultHeaders);\n    this.responseText = \"\";\n    this.responseXML = \"\";\n    this.response = Buffer.alloc(0);\n\n    errorFlag = abortedFlag = true\n    if (this.readyState !== this.UNSENT\n        && (this.readyState !== this.OPENED || sendFlag)\n        && this.readyState !== this.DONE) {\n      sendFlag = false;\n      setState(this.DONE);\n    }\n    this.readyState = this.UNSENT;\n  };\n\n  /**\n   * Adds an event listener. Preferred method of binding to events.\n   */\n  this.addEventListener = function(event, callback) {\n    if (!(event in listeners)) {\n      listeners[event] = [];\n    }\n    // Currently allows duplicate callbacks. Should it?\n    listeners[event].push(callback);\n  };\n\n  /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */\n  this.removeEventListener = function(event, callback) {\n    if (event in listeners) {\n      // Filter will return a new array with the callback removed\n      listeners[event] = listeners[event].filter(function(ev) {\n        return ev !== callback;\n      });\n    }\n  };\n\n  /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */\n  this.dispatchEvent = function (event) {\n    if (typeof self[\"on\" + event] === \"function\") {\n      if (this.readyState === this.DONE && settings.async)\n        setTimeout(function() { self[\"on\" + event]() }, 0)\n      else\n        self[\"on\" + event]()\n    }\n    if (event in listeners) {\n      for (let i = 0, len = listeners[event].length; i < len; i++) {\n        if (this.readyState === this.DONE)\n          setTimeout(function() { listeners[event][i].call(self) }, 0)\n        else\n          listeners[event][i].call(self)\n      }\n    }\n  };\n\n  /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param int state New state\n   */\n  var setState = function(state) {\n    if ((self.readyState === state) || (self.readyState === self.UNSENT && abortedFlag))\n      return\n\n    self.readyState = state;\n\n    if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {\n      self.dispatchEvent(\"readystatechange\");\n    }\n\n    if (self.readyState === self.DONE) {\n      let fire\n\n      if (abortedFlag)\n        fire = \"abort\"\n      else if (errorFlag)\n        fire = \"error\"\n      else\n        fire = \"load\"\n\n      self.dispatchEvent(fire)\n\n      // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n      self.dispatchEvent(\"loadend\");\n    }\n  };\n};\n", "/**\n * Custom Error classes that shall be raised by webR.\n * @module Error\n */\n\n/**\n * A general error raised by webR.\n */\nexport class WebRError extends Error {\n  constructor(msg: string) {\n    super(msg);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\n/**\n * Exceptions raised on the webR worker thread that have been forwarded to the\n * main thread through the communication channel.\n */\nexport class WebRWorkerError extends WebRError { }\n\n/**\n * Exceptions related to issues with the webR communication channel.\n */\nexport class WebRChannelError extends WebRError { }\n\n/**\n * Exceptions related to issues with webR object payloads.\n */\nexport class WebRPayloadError extends WebRError { }\n", "import { WebRError } from './error';\n\ninterface Process {\n  browser: string | undefined;\n  release: { [key: string]: string };\n}\ndeclare let process: Process;\n\nexport const IN_NODE =\n  typeof process !== 'undefined' &&\n  process.release &&\n  process.release.name === 'node';\n\n// Adapted from https://github.com/pyodide/pyodide/blob/main/src/js/compat.ts\nexport let loadScript: (url: string) => Promise<void>;\nif (globalThis.document) {\n  loadScript = (url) =>\n    new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = url;\n      script.onload = () => resolve();\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n} else if (globalThis.importScripts) {\n  loadScript = async (url) => {\n    try {\n      globalThis.importScripts(url);\n    } catch (e) {\n      if (e instanceof TypeError) {\n        await import(url);\n      } else {\n        throw e;\n      }\n    }\n  };\n} else if (IN_NODE) {\n  loadScript = async (url: string) => {\n    const nodePathMod = (await import('path')).default;\n    await import(nodePathMod.resolve(url));\n  };\n} else {\n  throw new WebRError('Cannot determine runtime environment');\n}\n", "/**\n * Common module for working with R objects.\n * @module RObject\n */\nimport * as RMain from './robj-main';\nimport * as RWorker from './robj-worker';\n\nexport type RPtr = number;\n\nexport const RTypeMap = {\n  null: 0,\n  symbol: 1,\n  pairlist: 2,\n  closure: 3,\n  environment: 4,\n  promise: 5,\n  call: 6,\n  special: 7,\n  builtin: 8,\n  string: 9,\n  logical: 10,\n  integer: 13,\n  double: 14,\n  complex: 15,\n  character: 16,\n  dots: 17,\n  any: 18,\n  list: 19,\n  expression: 20,\n  bytecode: 21,\n  pointer: 22,\n  weakref: 23,\n  raw: 24,\n  s4: 25,\n  new: 30,\n  free: 31,\n  function: 99,\n} as const;\nexport type RType = keyof typeof RTypeMap;\nexport type RTypeNumber = typeof RTypeMap[RType];\n\n/** @internal */\nexport type RCtor = 'object' | 'dataframe';\n\nexport type Complex = {\n  re: number;\n  im: number;\n};\n\nexport type WebRDataRaw =\n  | number\n  | string\n  | boolean\n  | undefined\n  | null\n  | void\n  | Complex\n  | Error\n  | ArrayBuffer\n  | ArrayBufferView\n  | ImageBitmap\n  | Array<WebRDataRaw>\n  | Map<WebRDataRaw, WebRDataRaw>\n  | Set<WebRDataRaw>\n  | { [key: string]: WebRDataRaw };\n\nexport type NamedEntries<T> = [string | null, T][];\nexport type NamedObject<T> = { [key: string]: T };\n\n/**\n * A union of JavaScript types that are able to be converted into an R object.\n *\n * `WebRData` is used both as a general input argument for R object construction\n * and also as a general return type when converting R objects into JavaScript.\n *\n */\nexport type WebRData =\n  | RMain.RObject\n  | RWorker.RObjectBase\n  | RWorker.RObject\n  | WebRDataRaw\n  | WebRDataJs\n  | WebRData[]\n  | ArrayBuffer\n  | ArrayBufferView\n  | { [key: string]: WebRData };\n\n/**\n * A subset of {@link WebRData} for JavaScript objects that can be converted\n * into R atomic vectors.\n * @typeParam T The JavaScript scalar type associated with the atomic vector.\n */\nexport type WebRDataAtomic<T> =\n  | WebRDataScalar<T>\n  | WebRDataJsAtomic<T>\n  | NamedObject<T | null>\n  | ([T] extends [number] ? ArrayBuffer | ArrayBufferView | (number | null)[] : (T | null)[]);\n\n/**\n * `WebRDataJs` objects form a tree structure, used when serialising R objects\n * into a JavaScript representation.\n *\n * Nested R objects are serialised using the {@link WebRDataJsNode} type,\n * forming branches in the resulting tree structure, with leaves formed by the\n * remaining types.\n */\nexport type WebRDataJs =\n  | WebRDataJsNull\n  | WebRDataJsString\n  | WebRDataJsSymbol\n  | WebRDataJsNode\n  | WebRDataJsAtomic<RWorker.atomicType>;\n\nexport type WebRDataJsNull = {\n  type: 'null';\n};\n\nexport type WebRDataJsString = {\n  type: 'string';\n  value: string;\n};\n\nexport type WebRDataJsSymbol = {\n  type: 'symbol';\n  printname: string | null;\n  symvalue: RPtr | null;\n  internal: RPtr | null;\n};\n\nexport type WebRDataJsNode = {\n  type: 'list' | 'pairlist' | 'environment';\n  names: (string | null)[] | null;\n  values: (WebRDataRaw | RWorker.RObject | RMain.RObject | WebRDataJs)[];\n};\n\nexport type WebRDataJsAtomic<T> = {\n  type: 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw';\n  names: (string | null)[] | null;\n  values: (T | null)[];\n};\n\n/**\n * Test for a {@link WebRDataJs} instance.\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of a {@link WebRDataJs}.\n */\nexport function isWebRDataJs(value: any): value is WebRDataJs {\n  return !!value && typeof value === 'object'\n    && Object.keys(RTypeMap).includes(value.type as string);\n}\n\n/**\n * A subset of WebRData for scalar JavaScript objects.\n */\nexport type WebRDataScalar<T> = T | RMain.RObject | RWorker.RObjectBase;\n\n/**\n * Test if an object is of type {@link Complex}.\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is of type {@link Complex}.\n */\nexport function isComplex(value: any): value is Complex {\n  return !!value && typeof value === 'object' && 're' in value && 'im' in value;\n}\n", "import type { RPtr, RTypeNumber } from './robj';\nimport type { RObject, RList } from './robj-worker';\nimport type { EvalROptions } from './webr-chan';\nimport type { UnwindProtectException } from './utils-r';\nimport type { ChannelWorker } from './chan/channel';\nimport type { FSMountOptions } from './webr-main';\n\nexport interface Module extends EmscriptenModule {\n  /* Add mkdirTree to FS namespace, missing from @types/emscripten at the\n   * time of writing.\n   */\n  FS: typeof FS & {\n    _mount: typeof FS.mount;\n    mkdirTree(path: string): void;\n    filesystems: {\n      [key: string]: Emscripten.FileSystemType;\n    }\n  };\n  ENV: { [key: string]: string };\n  GOT: {\n    [key: string]: { required: boolean; value: number };\n  }\n  createLazyFilesystem: () => void;\n  monitorRunDependencies: (n: number) => void;\n  noImageDecoding: boolean;\n  noAudioDecoding: boolean;\n  noWasmDecoding: boolean;\n  downloadFileContent: (\n    URL: string,\n    headers?: Array<string>\n  ) => {\n    status: number;\n    response: string | ArrayBuffer;\n  };\n  mountImageUrl: (url: string, mountpoint: string) => void;\n  mountImagePath: (path: string, mountpoint: string) => void;\n  mountDriveFS: (mountpoint: string, options: FSMountOptions<'DRIVEFS'>) => void;\n  // Exported Emscripten JS API\n  allocateUTF8: typeof allocateUTF8;\n  allocateUTF8OnStack: typeof allocateUTF8OnStack;\n  getValue: typeof getValue;\n  setValue: typeof setValue;\n  UTF8ToString: typeof UTF8ToString;\n  callMain: (args: string[]) => void;\n  getWasmTableEntry: (entry: number) => (...args: any[]) => RPtr;\n  // R symbols from Rinternals.h\n  _ATTRIB: (ptr: RPtr) => RPtr;\n  _CAR: (ptr: RPtr) => RPtr;\n  _CDR: (ptr: RPtr) => RPtr;\n  _CLOENV: (ptr: RPtr) => RPtr;\n  _COMPLEX: (ptr: RPtr) => RPtr;\n  _FRAME: (ptr: RPtr) => RPtr;\n  _INTEGER: (ptr: RPtr) => RPtr;\n  _INTERNAL: (ptr: RPtr) => RPtr;\n  _LENGTH: (ptr: RPtr) => number;\n  _LOGICAL: (ptr: RPtr) => RPtr;\n  _PRINTNAME: (ptr: RPtr) => RPtr;\n  _R_CHAR: (ptr: RPtr) => RPtr;\n  _RAW: (ptr: RPtr) => RPtr;\n  _REAL: (ptr: RPtr) => RPtr;\n  _SETCAR: (x: RPtr, y: RPtr) => void;\n  _STRING_ELT: (ptr: RPtr, idx: number) => RPtr;\n  _STRING_PTR: (ptr: RPtr) => RPtr;\n  _SYMVALUE: (ptr: RPtr) => RPtr;\n  _TAG: (ptr: RPtr) => RPtr;\n  _TYPEOF: (ptr: RPtr) => RPtr;\n  _VECTOR_ELT: (ptr: RPtr, idx: number) => RPtr;\n  _R_lsInternal3: (env: RPtr, all: number, sorted: number) => RPtr;\n  _R_MakeExternalPtr: (p: number, tag: RPtr, prot: RPtr) => RPtr;\n  _R_NewEnv: (enclos: RPtr, hash: number, size: number) => RPtr;\n  _R_ParseEvalString: (code: number, env: RPtr) => RPtr;\n  _R_PreserveObject: (ptr: RPtr) => void;\n  _R_ReleaseObject: (ptr: RPtr) => void;\n  _R_ReplDLLinit: () => void;\n  _R_ReplDLLdo1: () => number;\n  _Rf_ScalarReal: (n: number) => RPtr;\n  _Rf_ScalarLogical: (l: number) => RPtr;\n  _Rf_ScalarInteger: (n: number) => RPtr;\n  _Rf_ScalarString: (s: string) => RPtr;\n  _Rf_allocList: (len: number) => RPtr;\n  _Rf_allocVector: (type: RTypeNumber, len: number) => RPtr;\n  _Rf_defineVar: (symbol: RPtr, value: RPtr, env: RPtr) => void;\n  _Rf_error: (msg: EmPtr) => void;\n  _Rf_eval: (call: RPtr, env: RPtr) => RPtr;\n  _Rf_findVarInFrame: (rho: RPtr, symbol: RPtr) => RPtr;\n  _Rf_listAppend: (source: RPtr, target: RPtr) => RPtr;\n  _Rf_getAttrib: (ptr1: RPtr, ptr2: RPtr) => RPtr;\n  _Rf_initialize_R: (argc: number, argv: RPtr) => void;\n  _Rf_install: (ptr: number) => RPtr;\n  _Rf_installTrChar: (name: RPtr) => RPtr;\n  _Rf_lang1: (ptr1: RPtr) => RPtr;\n  _Rf_lang2: (ptr1: RPtr, ptr2: RPtr) => RPtr;\n  _Rf_lang3: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\n  _Rf_lang4: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr) => RPtr;\n  _Rf_lang5: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr) => RPtr;\n  _Rf_lang6: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr, ptr4: RPtr, ptr5: RPtr, ptr6: RPtr) => RPtr;\n  _Rf_mkChar: (string: number) => RPtr;\n  _Rf_mkCharCE: (string: number, encoding: number) => RPtr;\n  _Rf_mkString: (ptr: number) => RPtr;\n  _Rf_onintr: () => void;\n  _Rf_protect: (ptr: RPtr) => RPtr;\n  _Rf_translateCharUTF8: (ptr: RPtr) => RPtr;\n  _R_ContinueUnwind: (cont: RPtr) => never;\n  _R_ProtectWithIndex: (ptr1: RPtr, ptr2: RPtr) => void;\n  _R_Reprotect: (ptr1: RPtr, ptr2: RPtr) => void;\n  _Rf_setAttrib: (ptr1: RPtr, ptr2: RPtr, ptr3: RPtr) => RPtr;\n  _Rf_unprotect: (n: number) => void;\n  _Rf_unprotect_ptr: (ptr: RPtr) => void;\n  _DLLbuf: RPtr;\n  _DLLbufp: RPtr;\n  _R_BaseEnv: RPtr;\n  _R_BracketSymbol: RPtr;\n  _R_Bracket2Symbol: RPtr;\n  _R_DollarSymbol: RPtr;\n  _R_EmptyEnv: RPtr;\n  _R_FalseValue: RPtr;\n  _R_GlobalEnv: RPtr;\n  _R_Interactive: RPtr;\n  _R_NaInt: RPtr;\n  _R_NaReal: RPtr;\n  _R_NaString: RPtr;\n  _R_LogicalNAValue: RPtr;\n  _R_NilValue: RPtr;\n  _R_TrueValue: RPtr;\n  _R_NamesSymbol: RPtr;\n  _R_UnboundValue: RPtr;\n  _SET_STRING_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\n  _SET_VECTOR_ELT: (ptr: RPtr, idx: number, val: RPtr) => void;\n  _setup_Rmainloop: () => void;\n  _strcpy: (dest: RPtr, src: RPtr) => number;\n  _vmaxget: () => number;\n  _vmaxset: (ptr: number) => void;\n  // TODO: Namespace all webR properties\n  webr: {\n    UnwindProtectException: typeof UnwindProtectException;\n    channel: ChannelWorker | undefined,\n    canvas: {\n      [key: number]: {\n        ctx: OffscreenCanvasRenderingContext2D;\n        offscreen: OffscreenCanvas;\n        transmit: boolean;\n      };\n    };\n    readConsole: () => number;\n    setPrompt: (prompt: string) => void;\n    resolveInit: () => void;\n    handleEvents: () => void;\n    dataViewer: (data: RPtr, title: string) => void;\n    evalJs: (code: RPtr) => unknown;\n    evalR: (expr: string | RObject, options?: EvalROptions) => RObject;\n    captureR: (expr: string | RObject, options: EvalROptions) => {\n      result: RObject,\n      output: RList,\n      images: ImageBitmap[],\n    };\n    setTimeoutWasm: (ptr: EmPtr, data: EmPtr, delay: number) => void;\n  };\n}\n\nexport const Module = {} as Module;\n\nexport type EmPtr = ReturnType<typeof Module.allocateUTF8>;\n\nexport interface DictEmPtrs {\n  [key: string]: EmPtr;\n}\n\nexport function dictEmFree(dict: { [key: string | number]: EmPtr }) {\n  Object.keys(dict).forEach((key) => Module._free(dict[key]));\n}\n", "import { Module, DictEmPtrs, dictEmFree } from './emscripten';\nimport { WebRData, RPtr } from './robj';\nimport { RObject, REnvironment, RHandle, handlePtr } from './robj-worker';\n\nexport function protect<T extends RHandle>(x: T): T {\n  Module._Rf_protect(handlePtr(x));\n  return x;\n}\n\nexport function protectInc<T extends RHandle>(x: T, prot: { n: number }): T {\n  Module._Rf_protect(handlePtr(x));\n  ++prot.n;\n  return x;\n}\n\nexport function protectWithIndex(x: RHandle): { loc: number; ptr: RPtr } {\n  // Integer size hardcoded to 4 bytes. This is fine but is there a\n  // way to call sizeof?\n  const pLoc = Module._malloc(4);\n\n  Module._R_ProtectWithIndex(handlePtr(x), pLoc);\n  const loc = Module.getValue(pLoc, 'i32');\n\n  return { loc: loc, ptr: pLoc };\n}\n\nexport function unprotectIndex(index: { ptr: RPtr }): void {\n  Module._Rf_unprotect(1);\n  Module._free(index.ptr);\n}\n\nexport function reprotect<T extends RHandle>(x: T, index: { loc: number; ptr: RPtr }): T {\n  Module._R_Reprotect(handlePtr(x), index.loc);\n  return x;\n}\n\nexport function unprotect(n: number) {\n  Module._Rf_unprotect(n);\n}\n\n// rlang convention: `env`-prefixed functions consistently take `env`\n// as first argument\nexport function envPoke(env: RHandle, sym: RHandle, value: RHandle) {\n  Module._Rf_defineVar(handlePtr(sym), handlePtr(value), handlePtr(env));\n}\n\nexport function parseEvalBare(code: string, env: WebRData): RObject {\n  const strings: DictEmPtrs = {};\n  const prot = { n: 0 };\n\n  try {\n    const envObj = new REnvironment(env);\n    protectInc(envObj, prot);\n\n    strings.code = Module.allocateUTF8(code);\n\n    const out = Module._R_ParseEvalString(strings.code, envObj.ptr);\n    return RObject.wrap(out);\n  } finally {\n    dictEmFree(strings);\n    unprotect(prot.n);\n  }\n}\n\nexport class UnwindProtectException extends Error {\n  cont: RPtr;\n  constructor(message: string, cont: RPtr) {\n    super(message);\n    this.name = 'UnwindProtectException';\n    this.cont = cont;\n  }\n}\n\nexport function safeEval(call: RHandle, env: RHandle): RPtr {\n  return Module.getWasmTableEntry(Module.GOT.ffi_safe_eval.value)(\n    handlePtr(call),\n    handlePtr(env)\n  );\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nexport const SZ_BUF_DOESNT_FIT = 0;\nexport const SZ_BUF_FITS_IDX = 1;\nexport const SZ_BUF_SIZE_IDX = 0;\n\nexport interface Endpoint extends EventSource {\n  postMessage(message: any, transfer?: Transferable[]): void;\n  start?: () => void;\n}\n\nexport interface EventSource {\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: object): void;\n\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: object,\n  ): void;\n}\n\nexport function toWireValue(value: any): [any, Transferable[]] {\n  return [value, transferCache.get(value) || []];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport type UUID = string;\n\nexport function isUUID(x: any): x is UUID {\n  return typeof x === 'string' && x.length === UUID_LENGTH;\n}\n\nexport const UUID_LENGTH = 63;\n\nexport function generateUUID(): UUID {\n  const result = Array.from({ length: 4 }, randomSegment).join('-');\n  if (result.length !== UUID_LENGTH) {\n    throw new Error('comlink internal error: UUID has the wrong length');\n  }\n  return result;\n}\n\nfunction randomSegment() {\n  let result = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);\n  const pad = 15 - result.length;\n  if (pad > 0) {\n    result = Array.from({ length: pad }, () => 0).join('') + result;\n  }\n  return result;\n}\n", "/**\n * Module for working with R objects on the worker thead.\n * @module RWorker\n */\nimport { Module } from './emscripten';\nimport { Complex, isComplex, NamedEntries, NamedObject, WebRDataRaw, WebRDataScalar } from './robj';\nimport { WebRData, WebRDataAtomic, RPtr, RType, RTypeMap, RTypeNumber, RCtor } from './robj';\nimport { isWebRDataJs, WebRDataJs, WebRDataJsAtomic, WebRDataJsNode } from './robj';\nimport { WebRDataJsNull, WebRDataJsString, WebRDataJsSymbol } from './robj';\nimport { isSimpleObject } from './utils';\nimport { envPoke, parseEvalBare, protect, protectInc, unprotect } from './utils-r';\nimport { protectWithIndex, reprotect, unprotectIndex, safeEval } from './utils-r';\nimport { EvalROptions, ShelterID, isShelterID } from './webr-chan';\n\nexport type RHandle = RObject | RPtr;\n\nexport function handlePtr(x: RHandle): RPtr {\n  if (isRObject(x)) {\n    return x.ptr;\n  } else {\n    return x;\n  }\n}\n\n// Throw if an R object does not match a certain R type\nfunction assertRType(obj: RObjectBase, type: RType) {\n  if (Module._TYPEOF(obj.ptr) !== RTypeMap[type]) {\n    throw new Error(`Unexpected object type \"${obj.type()}\" when expecting type \"${type}\"`);\n  }\n}\n\n// TODO: Shelter should be a dictionary not an array\nexport const shelters = new Map<ShelterID, RPtr[]>();\n\n// Use this for implicit protection of objects sent to the main\n// thread. Currently uses the precious list but could use a different\n// mechanism in the future. Unprotection is explicit through\n// `Shelter.destroy()`.\nexport function keep(shelter: ShelterID, x: RHandle) {\n  const ptr = handlePtr(x);\n  Module._R_PreserveObject(ptr);\n\n  // TODO: Remove when shelter transition is complete\n  if (shelter === undefined) {\n    return;\n  }\n\n  if (isShelterID(shelter)) {\n    shelters.get(shelter)!.push(ptr);\n    return;\n  }\n\n  throw new Error('Unexpected shelter type ' + typeof shelter);\n}\n\n// Frees objects preserved with `keep()`. This method is called by\n// users in the main thread to release objects that were automatically\n// protected before being sent away.\nexport function destroy(shelter: ShelterID, x: RHandle) {\n  const ptr = handlePtr(x);\n  Module._R_ReleaseObject(ptr);\n\n  const objs: RPtr[] = shelters.get(shelter)!;\n  const loc = objs.indexOf(ptr);\n\n  if (loc < 0) {\n    throw new Error(\"Can't find object in shelter.\");\n  }\n\n  objs.splice(loc, 1);\n}\n\nexport function purge(shelter: ShelterID) {\n  const ptrs: RPtr[] = shelters.get(shelter)!;\n\n  for (const ptr of ptrs) {\n    try {\n      Module._R_ReleaseObject(ptr);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  shelters.set(shelter, []);\n}\n\nexport interface ToJsOptions {\n  depth: number;\n}\n\nexport type Nullable<T> = T | RNull;\n\nfunction newObjectFromData(obj: WebRData): RObject {\n  // Conversion of WebRDataJs type JS objects\n  if (isWebRDataJs(obj)) {\n    return new (getRWorkerClass(obj.type))(obj);\n  }\n\n  // Map JS's 'undefined' type to R's NULL object\n  if (typeof obj == 'undefined') {\n    return new RNull();\n  }\n\n  // Conversion of explicit R NULL value\n  if (obj && typeof obj === 'object' && 'type' in obj && obj.type === 'null') {\n    return new RNull();\n  }\n\n  // Direct conversion of scalar JS values\n  if (obj === null) {\n    return new RLogical({ type: 'logical', names: null, values: [null] });\n  }\n  if (typeof obj === 'boolean') {\n    return new RLogical(obj);\n  }\n  if (typeof obj === 'number') {\n    return new RDouble(obj);\n  }\n  if (typeof obj === 'string') {\n    return new RCharacter(obj);\n  }\n  if (isComplex(obj)) {\n    return new RComplex(obj);\n  }\n\n  // Conversion of composite JS objects\n  if (ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer) {\n    return new RRaw(obj);\n  }\n  if (Array.isArray(obj)) {\n    return newObjectFromArray(obj);\n  }\n  // Any other JS object shape is reserved for creating an R `data.frame`\n  if (typeof obj === 'object') {\n    return RDataFrame.fromObject(obj);\n  }\n\n  throw new Error('R object construction for this JS object is not yet supported.');\n}\n\nfunction newObjectFromArray(arr: WebRData[]): RObject {\n  const prot = { n: 0 };\n\n  // Is this a D3 formatted data frame?\n  const hasObjects = arr.every((v) => v && typeof v === 'object' && !isRObject(v) && !isComplex(v));\n  if (hasObjects) {\n    const _arr = arr as { [key: string]: WebRData }[];\n    const isConsistent = _arr.every((a) => {\n      return Object.keys(a).filter((k) => !Object.keys(_arr[0]).includes(k)).length === 0 &&\n        Object.keys(_arr[0]).filter((k) => !Object.keys(a).includes(k)).length === 0;\n    });\n    const isAtomic = _arr.every((a) => Object.values(a).every((v) => {\n      return isAtomicType(v) || isRVectorAtomic(v);\n    }));\n    if (isConsistent && isAtomic) {\n      return RDataFrame.fromD3(_arr);\n    }\n  }\n\n  // Not D3 formatted - Can we shortcut and convert directly?\n  if (arr.every((v) => typeof v === 'boolean' || v === null)) {\n    return new RLogical(arr as (boolean | null)[]);\n  }\n  if (arr.every((v) => typeof v === 'number' || v === null)) {\n    return new RDouble(arr as (number | null)[]);\n  }\n  if (arr.every((v) => typeof v === 'string' || v === null)) {\n    return new RCharacter(arr as (string | null)[]);\n  }\n\n  // Not D3 & mixed types: use R's built in object coercion with c() so as to\n  // match R's built in coercion rules\n  try {\n    const call = new RCall([new RSymbol('c'), ...arr]);\n    protectInc(call, prot);\n    return call.eval();\n  } finally {\n    unprotect(prot.n);\n  }\n}\n\nexport class RObjectBase {\n  ptr: RPtr;\n  constructor(ptr: RPtr) {\n    this.ptr = ptr;\n  }\n\n  type(): RType {\n    const typeNumber = Module._TYPEOF(this.ptr) as RTypeNumber;\n    const type = Object.keys(RTypeMap).find(\n      (typeName) => RTypeMap[typeName as RType] === typeNumber\n    );\n    return type as RType;\n  }\n}\n\nexport class RObject extends RObjectBase {\n  constructor(data: WebRData) {\n    if (!(data instanceof RObjectBase)) {\n      return newObjectFromData(data);\n    }\n\n    super(data.ptr);\n  }\n\n  static wrap<T extends typeof RObject>(this: T, ptr: RPtr): InstanceType<T> {\n    const typeNumber = Module._TYPEOF(ptr) as RTypeNumber;\n    const type = Object.keys(RTypeMap)[Object.values(RTypeMap).indexOf(typeNumber)];\n    return new (getRWorkerClass(type as RType))(new RObjectBase(ptr)) as InstanceType<T>;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `RObject:${this.type()}`;\n  }\n\n  /** @internal */\n  static getPersistentObject(prop: keyof typeof objs): unknown {\n    return objs[prop];\n  }\n\n  /** @internal */\n  getPropertyValue(prop: keyof this): unknown {\n    return this[prop];\n  }\n\n  inspect(): void {\n    parseEvalBare('.Internal(inspect(x))', { x: this });\n  }\n\n  isNull(): this is RNull {\n    return Module._TYPEOF(this.ptr) === RTypeMap.null;\n  }\n\n  isNa(): boolean {\n    try {\n      const result = parseEvalBare('is.na(x)', { x: this }) as RLogical;\n      protect(result);\n      return result.toBoolean();\n    } finally {\n      unprotect(1);\n    }\n  }\n\n  isUnbound(): boolean {\n    return this.ptr === objs.unboundValue.ptr;\n  }\n\n  attrs(): Nullable<RPairlist> {\n    return RPairlist.wrap(Module._ATTRIB(this.ptr));\n  }\n\n  class(): RCharacter {\n    const prot = { n: 0 };\n    const classCall = new RCall([new RSymbol('class'), this]);\n    protectInc(classCall, prot);\n    try {\n      return classCall.eval() as RCharacter;\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  setNames(values: (string | null)[] | null): this {\n    let namesObj: RObject;\n\n    if (values === null) {\n      namesObj = objs.null;\n    } else if (Array.isArray(values) && values.every((v) => typeof v === 'string' || v === null)) {\n      namesObj = new RCharacter(values);\n    } else {\n      throw new Error('Argument to setNames must be null or an Array of strings or null');\n    }\n\n    // `setAttrib()` protects its inputs\n    Module._Rf_setAttrib(this.ptr, objs.namesSymbol.ptr, namesObj.ptr);\n    return this;\n  }\n\n  names(): (string | null)[] | null {\n    const names = RCharacter.wrap(Module._Rf_getAttrib(this.ptr, objs.namesSymbol.ptr));\n    if (names.isNull()) {\n      return null;\n    } else {\n      return names.toArray();\n    }\n  }\n\n  includes(name: string) {\n    const names = this.names();\n    return names && names.includes(name);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJs {\n    throw new Error('This R object cannot be converted to JS');\n  }\n\n  subset(prop: number | string): RObject {\n    return this.#slice(prop, objs.bracketSymbol.ptr);\n  }\n\n  get(prop: number | string): RObject {\n    return this.#slice(prop, objs.bracket2Symbol.ptr);\n  }\n\n  getDollar(prop: string): RObject {\n    return this.#slice(prop, objs.dollarSymbol.ptr);\n  }\n\n  #slice(prop: number | string, op: RPtr): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const idx = new RObject(prop);\n      protectInc(idx, prot);\n\n      const call = Module._Rf_lang3(op, this.ptr, idx.ptr);\n      protectInc(call, prot);\n\n      return RObject.wrap(safeEval(call, objs.baseEnv));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  pluck(...path: (string | number)[]): RObject | undefined {\n    const index = protectWithIndex(objs.null);\n\n    try {\n      const getter = (obj: RObject, prop: string | number): RObject => {\n        const out = obj.get(prop);\n        return reprotect(out, index);\n      };\n      const result = path.reduce(getter, this);\n\n      return result.isNull() ? undefined : result;\n    } finally {\n      unprotectIndex(index);\n    }\n  }\n\n  set(prop: string | number, value: RObject | WebRDataRaw): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const idx = new RObject(prop);\n      protectInc(idx, prot);\n\n      const valueObj = new RObject(value);\n      protectInc(valueObj, prot);\n\n      const assign = new RSymbol('[[<-');\n      const call = Module._Rf_lang4(assign.ptr, this.ptr, idx.ptr, valueObj.ptr);\n      protectInc(call, prot);\n\n      return RObject.wrap(safeEval(call, objs.baseEnv));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  /** @internal */\n  static getMethods(obj: RObject) {\n    const props = new Set<string>();\n    let cur: unknown = obj;\n    do {\n      Object.getOwnPropertyNames(cur).map((p) => props.add(p));\n    } while ((cur = Object.getPrototypeOf(cur)));\n    return [...props.keys()].filter((i) => typeof obj[i as keyof typeof obj] === 'function');\n  }\n}\n\nexport class RNull extends RObject {\n  constructor() {\n    super(new RObjectBase(Module.getValue(Module._R_NilValue, '*')));\n    return this;\n  }\n\n  toJs(): WebRDataJsNull {\n    return { type: 'null' };\n  }\n}\n\nexport class RSymbol extends RObject {\n  // Note that symbols don't need to be protected. This also means\n  // that allocating symbols in loops with random data is probably a\n  // bad idea because this leaks memory.\n  constructor(x: WebRDataScalar<string>) {\n    if (x instanceof RObjectBase) {\n      assertRType(x, 'symbol');\n      super(x);\n      return;\n    }\n    const name = Module.allocateUTF8(x as string);\n    try {\n      super(new RObjectBase(Module._Rf_install(name)));\n    } finally {\n      Module._free(name);\n    }\n  }\n\n  toJs(): WebRDataJsSymbol {\n    const obj = this.toObject();\n    return {\n      type: 'symbol',\n      printname: obj.printname,\n      symvalue: obj.symvalue,\n      internal: obj.internal,\n    };\n  }\n\n  toObject(): {\n    printname: string | null;\n    symvalue: RPtr | null;\n    internal: RPtr | null;\n  } {\n    return {\n      printname: this.printname().isUnbound() ? null : this.printname().toString(),\n      symvalue: this.symvalue().isUnbound() ? null : this.symvalue().ptr,\n      internal: this.internal().isNull() ? null : this.internal().ptr,\n    };\n  }\n\n  toString(): string {\n    return this.printname().toString();\n  }\n\n  printname(): RString {\n    return RString.wrap(Module._PRINTNAME(this.ptr));\n  }\n  symvalue(): RObject {\n    return RObject.wrap(Module._SYMVALUE(this.ptr));\n  }\n  internal(): RObject {\n    return RObject.wrap(Module._INTERNAL(this.ptr));\n  }\n}\n\nexport class RPairlist extends RObject {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'pairlist');\n      super(val);\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const list = RPairlist.wrap(Module._Rf_allocList(values.length));\n      protectInc(list, prot);\n\n      for (\n        let [i, next] = [0, list as Nullable<RPairlist>];\n        !next.isNull();\n        [i, next] = [i + 1, next.cdr()]\n      ) {\n        next.setcar(new RObject(values[i]));\n      }\n\n      list.setNames(names);\n      super(list);\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return this.toArray().length;\n  }\n\n  toArray(options: ToJsOptions = { depth: 1 }): WebRData[] {\n    return this.toJs(options).values;\n  }\n\n  toObject({\n    allowDuplicateKey = true,\n    allowEmptyKey = false,\n    depth = -1,\n  } = {}): NamedObject<WebRData> {\n    const entries = this.entries({ depth });\n    const keys = entries.map(([k,]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error('Duplicate key when converting pairlist without allowDuplicateKey enabled');\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error('Empty or null key when converting pairlist without allowEmptyKey enabled');\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    ) as NamedObject<WebRData>;\n  }\n\n  entries(options: ToJsOptions = { depth: 1 }): NamedEntries<WebRData> {\n    const obj = this.toJs(options);\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\n  }\n\n  toJs(options: ToJsOptions = { depth: 0 }, depth = 1): WebRDataJsNode {\n    const namesArray: string[] = [];\n    let hasNames = false;\n    const values: WebRDataJsNode['values'] = [];\n\n    for (let next = this as Nullable<RPairlist>; !next.isNull(); next = next.cdr()) {\n      const symbol = next.tag();\n      if (symbol.isNull()) {\n        namesArray.push('');\n      } else {\n        hasNames = true;\n        namesArray.push(symbol.toString());\n      }\n      if (options.depth && depth >= options.depth) {\n        values.push(next.car());\n      } else {\n        values.push(next.car().toJs(options, depth + 1));\n      }\n    }\n    const names = hasNames ? namesArray : null;\n    return { type: 'pairlist', names, values };\n  }\n\n  includes(name: string): boolean {\n    return name in this.toObject();\n  }\n\n  setcar(obj: RObject): void {\n    Module._SETCAR(this.ptr, obj.ptr);\n  }\n\n  car(): RObject {\n    return RObject.wrap(Module._CAR(this.ptr));\n  }\n\n  cdr(): Nullable<RPairlist> {\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\n  }\n\n  tag(): Nullable<RSymbol> {\n    return RObject.wrap(Module._TAG(this.ptr)) as Nullable<RSymbol>;\n  }\n}\n\nexport class RCall extends RObject {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'call');\n      super(val);\n      return this;\n    }\n    const prot = { n: 0 };\n\n    try {\n      const { values } = toWebRData(val);\n      const objs = values.map((value) => protectInc(new RObject(value), prot));\n      const call = RCall.wrap(Module._Rf_allocVector(RTypeMap.call, values.length));\n      protectInc(call, prot);\n\n      for (\n        let [i, next] = [0, call as Nullable<RPairlist>];\n        !next.isNull();\n        [i, next] = [i + 1, next.cdr()]\n      ) {\n        next.setcar(objs[i]);\n      }\n      super(call);\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  setcar(obj: RObject): void {\n    Module._SETCAR(this.ptr, obj.ptr);\n  }\n\n  car(): RObject {\n    return RObject.wrap(Module._CAR(this.ptr));\n  }\n\n  cdr(): Nullable<RPairlist> {\n    return RObject.wrap(Module._CDR(this.ptr)) as Nullable<RPairlist>;\n  }\n\n  eval(): RObject {\n    return Module.webr.evalR(this, { env: objs.baseEnv });\n  }\n\n  capture(options: EvalROptions = {}) {\n    return Module.webr.captureR(this, options);\n  }\n\n  deparse(): string {\n    const prot = { n: 0 };\n    try {\n      const call = Module._Rf_lang2(\n        new RSymbol('deparse1').ptr,\n        Module._Rf_lang2(new RSymbol('quote').ptr, this.ptr)\n      );\n      protectInc(call, prot);\n\n      const val = RCharacter.wrap(safeEval(call, objs.baseEnv));\n      protectInc(val, prot);\n\n      return val.toString();\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n}\n\nexport class RList extends RObject {\n  constructor(val: WebRData, names: (string | null)[] | null = null) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'list');\n      super(val);\n      if (names) {\n        if (names.length !== this.length) {\n          throw new Error(\n            \"Can't construct named `RList`. Supplied `names` must be the same length as the list.\"\n          );\n        }\n        this.setNames(names);\n      }\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const data = toWebRData(val);\n      const ptr = Module._Rf_allocVector(RTypeMap.list, data.values.length);\n      protectInc(ptr, prot);\n\n      data.values.forEach((v, i) => {\n        // When we specifically use the `RList` constructor, deeply convert R objects to R lists\n        if (isSimpleObject(v)) {\n          Module._SET_VECTOR_ELT(ptr, i, new RList(v).ptr);\n        } else {\n          Module._SET_VECTOR_ELT(ptr, i, new RObject(v).ptr);\n        }\n      });\n\n      const _names = names ? names : data.names;\n      if (_names && _names.length !== data.values.length) {\n        throw new Error(\n          \"Can't construct named `RList`. Supplied `names` must be the same length as the list.\"\n        );\n      }\n      RObject.wrap(ptr).setNames(_names);\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return Module._LENGTH(this.ptr);\n  }\n\n  isDataFrame(): boolean {\n    const classes = RPairlist.wrap(Module._ATTRIB(this.ptr)).get('class') as RNull | RCharacter;\n    return !classes.isNull() && classes.toArray().includes('data.frame');\n  }\n\n  toArray(options: { depth: number } = { depth: 1 }): WebRData[] {\n    return this.toJs(options).values;\n  }\n\n  toObject({\n    allowDuplicateKey = true,\n    allowEmptyKey = false,\n    depth = -1,\n  } = {}): NamedObject<WebRData> {\n    const entries = this.entries({ depth });\n    const keys = entries.map(([k,]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error('Duplicate key when converting list without allowDuplicateKey enabled');\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error('Empty or null key when converting list without allowEmptyKey enabled');\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    ) as NamedObject<WebRData>;\n  }\n\n  toD3(): NamedObject<WebRData>[] {\n    if (!this.isDataFrame()) {\n      throw new Error(\n        \"Can't convert R list object to D3 format. Object must be of class 'data.frame'.\"\n      );\n    }\n    const entries = this.entries() as Array<[string, atomicType[]]>;\n    return entries.reduce((a, entry) => {\n      entry[1].forEach((v, j) => a[j] = Object.assign(a[j] || {}, { [entry[0]!]: v }));\n      return a;\n    }, []);\n  }\n\n  entries(options: { depth: number } = { depth: -1 }): NamedEntries<WebRData> {\n    const obj = this.toJs(options);\n\n    // If this is a data frame, assume we have atomic vector columns and can\n    // convert directly to array values by default.\n    if (this.isDataFrame() && options.depth < 0) {\n      obj.values = (obj.values as RVectorAtomic<atomicType>[]).map((v) => v.toArray());\n    }\n    return obj.values.map((v, i) => [obj.names ? obj.names[i] : null, v]);\n  }\n\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\n    return {\n      type: 'list',\n      names: this.names(),\n      values: [...Array(this.length).keys()].map((i) => {\n        if (options.depth && depth >= options.depth) {\n          return this.get(i + 1);\n        } else {\n          return this.get(i + 1).toJs(options, depth + 1);\n        }\n      }),\n    };\n  }\n}\n\nexport class RDataFrame extends RList {\n  constructor(val: WebRData) {\n    if (val instanceof RObjectBase) {\n      super(val);\n      if (!this.isDataFrame()) {\n        throw new Error(\"Can't construct `RDataFrame`. Supplied R object is not a `data.frame`.\");\n      }\n      return this;\n    }\n    return RDataFrame.fromObject(val);\n  }\n\n  static fromObject(obj: WebRData) {\n    const { names, values } = toWebRData(obj);\n    const prot = { n: 0 };\n\n    // Do we have consistent columns of atomic type? If so, make a `data.frame`.\n    try {\n      const hasNames = !!names && names.length > 0 && names.every((v) => v);\n      const hasArrays = values.length > 0 && values.every((v) => {\n        return Array.isArray(v) || ArrayBuffer.isView(v) || v instanceof ArrayBuffer;\n      });\n\n      if (hasNames && hasArrays) {\n        const _values = values as WebRData[][];\n        const isConsistentLength = _values.every((a) => a.length === _values[0].length);\n        const isAtomic = _values.every((a) => {\n          return isAtomicType(a[0]) || isRVectorAtomic(a[0]);\n        });\n\n        if (isConsistentLength && isAtomic) {\n          const listObj = new RList({\n            type: 'list',\n            names: names,\n            values: _values.map((a) => newObjectFromData(a))\n          });\n          protectInc(listObj, prot);\n\n          const asDataFrame = new RCall([new RSymbol('as.data.frame'), listObj]);\n          protectInc(asDataFrame, prot);\n\n          return new RDataFrame(asDataFrame.eval());\n        }\n      }\n    } finally {\n      unprotect(prot.n);\n    }\n\n    // Not eligible as a `data.frame`, throw an error.\n    throw new Error(\"Can't construct `data.frame`. Source object is not eligible.\");\n  }\n\n  static fromD3(arr: { [key: string]: WebRData }[]) {\n    return this.fromObject(\n      Object.fromEntries(Object.keys(arr[0]).map((k) => [k, arr.map((v) => v[k])]))\n    );\n  }\n}\n\nexport class RFunction extends RObject {\n  exec(...args: (WebRDataRaw | RObject)[]): RObject {\n    const prot = { n: 0 };\n\n    try {\n      const call = new RCall([this, ...args]);\n      protectInc(call, prot);\n      return call.eval();\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  capture(options: EvalROptions = {}, ...args: (WebRDataRaw | RObject)[]) {\n    const prot = { n: 0 };\n\n    try {\n      const call = new RCall([this, ...args]);\n      protectInc(call, prot);\n      return call.capture(options);\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n}\n\nexport class RString extends RObject {\n  static CEType = {\n    CE_NATIVE: 0,\n    CE_UTF8: 1,\n    CE_LATIN1: 2,\n    CE_BYTES: 3,\n    CE_SYMBOL: 5,\n    CE_ANY: 99\n  } as const;\n\n  // Unlike symbols, strings are not cached and must thus be protected\n  constructor(x: WebRDataScalar<string>) {\n    if (x instanceof RObjectBase) {\n      assertRType(x, 'string');\n      super(x);\n      return;\n    }\n\n    const name = Module.allocateUTF8(x as string);\n\n    try {\n      super(new RObjectBase(Module._Rf_mkCharCE(name, RString.CEType.CE_UTF8)));\n    } finally {\n      Module._free(name);\n    }\n  }\n\n  toString(): string {\n    const vmax = Module._vmaxget();\n    try {\n      return Module.UTF8ToString(Module._Rf_translateCharUTF8(this.ptr));\n    } finally {\n      Module._vmaxset(vmax);\n    }\n  }\n\n  toJs(): WebRDataJsString {\n    return {\n      type: 'string',\n      value: this.toString(),\n    };\n  }\n}\n\nexport class REnvironment extends RObject {\n  constructor(val: WebRData = {}) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, 'environment');\n      super(val);\n      return this;\n    }\n    let nProt = 0;\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const ptr = protect(Module._R_NewEnv(objs.globalEnv.ptr, 0, 0));\n      ++nProt;\n\n      values.forEach((v, i) => {\n        const name = names ? names[i] : null;\n        if (!name) {\n          throw new Error(\"Can't create object in new environment with empty symbol name\");\n        }\n\n        const sym = new RSymbol(name);\n        const vObj = protect(new RObject(v));\n        try {\n          envPoke(ptr, sym, vObj);\n        } finally {\n          unprotect(1);\n        }\n      });\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(nProt);\n    }\n  }\n\n  ls(all = false, sorted = true): string[] {\n    const ls = RCharacter.wrap(Module._R_lsInternal3(this.ptr, Number(all), Number(sorted)));\n    return ls.toArray() as string[];\n  }\n\n  bind(name: string, value: WebRData): void {\n    const sym = new RSymbol(name);\n    const valueObj = protect(new RObject(value));\n\n    try {\n      envPoke(this, sym, valueObj);\n    } finally {\n      unprotect(1);\n    }\n  }\n\n  names(): string[] {\n    return this.ls(true, true);\n  }\n\n  frame(): RObject {\n    return RObject.wrap(Module._FRAME(this.ptr));\n  }\n\n  subset(prop: number | string): RObject {\n    if (typeof prop === 'number') {\n      throw new Error('Object of type environment is not subsettable');\n    }\n    return this.getDollar(prop);\n  }\n\n  toObject({ depth = -1 } = {}): NamedObject<WebRData> {\n    const symbols = this.names();\n    return Object.fromEntries(\n      [...Array(symbols.length).keys()].map((i) => {\n        const value = this.getDollar(symbols[i]);\n        return [symbols[i], depth < 0 ? value : value.toJs({ depth })];\n      })\n    );\n  }\n\n  toJs(options: { depth: number } = { depth: 0 }, depth = 1): WebRDataJsNode {\n    const names = this.names();\n    const values = [...Array(names.length).keys()].map((i) => {\n      if (options.depth && depth >= options.depth) {\n        return this.getDollar(names[i]);\n      } else {\n        return this.getDollar(names[i]).toJs(options, depth + 1);\n      }\n    });\n\n    return {\n      type: 'environment',\n      names,\n      values,\n    };\n  }\n}\n\ntype TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport type atomicType = number | boolean | Complex | string;\n\nabstract class RVectorAtomic<T extends atomicType> extends RObject {\n  constructor(\n    val: WebRDataAtomic<T>,\n    kind: RType,\n    newSetter: (ptr: RPtr) => (v: any, i: number) => void\n  ) {\n    if (val instanceof RObjectBase) {\n      assertRType(val, kind);\n      super(val);\n      return this;\n    }\n\n    const prot = { n: 0 };\n\n    try {\n      const { names, values } = toWebRData(val);\n\n      const ptr = Module._Rf_allocVector(RTypeMap[kind], values.length);\n      protectInc(ptr, prot);\n\n      values.forEach(newSetter(ptr));\n      RObject.wrap(ptr).setNames(names);\n\n      super(new RObjectBase(ptr));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  get length(): number {\n    return Module._LENGTH(this.ptr);\n  }\n\n  get(prop: number | string): this {\n    return super.get(prop) as this;\n  }\n\n  subset(prop: number | string): this {\n    return super.subset(prop) as this;\n  }\n\n  getDollar(): RObject {\n    throw new Error('$ operator is invalid for atomic vectors');\n  }\n\n  detectMissing(): boolean[] {\n    const prot = { n: 0 };\n\n    try {\n      const call = Module._Rf_lang2(new RSymbol('is.na').ptr, this.ptr);\n      protectInc(call, prot);\n\n      const val = RLogical.wrap(safeEval(call, objs.baseEnv));\n      protectInc(val, prot);\n\n      const ret = val.toTypedArray();\n      return Array.from(ret).map((elt) => Boolean(elt));\n    } finally {\n      unprotect(prot.n);\n    }\n  }\n\n  abstract toTypedArray(): TypedArray;\n\n  toArray(): (T | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) => (m ? null : (arr[idx] as T)));\n  }\n\n  toObject({ allowDuplicateKey = true, allowEmptyKey = false } = {}): NamedObject<T | null> {\n    const entries = this.entries();\n    const keys = entries.map(([k,]) => k);\n    if (!allowDuplicateKey && new Set(keys).size !== keys.length) {\n      throw new Error(\n        'Duplicate key when converting atomic vector without allowDuplicateKey enabled'\n      );\n    }\n    if (!allowEmptyKey && keys.some((k) => !k)) {\n      throw new Error(\n        'Empty or null key when converting atomic vector without allowEmptyKey enabled'\n      );\n    }\n    return Object.fromEntries(\n      entries.filter((u, idx) => entries.findIndex((v) => v[0] === u[0]) === idx)\n    ) as NamedObject<T | null>;\n  }\n\n  entries(): NamedEntries<T | null> {\n    const values = this.toArray();\n    const names = this.names();\n    return values.map((v, i) => [names ? names[i] : null, v]);\n  }\n\n  toJs(): WebRDataJsAtomic<T> {\n    return {\n      type: this.type() as 'logical' | 'integer' | 'double' | 'complex' | 'character' | 'raw',\n      names: this.names(),\n      values: this.toArray(),\n    };\n  }\n}\n\nexport class RLogical extends RVectorAtomic<boolean> {\n  constructor(val: WebRDataAtomic<boolean>) {\n    super(val, 'logical', RLogical.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._LOGICAL(ptr);\n    const naLogical = Module.getValue(Module._R_NaInt, 'i32');\n    return (v: null | boolean, i: number) => {\n      Module.setValue(data + 4 * i, v === null ? naLogical : Boolean(v), 'i32');\n    };\n  };\n\n  getBoolean(idx: number): boolean | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toBoolean(): boolean {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getBoolean(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS boolean\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Int32Array {\n    return new Int32Array(\n      Module.HEAP32.subarray(\n        Module._LOGICAL(this.ptr) / 4,\n        Module._LOGICAL(this.ptr) / 4 + this.length\n      )\n    );\n  }\n\n  toArray(): (boolean | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) => (m ? null : Boolean(arr[idx])));\n  }\n}\n\nexport class RInteger extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    super(val, 'integer', RInteger.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._INTEGER(ptr);\n    const naInteger = Module.getValue(Module._R_NaInt, 'i32');\n\n    return (v: null | number, i: number) => {\n      Module.setValue(data + 4 * i, v === null ? naInteger : Math.round(Number(v)), 'i32');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Int32Array {\n    return new Int32Array(\n      Module.HEAP32.subarray(\n        Module._INTEGER(this.ptr) / 4,\n        Module._INTEGER(this.ptr) / 4 + this.length\n      )\n    );\n  }\n}\n\nexport class RDouble extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    super(val, 'double', RDouble.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._REAL(ptr);\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\n\n    return (v: null | number, i: number) => {\n      Module.setValue(data + 8 * i, v === null ? naDouble : v, 'double');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Float64Array {\n    return new Float64Array(\n      Module.HEAPF64.subarray(Module._REAL(this.ptr) / 8, Module._REAL(this.ptr) / 8 + this.length)\n    );\n  }\n}\n\nexport class RComplex extends RVectorAtomic<Complex> {\n  constructor(val: WebRDataAtomic<Complex>) {\n    super(val, 'complex', RComplex.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._COMPLEX(ptr);\n    const naDouble = Module.getValue(Module._R_NaReal, 'double');\n\n    return (v: null | Complex, i: number) => {\n      Module.setValue(data + 8 * (2 * i), v === null ? naDouble : v.re, 'double');\n      Module.setValue(data + 8 * (2 * i + 1), v === null ? naDouble : v.im, 'double');\n    };\n  };\n\n  getComplex(idx: number): Complex | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toComplex(): Complex {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getComplex(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS object\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Float64Array {\n    return new Float64Array(\n      Module.HEAPF64.subarray(\n        Module._COMPLEX(this.ptr) / 8,\n        Module._COMPLEX(this.ptr) / 8 + 2 * this.length\n      )\n    );\n  }\n\n  toArray(): (Complex | null)[] {\n    const arr = this.toTypedArray();\n    return this.detectMissing().map((m, idx) =>\n      m ? null : { re: arr[2 * idx], im: arr[2 * idx + 1] }\n    );\n  }\n}\n\nexport class RCharacter extends RVectorAtomic<string> {\n  constructor(val: WebRDataAtomic<string>) {\n    super(val, 'character', RCharacter.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    return (v: null | string, i: number) => {\n      if (v === null) {\n        Module._SET_STRING_ELT(ptr, i, objs.naString.ptr);\n      } else {\n        Module._SET_STRING_ELT(ptr, i, new RString(v).ptr);\n      }\n    };\n  };\n\n  getString(idx: number): string | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toString(): string {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getString(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS string\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Uint32Array {\n    return new Uint32Array(\n      Module.HEAPU32.subarray(\n        Module._STRING_PTR(this.ptr) / 4,\n        Module._STRING_PTR(this.ptr) / 4 + this.length\n      )\n    );\n  }\n\n  toArray(): (string | null)[] {\n    const vmax = Module._vmaxget();\n    try {\n      return this.detectMissing().map((m, idx) =>\n        m ? null : Module.UTF8ToString(\n          Module._Rf_translateCharUTF8(Module._STRING_ELT(this.ptr, idx))\n        )\n      );\n    } finally {\n      Module._vmaxset(vmax);\n    }\n  }\n}\n\nexport class RRaw extends RVectorAtomic<number> {\n  constructor(val: WebRDataAtomic<number>) {\n    if (val instanceof ArrayBuffer) {\n      val = new Uint8Array(val);\n    }\n    super(val, 'raw', RRaw.#newSetter);\n  }\n\n  static #newSetter = (ptr: RPtr) => {\n    const data = Module._RAW(ptr);\n\n    return (v: number, i: number) => {\n      Module.setValue(data + i, Number(v), 'i8');\n    };\n  };\n\n  getNumber(idx: number): number | null {\n    return this.get(idx).toArray()[0];\n  }\n\n  toNumber(): number {\n    if (this.length !== 1) {\n      throw new Error(\"Can't convert atomic vector of length > 1 to a scalar JS value\");\n    }\n    const val = this.getNumber(1);\n    if (val === null) {\n      throw new Error(\"Can't convert missing value `NA` to a JS number\");\n    }\n    return val;\n  }\n\n  toTypedArray(): Uint8Array {\n    return new Uint8Array(\n      Module.HEAPU8.subarray(Module._RAW(this.ptr), Module._RAW(this.ptr) + this.length)\n    );\n  }\n}\n\n/*\n * Convert the various types possible in the type union WebRData into\n * consistently typed arrays of names and values.\n */\nfunction toWebRData<T>(jsObj: WebRDataAtomic<T>): {\n  names: (string | null)[] | null;\n  values: (T | null)[];\n};\nfunction toWebRData(jsObj: WebRData): WebRData;\nfunction toWebRData(jsObj: WebRData): WebRData {\n  if (isWebRDataJs(jsObj)) {\n    return jsObj;\n  } else if (Array.isArray(jsObj) || ArrayBuffer.isView(jsObj)) {\n    return { names: null, values: jsObj };\n  } else if (jsObj && typeof jsObj === 'object' && !isComplex(jsObj)) {\n    return {\n      names: Object.keys(jsObj),\n      values: Object.values(jsObj),\n    };\n  }\n  return { names: null, values: [jsObj] };\n}\n\nexport function getRWorkerClass(type: RType | RCtor): typeof RObject {\n  const typeClasses: { [key: string]: typeof RObject } = {\n    object: RObject,\n    null: RNull,\n    symbol: RSymbol,\n    pairlist: RPairlist,\n    closure: RFunction,\n    environment: REnvironment,\n    call: RCall,\n    special: RFunction,\n    builtin: RFunction,\n    string: RString,\n    logical: RLogical,\n    integer: RInteger,\n    double: RDouble,\n    complex: RComplex,\n    character: RCharacter,\n    list: RList,\n    raw: RRaw,\n    function: RFunction,\n    dataframe: RDataFrame,\n  };\n  if (type in typeClasses) {\n    return typeClasses[type];\n  }\n  return RObject;\n}\n\n/**\n * Test for an RWorker.RObject instance.\n *\n * RWorker.RObject is the internal interface to R objects, intended to be used\n * on the worker thread.\n *\n * @private\n * @param {any} value The object to test.\n * @return {boolean} True if the object is an instance of an RObject.\n */\nexport function isRObject(value: any): value is RObject {\n  return value instanceof RObject;\n}\n\n/**\n * Test for an RWorker.RVectorAtomic instance.\n *\n * @private\n * @param {any} value The object to test.\n * @return {boolean} True if the object is an instance of an RVectorAtomic.\n */\nexport function isRVectorAtomic(value: any): value is RVectorAtomic<atomicType> {\n  const atomicRTypes = ['logical', 'integer', 'double', 'complex', 'character'];\n\n  return (\n    (isRObject(value) && atomicRTypes.includes(value.type()))\n    || (isRObject(value) && value.isNa())\n  );\n}\n\n/**\n * Test for an atomicType, including missing `null` values.\n *\n * @private\n * @param {any} value The object to test.\n * @return {boolean} True if the object is of type atomicType.\n */\nexport function isAtomicType(value: any): value is atomicType | null {\n  return (\n    value === null\n    || typeof value === 'number'\n    || typeof value === 'boolean'\n    || typeof value === 'string'\n    || isComplex(value)\n  );\n}\n\n/**\n * A store for persistent R objects, initialised at R startup.\n */\nexport let objs: {\n  baseEnv: REnvironment,\n  bracket2Symbol: RSymbol,\n  bracketSymbol: RSymbol,\n  dollarSymbol: RSymbol,\n  emptyEnv: REnvironment,\n  false: RLogical,\n  globalEnv: REnvironment,\n  na: RLogical,\n  namesSymbol: RSymbol,\n  naString: RObject,\n  null: RNull,\n  true: RLogical,\n  unboundValue: RObject,\n};\n\n/**\n * Populate the persistent R object store.\n * @internal\n */\nexport function initPersistentObjects() {\n  objs = {\n    baseEnv: REnvironment.wrap(Module.getValue(Module._R_BaseEnv, '*')),\n    bracket2Symbol: RSymbol.wrap(Module.getValue(Module._R_Bracket2Symbol, '*')),\n    bracketSymbol: RSymbol.wrap(Module.getValue(Module._R_BracketSymbol, '*')),\n    dollarSymbol: RSymbol.wrap(Module.getValue(Module._R_DollarSymbol, '*')),\n    emptyEnv: REnvironment.wrap(Module.getValue(Module._R_EmptyEnv, '*')),\n    false: RLogical.wrap(Module.getValue(Module._R_FalseValue, '*')),\n    globalEnv: REnvironment.wrap(Module.getValue(Module._R_GlobalEnv, '*')),\n    na: RLogical.wrap(Module.getValue(Module._R_LogicalNAValue, '*')),\n    namesSymbol: RSymbol.wrap(Module.getValue(Module._R_NamesSymbol, '*')),\n    naString: RObject.wrap(Module.getValue(Module._R_NaString, '*')),\n    null: RNull.wrap(Module.getValue(Module._R_NilValue, '*')),\n    true: RLogical.wrap(Module.getValue(Module._R_TrueValue, '*')),\n    unboundValue: RObject.wrap(Module.getValue(Module._R_UnboundValue, '*')),\n  };\n}\n", "import { IN_NODE } from './compat';\nimport { WebRError } from './error';\nimport { isComplex, isWebRDataJs } from './robj';\nimport { RObjectBase } from './robj-worker';\n\nexport type ResolveFn<T = unknown> = (value: T | PromiseLike<T>) => void;\nexport type RejectFn = (_reason?: any) => void;\n\nexport function promiseHandles<T = void>() {\n  const out = {\n    resolve: (() => { return; }) as ResolveFn<T>,\n    reject: (() => { return; }) as RejectFn,\n    promise: Promise.resolve() as Promise<T>,\n  };\n\n  const promise = new Promise<T>((resolve, reject) => {\n    out.resolve = resolve;\n    out.reject = reject;\n  });\n  out.promise = promise;\n\n  return out;\n}\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function replaceInObject<T>(\n  obj: T | T[],\n  test: (obj: any) => boolean,\n  replacer: (obj: any, ...replacerArgs: any[]) => unknown,\n  ...replacerArgs: unknown[]\n): T | T[] {\n  if (obj === null || obj === undefined || isImageBitmap(obj)) {\n    return obj;\n  }\n  if (obj instanceof ArrayBuffer) {\n    return new Uint8Array(obj) as T;\n  }\n  if (test(obj)) {\n    return replacer(obj, ...replacerArgs) as T;\n  }\n  if (Array.isArray(obj) || ArrayBuffer.isView(obj)) {\n    return (obj as unknown[]).map((v) =>\n      replaceInObject(v, test, replacer, ...replacerArgs)\n    ) as T[];\n  }\n  if (obj instanceof RObjectBase) {\n    return obj;\n  }\n  if (typeof obj === 'object') {\n    return Object.fromEntries(\n      Object.entries(obj).map(([k, v]) => [k, replaceInObject(v, test, replacer, ...replacerArgs)])\n    ) as T;\n  }\n  return obj;\n}\n\n/* Workaround for loading a cross-origin script.\n *\n * When fetching a worker script, the fetch is required by the spec to\n * use \"same-origin\" mode. This is to avoid loading a worker with a\n * cross-origin global scope, which can allow for a cross-origin\n * restriction bypass.\n *\n * When the fetch URL begins with 'http', we assume the request is\n * cross-origin. We download the content of the URL using a XHR first,\n * create a blob URL containing the requested content, then load the\n * blob URL as a script.\n *\n * The origin of a blob URL is the same as that of the environment that\n * created the URL, and so the global scope of the resulting worker is\n * no longer cross-origin. In that case, the cross-origin restriction\n * bypass is not possible, and the script is permitted to be loaded.\n */\nexport function newCrossOriginWorker(url: string, cb: (worker: Worker) => void, onError?: (error: Error) => void): void {\n  const req = new XMLHttpRequest();\n  req.open('get', url, true);\n  req.onload = () => {\n    if (req.status >= 200 && req.status < 300) {\n      try {\n        const worker = new Worker(URL.createObjectURL(new Blob([req.responseText])));\n        cb(worker);\n      } catch (error) {\n        if (onError) {\n          onError(error instanceof Error ? error : new Error(String(error)));\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      if (onError) {\n        onError(new Error(`Worker loading error: HTTP ${req.status}`));\n      } else {\n        console.error(`HTTP Error: ${req.status}`);\n      }\n    }\n  };\n\n  req.onerror = () => {\n    if (onError) {\n      onError(new Error(`Network error loading ${url}`));\n    } else {\n      console.error(`Network error loading ${url}`);\n    }\n  };\n  req.send();\n}\n\nexport function isCrossOrigin(urlString: string) {\n  if (IN_NODE) return false;\n  const url1 = new URL(location.href);\n  const url2 = new URL(urlString, location.origin);\n  if (url1.host === url2.host && url1.port === url2.port && url1.protocol === url2.protocol) {\n    return false;\n  }\n  return true;\n}\n\nexport function isImageBitmap(value: any): value is ImageBitmap {\n  return (typeof ImageBitmap !== 'undefined' && value instanceof ImageBitmap);\n}\n\nexport function throwUnreachable(context?: string) {\n  let msg = 'Reached the unreachable';\n  msg = msg + (context ? ': ' + context : '.');\n\n  throw new WebRError(msg);\n}\n\nexport function isSimpleObject(value: any): value is {[key: string | number | symbol]: any} {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    !Array.isArray(value) &&\n    !(ArrayBuffer.isView(value)) &&\n    !isComplex(value) &&\n    !isWebRDataJs(value) &&\n    !(value instanceof Date) &&\n    !(value instanceof RegExp) &&\n    !(value instanceof Error) &&\n    !(value instanceof RObjectBase) &&\n    Object.getPrototypeOf(value) === Object.prototype\n  );\n}\n\n// From https://stackoverflow.com/a/9458996\nexport function bufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n\n// From https://stackoverflow.com/a/21797381\nexport function base64ToBuffer(base64: string) {\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nimport { Endpoint, SZ_BUF_FITS_IDX, SZ_BUF_SIZE_IDX, generateUUID } from './task-common';\n\nimport { sleep } from '../utils';\nimport { SyncRequestData } from './message';\nimport { encode } from '@msgpack/msgpack';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\n\nconst encoder = new TextEncoder();\n\n/**\n * Respond to a blocking request. Most of the work has already been done in\n * asynclink, we are just responsible here for getting the return value back to\n * the requester through this slightly convoluted Atomics protocol.\n * @param {Endpoint} endpoint  A message port to receive messages from. Other\n *        thread is blocked, so we can't send messages back.\n * @param {SyncRequestData} data The message that was recieved. We will use it\n *        to read out the buffers to write the answer into. NOTE: requester\n *        owns buffers.\n * @param {any} response The value we want to send back to the requester. We\n *        have to encode it into data_buffer.\n */\nexport async function syncResponse(endpoint: Endpoint, data: SyncRequestData, response: any) {\n  try {\n    // eslint-disable-next-line prefer-const\n    let { taskId, sizeBuffer, dataBuffer, signalBuffer } = data;\n    // console.warn(msg);\n\n    const bytes = encode(response);\n    const fits = bytes.length <= dataBuffer.length;\n\n    Atomics.store(sizeBuffer, SZ_BUF_SIZE_IDX, bytes.length);\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +fits);\n    if (!fits) {\n      // console.log(\"      need larger buffer\", taskId)\n      // Request larger buffer\n      const [uuid, dataPromise] = requestResponseMessage(endpoint);\n\n      // Write UUID into dataBuffer so syncRequest knows where to respond to.\n      dataBuffer.set(encoder.encode(uuid));\n      await signalRequester(signalBuffer, taskId!);\n\n      // Wait for response with new bigger dataBuffer\n      dataBuffer = (await dataPromise).dataBuffer as Uint8Array;\n    }\n\n    // Encode result into dataBuffer\n    dataBuffer.set(bytes);\n    Atomics.store(sizeBuffer, SZ_BUF_FITS_IDX, +true);\n\n    // console.log(\"       signaling completion\", taskId)\n    await signalRequester(signalBuffer, taskId as number);\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nfunction requestResponseMessage(ep: Endpoint): [string, Promise<any>] {\n  const id = generateUUID();\n  return [\n    id,\n    new Promise((resolve) => {\n      if (IN_NODE) {\n        (ep as unknown as NodeWorker).once('message', (message: any) => {\n          if (!message.id || message.id !== id) {\n            return;\n          }\n          resolve(message);\n        });\n      } else {\n        ep.addEventListener('message', function l(ev: MessageEvent) {\n          if (!ev.data || !ev.data.id || ev.data.id !== id) {\n            return;\n          }\n          ep.removeEventListener('message', l as EventListenerOrEventListenerObject);\n          resolve(ev.data);\n        } as EventListenerOrEventListenerObject);\n      }\n      if (ep.start) {\n        ep.start();\n      }\n    }),\n  ];\n}\n\nasync function signalRequester(signalBuffer: Int32Array, taskId: number) {\n  const index = (taskId >> 1) % 32;\n  let sleepTime = 1;\n  while (Atomics.compareExchange(signalBuffer, index + 1, 0, taskId) !== 0) {\n    // No Atomics.asyncWait except on Chrome =(\n    await sleep(sleepTime);\n    if (sleepTime < 32) {\n      // exponential backoff\n      sleepTime *= 2;\n    }\n  }\n  Atomics.or(signalBuffer, 0, 1 << index);\n  Atomics.notify(signalBuffer, 0);\n}\n", "/**\n * WebR communication channel messaging and request types.\n * @module Message\n */\nimport { generateUUID, transfer, UUID } from './task-common';\n\n/** A webR communication channel message. */\nexport interface Message {\n  type: string;\n  data?: any;\n}\n\n/** A webR communication channel request. */\nexport interface Request {\n  type: 'request';\n  data: {\n    uuid: UUID;\n    msg: Message;\n  };\n}\n\n/** A webR communication channel event message. */\nexport interface EventMessage {\n  type: 'event';\n  data: {\n    msg: Message;\n  };\n}\n\n/** A webR communication channel response. */\nexport interface Response {\n  type: 'response';\n  data: {\n    uuid: UUID;\n    resp: Message;\n  };\n}\n\n/** @internal */\nexport function newRequest(msg: Message, transferables?: [Transferable]): Request {\n  return newRequestResponseMessage(\n    {\n      type: 'request',\n      data: {\n        uuid: generateUUID(),\n        msg: msg,\n      },\n    },\n    transferables\n  );\n}\n\n/** @internal */\nexport function newResponse(uuid: UUID, resp: Message, transferables?: [Transferable]): Response {\n  return newRequestResponseMessage(\n    {\n      type: 'response',\n      data: {\n        uuid,\n        resp,\n      },\n    },\n    transferables\n  );\n}\n\n/** @internal */\nfunction newRequestResponseMessage<T>(msg: T, transferables?: [Transferable]): T {\n  // Signal to Synclink that the data contains objects we wish to\n  // transfer, as in `postMessage()`\n  if (transferables) {\n    transfer(msg, transferables);\n  }\n  return msg;\n}\n\n/** A webR communication channel `eval-response` message.\n * @internal\n */\nexport interface EvalResponse {\n  type: 'eval-response';\n  data: {\n    result?: unknown;\n    error?: string;\n  };\n}\n\n/** A webR communication channel `proxyWebSocket` message.\n * @internal\n */\nexport interface ProxyWebSocketMessage {\n  type: 'proxyWebSocket';\n  data: {\n    uuid: string;\n    url: string;\n    protocol?: string;\n  };\n}\n\n/** A webR communication channel `sendWebSocket` message.\n * @internal\n */\nexport interface SendWebSocketMessage {\n  type: 'sendWebSocket';\n  data: {\n    uuid: string;\n    data: string | ArrayBufferLike | Blob | ArrayBufferView;\n  };\n}\n\n/** A webR communication channel `closeWebSocket` message.\n * @internal\n */\nexport interface CloseWebSocketMessage {\n  type: 'closeWebSocket';\n  data: {\n    uuid: string;\n    code?: number;\n    reason?: string;\n  };\n}\n\n/** A webR communication channel `websocket-message` message.\n * @internal\n */\nexport interface WebSocketMessage {\n  type: 'websocket-message';\n  data: {\n    uuid: string;\n    data: string | ArrayBufferLike | Blob | ArrayBufferView;\n  };\n}\n\n/** A webR communication channel `websocket-open` message.\n * @internal\n */\nexport interface WebSocketOpenMessage {\n  type: 'websocket-open';\n  data: {\n    uuid: string;\n  };\n}\n\n/** A webR communication channel `websocket-close` message.\n * @internal\n */\nexport interface WebSocketCloseMessage {\n  type: 'websocket-close';\n  data: {\n    uuid: string;\n    code?: number;\n    reason?: string;\n  };\n}\n\n/** A webR communication channel sync-request.\n * @internal\n */\nexport interface SyncRequest {\n  type: 'sync-request';\n  data: {\n    msg: Message;\n    reqData: SyncRequestData;\n  };\n}\n\n/** Transfer data required when using sync-request with SharedArrayBuffer.\n * @internal */\nexport interface SyncRequestData {\n  taskId?: number;\n  sizeBuffer: Int32Array;\n  signalBuffer: Int32Array;\n  dataBuffer: Uint8Array;\n}\n\n/** @internal */\nexport function newSyncRequest(msg: Message, data: SyncRequestData): SyncRequest {\n  return {\n    type: 'sync-request',\n    data: { msg, reqData: data },\n  };\n}\n", "/**\n * Types containing references to R objects, raw data or errors over the webR\n * communication channel.\n * @module Payload\n */\nimport { WebRDataRaw, RPtr, RType } from './robj';\nimport { WebRWorkerError } from './error';\n\nexport type WebRPayloadRaw = {\n  obj: WebRDataRaw;\n  payloadType: 'raw';\n};\n\nexport type WebRPayloadPtr = {\n  obj: {\n    type?: RType;\n    ptr: RPtr;\n    methods?: string[];\n  };\n  payloadType: 'ptr';\n};\n\nexport type WebRPayloadErr = {\n  obj: {\n    message: string;\n    name: string;\n    errno?: number;\n    stack?: string;\n  };\n  payloadType: 'err';\n};\n\n// On the main side we shouldn't see any error payload as these are\n// rethrown as JS exceptions\nexport type WebRPayload = WebRPayloadRaw | WebRPayloadPtr;\nexport type WebRPayloadWorker = WebRPayloadRaw | WebRPayloadPtr | WebRPayloadErr;\n\n/* @internal */\nexport function webRPayloadAsError(payload: WebRPayloadErr): Error {\n  const e = new WebRWorkerError(payload.obj.message);\n  // Forward the error name to the main thread, if more specific than a general `Error`\n  if (payload.obj.name == 'ErrnoError') {\n    e.message = `ErrnoError: ${String(payload.obj.errno)}`;\n  } else if (payload.obj.name !== 'Error') {\n    e.name = payload.obj.name;\n  }\n  e.stack = payload.obj.stack;\n  return e;\n}\n\n/**\n * Test for an WebRPayload instance.\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayload.\n */\nexport function isWebRPayload(value: any): value is WebRPayload {\n  return !!value && typeof value === 'object' && 'payloadType' in value && 'obj' in value;\n}\n\n/**\n * Test for an WebRPayloadPtr instance.\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayloadPtr.\n */\nexport function isWebRPayloadPtr(value: any): value is WebRPayloadPtr {\n  return isWebRPayload(value) && value.payloadType === 'ptr';\n}\n\n/**\n * Test for an WebRPayloadRaw instance.\n * @param {any} value The object to test.\n * @returns {boolean} True if the object is an instance of an WebRPayloadRaw.\n */\nexport function isWebRPayloadRaw(value: any): value is WebRPayloadRaw {\n  return isWebRPayload(value) && value.payloadType === 'raw';\n}\n", "// Original code from Synclink and Comlink. Released under Apache 2.0.\n\nimport {\n  Endpoint,\n  SZ_BUF_DOESNT_FIT,\n  SZ_BUF_FITS_IDX,\n  SZ_BUF_SIZE_IDX,\n  UUID_LENGTH,\n} from './task-common';\n\nimport { newSyncRequest, Message } from './message';\nimport { decode } from '@msgpack/msgpack';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport class SyncTask {\n  endpoint: Endpoint;\n  msg: Message;\n  transfers: Transferable[];\n\n  #scheduled = false;\n  #resolved: boolean;\n  #result?: any;\n  #exception?: any;\n\n  // sync only\n  taskId?: number;\n  #syncGen?: Generator<void, unknown, void>;\n  sizeBuffer?: Int32Array;\n  signalBuffer?: Int32Array;\n  syncifier = new _Syncifier();\n\n  constructor(endpoint: Endpoint, msg: Message, transfers: Transferable[] = []) {\n    this.endpoint = endpoint;\n    this.msg = msg;\n    this.transfers = transfers;\n    this.#resolved = false;\n  }\n\n  scheduleSync() {\n    if (this.#scheduled) {\n      return;\n    }\n    this.#scheduled = true;\n\n    this.syncifier.scheduleTask(this);\n    this.#syncGen = this.doSync();\n    this.#syncGen.next();\n    return this;\n  }\n\n  poll() {\n    if (!this.#scheduled) {\n      throw new Error('Task not synchronously scheduled');\n    }\n\n    const { done, value } = this.#syncGen!.next();\n    if (!done) {\n      return false;\n    }\n\n    this.#resolved = true;\n    this.#result = value;\n\n    return true;\n  }\n\n  *doSync() {\n    // just use syncRequest.\n    const { endpoint, msg, transfers } = this;\n    const sizeBuffer = new Int32Array(new SharedArrayBuffer(8));\n    const signalBuffer = this.signalBuffer!;\n    const taskId = this.taskId;\n\n    // Ensure status is cleared. We will notify\n    let dataBuffer = acquireDataBuffer(UUID_LENGTH);\n    // console.log(\"===requesting\", taskId);\n\n    const syncMsg = newSyncRequest(msg, {\n      sizeBuffer,\n      dataBuffer,\n      signalBuffer,\n      taskId,\n    });\n\n    endpoint.postMessage(syncMsg, transfers);\n    yield;\n\n    if (Atomics.load(sizeBuffer, SZ_BUF_FITS_IDX) === SZ_BUF_DOESNT_FIT) {\n      // There wasn't enough space, make a bigger dataBuffer.\n      // First read uuid for response out of current dataBuffer\n      const id = decoder.decode(dataBuffer.slice(0, UUID_LENGTH));\n      releaseDataBuffer(dataBuffer);\n      const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\n      dataBuffer = acquireDataBuffer(size);\n      // console.log(\"===bigger data buffer\", taskId);\n      endpoint.postMessage({ id, dataBuffer });\n      yield;\n    }\n\n    const size = Atomics.load(sizeBuffer, SZ_BUF_SIZE_IDX);\n    // console.log(\"===completing\", taskId);\n    return decode(dataBuffer.slice(0, size));\n  }\n\n  get result() {\n    if (this.#exception) {\n      throw this.#exception;\n    }\n    // console.log(this.#resolved);\n    if (this.#resolved) {\n      return this.#result as unknown;\n    }\n    throw new Error('Not ready.');\n  }\n\n  syncify(): any {\n    this.scheduleSync();\n    this.syncifier.syncifyTask(this);\n    return this.result;\n  }\n}\n\nclass _Syncifier {\n  nextTaskId: Int32Array;\n  signalBuffer: Int32Array;\n  tasks: Map<number, SyncTask>;\n\n  constructor() {\n    this.nextTaskId = new Int32Array([1]);\n    this.signalBuffer = new Int32Array(new SharedArrayBuffer(32 * 4 + 4));\n    this.tasks = new Map();\n  }\n\n  scheduleTask(task: SyncTask) {\n    task.taskId = this.nextTaskId[0];\n    this.nextTaskId[0] += 2;\n    task.signalBuffer = this.signalBuffer;\n    this.tasks.set(task.taskId, task);\n  }\n\n  waitOnSignalBuffer() {\n    const timeout = 50;\n    for (; ;) {\n      const status = Atomics.wait(this.signalBuffer, 0, 0, timeout);\n      switch (status) {\n        case 'ok':\n        case 'not-equal':\n          return;\n        case 'timed-out':\n          if (eventBuffer[0] !== 0) {\n            handleEvents();\n          }\n          break;\n        default:\n          throw new Error('Unreachable');\n      }\n    }\n  }\n\n  *tasksIdsToWakeup() {\n    const flag = Atomics.load(this.signalBuffer, 0);\n    for (let i = 0; i < 32; i++) {\n      const bit = 1 << i;\n      if (flag & bit) {\n        Atomics.and(this.signalBuffer, 0, ~bit);\n        const wokenTask = Atomics.exchange(this.signalBuffer, i + 1, 0);\n        yield wokenTask;\n      }\n    }\n  }\n\n  pollTasks(task?: SyncTask) {\n    let result = false;\n    for (const wokenTaskId of this.tasksIdsToWakeup()) {\n      // console.log(\"poll task\", wokenTaskId, \"looking for\",task);\n      const wokenTask = this.tasks.get(wokenTaskId);\n      if (!wokenTask) {\n        throw new Error(`Assertion error: unknown taskId ${wokenTaskId}.`);\n      }\n      if (wokenTask.poll()) {\n        // console.log(\"completed task \", wokenTaskId, wokenTask, wokenTask._result);\n        this.tasks.delete(wokenTaskId);\n        if (wokenTask === task) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  syncifyTask(task: SyncTask) {\n    for (; ;) {\n      this.waitOnSignalBuffer();\n      // console.log(\"syncifyTask:: woke\");\n      if (this.pollTasks(task)) {\n        return;\n      }\n    }\n  }\n}\n\nconst dataBuffers: Uint8Array[][] = [];\n\nfunction acquireDataBuffer(size: number): Uint8Array {\n  const powerof2 = Math.ceil(Math.log2(size));\n  if (!dataBuffers[powerof2]) {\n    dataBuffers[powerof2] = [];\n  }\n  const result = dataBuffers[powerof2].pop();\n  if (result) {\n    result.fill(0);\n    return result;\n  }\n  return new Uint8Array(new SharedArrayBuffer(2 ** powerof2));\n}\n\nfunction releaseDataBuffer(buffer: Uint8Array) {\n  const powerof2 = Math.ceil(Math.log2(buffer.byteLength));\n  dataBuffers[powerof2].push(buffer);\n}\n\nlet eventBuffer = new Int32Array(new ArrayBuffer(4));\n\nlet handleEvents = (): void => {\n  eventBuffer[0] = 0;\n  throw new Error('No event handler.');\n};\n\n/**\n * Sets the events handler. This is called when the computation is\n * interrupted by an event. Should zero the event buffer.\n * @internal\n */\nexport function setEventsHandler(handler: () => void) {\n  handleEvents = handler;\n}\n\n/**\n * Sets the events buffer. Should be a shared array buffer. When element 0\n * is set non-zero it signals an event has been emitted.\n * @internal\n */\nexport function setEventBuffer(buffer: ArrayBufferLike) {\n  eventBuffer = new Int32Array(buffer);\n}\n", "import { ChannelMain } from \"./channel\";\nimport { SharedBufferChannelWorker } from \"./channel-shared\";\nimport { generateUUID } from \"./task-common\";\nimport { IN_NODE } from '../compat';\n\nexport interface WebSocketProxy extends WebSocket {\n  uuid: string;\n  _accept(): void;\n  _recieve(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\n  _close(code?: number, reason?: string): void;\n  _error(): void;\n}\n\nexport class WebSocketMap {\n  WebSocket: typeof WebSocket;\n  #map = new Map<string, WebSocket>();\n\n  constructor(readonly chan: ChannelMain) {\n    this.WebSocket = IN_NODE ? require('ws') as typeof WebSocket : WebSocket;\n  }\n\n  new(uuid: string, url: string | URL, protocols?: string | string[]) {\n    const ws = new this.WebSocket(url, protocols || []);\n    ws.binaryType = 'arraybuffer';\n    \n    ws.addEventListener('open', () => {\n      this.chan.emit({ type: 'websocket-open', data: { uuid } });\n    });\n\n    ws.addEventListener('message', (ev: MessageEvent) => {\n      const data = new Uint8Array(ev.data as ArrayBufferLike);\n      this.chan.emit({ type: 'websocket-message', data: { uuid, data } });\n    });\n\n    ws.addEventListener('close', (ev: CloseEvent) => {\n      this.chan.emit({ type: 'websocket-close', data: { uuid, code: ev.code, reason: ev.reason } });\n    });\n\n    ws.addEventListener('error', () => {\n      this.chan.emit({ type: 'websocket-error', data: { uuid } });\n    });\n\n    this.#map.set(uuid, ws);\n  }\n\n  send(uuid: string, data: string | ArrayBufferLike | Blob | ArrayBufferView): void {\n    const ws = this.#map.get(uuid);\n    ws?.send(data);\n  }\n\n  close(uuid: string, code?: number, reason?: string): void {\n    const ws = this.#map.get(uuid);\n    ws?.close(code, reason);\n    this.#map.delete(uuid);\n  }\n}\n\nexport class WebSocketProxyFactory {\n  static proxy(chan: SharedBufferChannelWorker): typeof WebSocket {\n    return class WebSocket extends EventTarget implements WebSocketProxy {\n      static readonly CONNECTING = 0;\n      static readonly OPEN = 1;\n      static readonly CLOSING = 2;\n      static readonly CLOSED = 3;\n\n      readonly CONNECTING = WebSocket.CONNECTING;\n      readonly OPEN = WebSocket.OPEN;\n      readonly CLOSING = WebSocket.CLOSING;\n      readonly CLOSED = WebSocket.CLOSED;\n\n      uuid: string;\n      url: string;\n      protocol: string;\n      readyState: number = WebSocket.CONNECTING;\n      bufferedAmount = 0;\n      binaryType: BinaryType;\n      extensions = \"\";\n      onopen: ((ev: Event) => any) | null;\n      onmessage: ((ev: MessageEvent) => any) | null;\n      onclose: ((ev: CloseEvent) => any) | null;\n      onerror: ((ev: Event) => any) | null;\n\n      constructor(url: string | URL, protocols?: string | string[]) {\n        super();\n        this.url = String(url);\n        this.protocol = Array.isArray(protocols) ? protocols[0] : protocols || '';\n        this.binaryType = 'arraybuffer';\n\n        this.onopen = null;\n        this.onmessage = null;\n        this.onclose = null;\n        this.onerror = null;\n\n        this.uuid = generateUUID();\n\n        chan.writeSystem({\n          type: 'proxyWebSocket',\n          data: { uuid: this.uuid, url: this.url, protocol: this.protocol }\n        });\n        chan.proxies.set(this.uuid, this);\n      }\n\n      send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void {\n        chan.writeSystem({ type: 'sendWebSocket', data: { uuid: this.uuid, data } });\n      }\n\n      close(code?: number, reason?: string): void {\n        chan.writeSystem({ type: 'closeWebSocket', data: { uuid: this.uuid, code, reason } });\n      }\n\n      _accept() {\n        if (this.readyState !== 0) {\n          return;\n        }\n\n        this.readyState = 1;\n        const ev = new Event('open');\n        this.dispatchEvent(ev);\n        this.onopen?.(ev);\n      }\n\n      _recieve(data: string | ArrayBufferLike | Blob | ArrayBufferView): void {\n        const ev = new MessageEvent('message', { data });\n        this.dispatchEvent(ev);\n        this.onmessage?.(ev);\n      }\n\n      _close(code?: number, reason?: string): void {\n        const ev = new CloseEvent('close', { code, reason });\n        this.dispatchEvent(ev);\n        this.onclose?.(ev);\n        chan.proxies.delete(this.uuid);\n      }\n\n      _error(): void {\n        const ev = new Event(\"error\");\n        this.dispatchEvent(ev);\n        this.onerror?.(ev);\n      }\n    };\n  }\n}\n\n// TODO: Remove this once we have nodejs/node#53355\nif (IN_NODE) {\n  globalThis.CloseEvent = class CloseEvent extends Event {\n    wasClean: boolean;\n    code: number;\n    reason: string;\n    constructor(type: string, eventInitDict: CloseEventInit = {}) {\n      super(type, eventInitDict as EventInit);\n\n      this.wasClean = eventInitDict.wasClean || false;\n      this.code = eventInitDict.code || 0;\n      this.reason = eventInitDict.reason || '';\n    }\n  };\n}\n", "import { promiseHandles, newCrossOriginWorker, isCrossOrigin } from '../utils';\nimport { EventMessage, Message, Response, SyncRequest, WebSocketCloseMessage, WebSocketMessage, WebSocketOpenMessage } from './message';\nimport { Endpoint } from './task-common';\nimport { syncResponse } from './task-main';\nimport { ChannelMain, ChannelWorker } from './channel';\nimport { ChannelType } from './channel-common';\nimport { WebROptions } from '../webr-main';\nimport { WebRChannelError, WebRWorkerError } from '../error';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\nif (IN_NODE) {\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\n}\n\n// Main ----------------------------------------------------------------\n\nexport class SharedBufferChannelMain extends ChannelMain {\n  #eventBuffer?: Int32Array;\n\n  initialised: Promise<unknown>;\n  resolve: (_?: unknown) => void;\n  reject: (message: string | Error) => void;\n  close = () => { return; };\n\n  constructor(config: Required<WebROptions>) {\n    super();\n    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = promiseHandles());\n\n    const initWorker = (worker: Worker) => {\n      this.#handleEventsFromWorker(worker);\n      this.close = () => {\n        worker.terminate();\n        this.putClosedMessage();\n      };\n      const msg = {\n        type: 'init',\n        data: { config, channelType: ChannelType.SharedArrayBuffer },\n      } as Message;\n      worker.postMessage(msg);\n    };\n\n    if (isCrossOrigin(config.baseUrl)) {\n      newCrossOriginWorker(\n        `${config.baseUrl}webr-worker.js`,\n        (worker: Worker) => initWorker(worker),\n        (error: Error) => {\n          this.reject(new WebRWorkerError(`Worker loading error: ${error.message}`));\n        }\n      );\n    } else {\n      const worker = new Worker(`${config.baseUrl}webr-worker.js`);\n      initWorker(worker);\n    }\n  }\n\n  emit(msg: Message): void {\n    if (!this.#eventBuffer) {\n      throw new WebRChannelError('Failed attempt to interrupt before initialising interruptBuffer');\n    }\n    this.eventQueue.push({ type: 'event', data: { msg } });\n    this.#eventBuffer[0] = 1;\n  }\n\n  interrupt() {\n    this.inputQueue.reset();\n    this.emit({ type: 'interrupt' });\n  }\n\n  #handleEventsFromWorker(worker: Worker) {\n    if (IN_NODE) {\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\n        void this.#onMessageFromWorker(worker, message);\n      });\n      (worker as unknown as NodeWorker).on('error', (ev: Event) => {\n        console.error(ev);\n        this.reject(new WebRWorkerError(\n          \"An error occurred initialising the webR SharedBufferChannel worker.\"\n        ));\n      });\n    } else {\n      worker.onmessage = (ev: MessageEvent) =>\n        this.#onMessageFromWorker(worker, ev.data as Message);\n      worker.onerror = (ev) => {\n        console.error(ev);\n        this.reject(new WebRWorkerError(\n          \"An error occurred initialising the webR SharedBufferChannel worker.\"\n        ));\n      };\n    }\n  }\n\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\n    if (!message || !message.type) {\n      return;\n    }\n\n    switch (message.type) {\n      case 'resolve':\n        this.#eventBuffer = new Int32Array(message.data as SharedArrayBuffer);\n        this.resolve();\n        return;\n\n      case 'response':\n        this.resolveResponse(message as Response);\n        return;\n\n      case 'system':\n        this.systemQueue.put(message.data as Message);\n        return;\n\n      default:\n        this.outputQueue.put(message);\n        return;\n\n      case 'sync-request': {\n        const msg = message as SyncRequest;\n        const payload = msg.data.msg;\n        const reqData = msg.data.reqData;\n\n        switch (payload.type) {\n          case 'read': {\n            const response = await this.inputQueue.get();\n            await syncResponse(worker, reqData, response);\n            break;\n          }\n          case 'event': {\n            const response = this.eventQueue.shift();\n            await syncResponse(worker, reqData, response);\n            break;\n          }\n          case 'eval-await': {\n            const src = payload.data as string;\n            const data = {} as { result?: any; error?: string };\n            try {\n              data.result = await (0, eval)(src) as unknown;\n              if (typeof data.result === 'function') {\n                // Don't try to transfer a function back to the worker thread\n                data.result = String(data.result);\n              }\n            } catch (_error) {\n              const error = _error as Error;\n              data.error = error.message;\n            }\n            await syncResponse(worker, reqData, { type: 'eval-response', data });\n            break;\n          }\n          default:\n            throw new WebRChannelError(`Unsupported request type '${payload.type}'.`);\n        }\n        return;\n      }\n      case 'request':\n        throw new WebRChannelError(\n          \"Can't send messages of type 'request' from a worker. Please Use 'sync-request' instead.\"\n        );\n    }\n  };\n}\n\n// Worker --------------------------------------------------------------\n\nimport { setEventBuffer, setEventsHandler, SyncTask } from './task-worker';\nimport { Module } from '../emscripten';\nimport { WebSocketProxy, WebSocketProxyFactory } from './websocket';\n\nexport class SharedBufferChannelWorker implements ChannelWorker {\n  WebSocketProxy: typeof WebSocket;\n  proxies: Map<string, WebSocketProxy>;\n  #ep: Endpoint;\n  #dispatch: (msg: Message) => void = () => 0;\n  #eventBuffer = new Int32Array(new SharedArrayBuffer(4));\n  #interrupt = () => { return; };\n  resolveRequest: (msg: Message) => void = () => { return; };\n\n  constructor() {\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\n    setEventBuffer(this.#eventBuffer.buffer);\n    setEventsHandler(() => this.handleEvents());\n\n    this.WebSocketProxy = WebSocketProxyFactory.proxy(this);\n    this.proxies = new Map();\n  }\n\n  resolve() {\n    this.write({ type: 'resolve', data: this.#eventBuffer.buffer });\n  }\n\n  write(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage(msg, transfer);\n  }\n\n  writeSystem(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage({ type: 'system', data: msg }, transfer);\n  }\n\n  syncRequest(msg: Message, transfer?: [Transferable]): Message {\n    const task = new SyncTask(this.#ep, msg, transfer);\n    return task.syncify() as Message;\n  }\n\n  read(): Message {\n    return this.syncRequest({ type: 'read' });\n  }\n\n  inputOrDispatch(): number {\n    for (; ;) {\n      const msg = this.read();\n      if (msg.type === 'stdin') {\n        return Module.allocateUTF8(msg.data as string);\n      }\n      this.#dispatch(msg);\n    }\n  }\n\n  run(args: string[]) {\n    try {\n      Module.callMain(args);\n    } catch (e) {\n      if (e instanceof WebAssembly.RuntimeError) {\n        this.writeSystem({ type: 'console.error', data: e.message });\n        this.writeSystem({\n          type: 'console.error',\n          data: \"An unrecoverable WebAssembly error has occurred, the webR worker will be closed.\",\n        });\n        this.writeSystem({ type: 'close' });\n      }\n      throw e;\n    }\n  }\n\n  handleEvents() {\n    if (this.#eventBuffer[0] !== 0) {\n      for (; ;) {\n        const response = this.syncRequest({ type: 'event' }) as EventMessage | undefined;\n        if (!response) break;\n        switch (response.data.msg.type) {\n          case 'interrupt':\n            this.#interrupt();\n            break;\n          case 'websocket-open': {\n            const message = response.data.msg as WebSocketOpenMessage;\n            this.proxies.get(message.data.uuid)?._accept();\n            break;\n          }\n          case 'websocket-message': {\n            const message = response.data.msg as WebSocketMessage;\n            this.proxies.get(message.data.uuid)?._recieve(message.data.data);\n            break;\n          }\n          case 'websocket-close': {\n            const message = response.data.msg as WebSocketCloseMessage;\n            this.proxies.get(message.data.uuid)?._close(message.data.code, message.data.reason);\n            break;\n          }\n          case 'websocket-error': {\n            const message = response.data.msg as WebSocketMessage;\n            this.proxies.get(message.data.uuid)?._error();\n            break;\n          }\n          default:\n            throw new Error(`Unsupported event type '${response.data.msg.type}'.`);\n        }\n      }\n      this.#eventBuffer[0] = 0;\n    }\n  }\n\n  setInterrupt(interrupt: () => void) {\n    this.#interrupt = interrupt;\n  }\n\n  setDispatchHandler(dispatch: (msg: Message) => void) {\n    this.#dispatch = dispatch;\n  }\n}\n", "import { promiseHandles, ResolveFn, newCrossOriginWorker, isCrossOrigin } from '../utils';\nimport { Message, newRequest, Response, Request, newResponse } from './message';\nimport { Endpoint } from './task-common';\nimport { ChannelType } from './channel-common';\nimport { WebROptions } from '../webr-main';\nimport { ChannelMain } from './channel';\nimport { WebRChannelError, WebRWorkerError } from '../error';\n\nimport { IN_NODE } from '../compat';\nimport type { Worker as NodeWorker } from 'worker_threads';\nif (IN_NODE) {\n  (globalThis as any).Worker = require('worker_threads').Worker as NodeWorker;\n}\n\n// Main ----------------------------------------------------------------\n\nexport class PostMessageChannelMain extends ChannelMain {\n\n  initialised: Promise<unknown>;\n  resolve: (_?: unknown) => void;\n  reject: (message: string | Error) => void;\n  close: ChannelMain['close'] = () => { return; };\n  emit: ChannelMain['emit'] = () => { return; };\n  #worker?: Worker;\n\n  constructor(config: Required<WebROptions>) {\n    super();\n    ({ resolve: this.resolve, reject: this.reject, promise: this.initialised } = promiseHandles());\n\n    const initWorker = (worker: Worker) => {\n      this.#worker = worker;\n      this.#handleEventsFromWorker(worker);\n      this.close = () => {\n        worker.terminate();\n        this.putClosedMessage();\n      };\n      const msg = {\n        type: 'init',\n        data: { config, channelType: ChannelType.PostMessage },\n      } as Message;\n      worker.postMessage(msg);\n    };\n\n    if (isCrossOrigin(config.baseUrl)) {\n      newCrossOriginWorker(\n        `${config.baseUrl}webr-worker.js`,\n        (worker: Worker) => initWorker(worker),\n        (error: Error) => {\n          this.reject(new WebRWorkerError(`Worker loading error: ${error.message}`));\n        }\n      );\n    } else {\n      const worker = new Worker(`${config.baseUrl}webr-worker.js`);\n      initWorker(worker);\n    }\n  }\n\n  interrupt() {\n    console.error('Interrupting R execution is not available when using the PostMessage channel');\n  }\n\n  #handleEventsFromWorker(worker: Worker) {\n    if (IN_NODE) {\n      (worker as unknown as NodeWorker).on('message', (message: Message) => {\n        void this.#onMessageFromWorker(worker, message);\n      });\n      (worker as unknown as NodeWorker).on('error', (ev: Event) => {\n        console.error(ev);\n        this.reject(new WebRWorkerError(\n          \"An error occurred initialising the webR PostMessageChannel worker.\"\n        ));\n      });\n    } else {\n      worker.onmessage = (ev: MessageEvent) =>\n        this.#onMessageFromWorker(worker, ev.data as Message);\n      worker.onerror = (ev) => {\n        console.error(ev);\n        this.reject(new WebRWorkerError(\n          \"An error occurred initialising the webR PostMessageChannel worker.\"\n        ));\n      };\n    }\n  }\n\n  #onMessageFromWorker = async (worker: Worker, message: Message) => {\n    if (!message || !message.type) {\n      return;\n    }\n\n    switch (message.type) {\n      case 'resolve':\n        this.resolve();\n        return;\n\n      case 'response':\n        this.resolveResponse(message as Response);\n        return;\n\n      case 'system':\n        this.systemQueue.put(message.data as Message);\n        return;\n\n      default:\n        this.outputQueue.put(message);\n        return;\n\n      case 'request': {\n        const msg = message as Request;\n        const payload = msg.data.msg;\n\n        switch (payload.type) {\n          case 'read': {\n            const input = await this.inputQueue.get();\n            if (this.#worker) {\n              const response = newResponse(msg.data.uuid, input);\n              this.#worker.postMessage(response);\n            }\n            break;\n          }\n          default:\n            throw new WebRChannelError(`Unsupported request type '${payload.type}'.`);\n        }\n        return;\n      }\n\n      case 'sync-request':\n        throw new WebRChannelError(\n          \"Can't send messages of type 'sync-request' in PostMessage mode. Use 'request' instead.\"\n        );\n    }\n  };\n}\n\n// Worker --------------------------------------------------------------\n\nimport { Module as _Module } from '../emscripten';\n\ndeclare let Module: _Module;\n\nexport class PostMessageChannelWorker {\n  #ep: Endpoint;\n  #parked = new Map<string, ResolveFn<Message>>();\n  #dispatch: (msg: Message) => void = () => 0;\n  #promptDepth = 0;\n\n  constructor() {\n    this.#ep = (IN_NODE ? require('worker_threads').parentPort : globalThis) as Endpoint;\n  }\n\n  resolve() {\n    this.write({ type: 'resolve' });\n  }\n\n  write(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage(msg, transfer);\n  }\n\n  writeSystem(msg: Message, transfer?: [Transferable]) {\n    this.#ep.postMessage({ type: 'system', data: msg }, transfer);\n  }\n\n  read(): Message {\n    throw new WebRChannelError(\n      'Unable to synchronously read when using the `PostMessage` channel.'\n    );\n  }\n\n  inputOrDispatch(): number {\n    if (this.#promptDepth > 0) {\n      this.#promptDepth = 0;\n      const msg = Module.allocateUTF8OnStack(\n        \"Can't block for input when using the PostMessage communication channel.\"\n      );\n      Module._Rf_error(msg);\n    }\n    this.#promptDepth++;\n    // Unable to block, so just return a NULL\n    return 0;\n  }\n\n  run(_args: string[]) {\n    const args: string[] = _args || [];\n    args.unshift('R');\n    const argc = args.length;\n    const argv = Module._malloc(4 * (argc + 1));\n    args.forEach((arg, idx) => {\n      const argvPtr = argv + 4 * idx;\n      const argPtr = Module.allocateUTF8(arg);\n      Module.setValue(argvPtr, argPtr, '*');\n    });\n\n    this.writeSystem({\n      type: 'console.warn',\n      data: 'WebR is using `PostMessage` communication channel, nested R REPLs are not available.',\n    });\n\n    Module._Rf_initialize_R(argc, argv);\n    Module._setup_Rmainloop();\n    Module._R_ReplDLLinit();\n    Module._R_ReplDLLdo1();\n    void this.#asyncREPL();\n  }\n\n  setDispatchHandler(dispatch: (msg: Message) => void) {\n    this.#dispatch = dispatch;\n  }\n\n  protected async request(msg: Message, transferables?: [Transferable]): Promise<Message> {\n    const req = newRequest(msg, transferables);\n\n    const { resolve: resolve, promise: prom } = promiseHandles<Message>();\n    this.#parked.set(req.data.uuid, resolve);\n\n    this.write(req, transferables);\n    return prom;\n  }\n\n  syncRequest(): Message {\n    throw new Error('Unable to sync-request when using the `PostMessage` channel.');\n  }\n\n  setInterrupt() { return; }\n  handleEvents() { return; }\n\n  resolveRequest(message: Message) {\n    const msg = message as Response;\n    const uuid = msg.data.uuid;\n    const resolve = this.#parked.get(uuid);\n\n    if (resolve) {\n      this.#parked.delete(uuid);\n      resolve(msg.data.resp);\n    } else {\n      console.warn(\"Can't find request.\");\n    }\n  }\n\n  /*\n   * This is a fallback REPL for webR running in PostMessage mode. The prompt\n   * section of R's R_ReplDLLdo1 returns empty with -1, which allows this\n   * fallback REPL to yield to the event loop with await.\n   *\n   * The drawback of this approach is that nested REPLs do not work, such as\n   * readline, browser or menu. Attempting to use a nested REPL prints an error\n   * to the JS console.\n   *\n   * R/Wasm errors during execution are caught and the REPL is restarted at the\n   * top level. Any other JS errors are re-thrown.\n   */\n  #asyncREPL = async () => {\n    for (; ;) {\n      try {\n        this.#promptDepth = 0;\n        const msg = await this.request({ type: 'read' });\n        if (msg.type === 'stdin') {\n          // Copy the new input into WASM memory\n          const str = Module.allocateUTF8(msg.data as string);\n          Module._strcpy(Module._DLLbuf, str);\n          Module.setValue(Module._DLLbufp, Module._DLLbuf, '*');\n          Module._free(str);\n\n          // Execute the R code using a single step of R's built in REPL\n          try {\n            while (Module._R_ReplDLLdo1() > 0);\n          } catch (e: any) {\n            if (e instanceof (WebAssembly as any).Exception) {\n              // R error: clear command buffer and reproduce prompt\n              Module._R_ReplDLLinit();\n              Module._R_ReplDLLdo1();\n            } else {\n              throw e;\n            }\n          }\n        } else {\n          this.#dispatch(msg);\n        }\n      } catch (e) {\n        // Close on unrecoverable error\n        if (e instanceof WebAssembly.RuntimeError) {\n          this.writeSystem({ type: 'console.error', data: e.message });\n          this.writeSystem({\n            type: 'console.error',\n            data: \"An unrecoverable WebAssembly error has occurred, the webR worker will be closed.\",\n          });\n          this.writeSystem({ type: 'close' });\n        }\n        // Don't break the REPL loop on other Wasm `Exception` errors\n        if (!(e instanceof (WebAssembly as any).Exception)) {\n          throw e;\n        }\n      }\n    }\n  };\n}\n", "import { SharedBufferChannelMain, SharedBufferChannelWorker } from './channel-shared';\nimport { PostMessageChannelMain, PostMessageChannelWorker } from './channel-postmessage';\nimport { WebROptions } from '../webr-main';\nimport { WebRChannelError } from '../error';\n\n// This file refers to objects imported from `./channel-shared` and\n// `./channel-service.` These can't be included in `./channel` as this\n// causes a circular dependency issue.\n\nexport const ChannelType = {\n  Automatic: 0,\n  SharedArrayBuffer: 1,\n  PostMessage: 3,\n} as const;\n\nexport type ChannelInitMessage = {\n  type: string;\n  data: {\n    config: Required<WebROptions>;\n    channelType: Exclude<\n      (typeof ChannelType)[keyof typeof ChannelType],\n      typeof ChannelType.Automatic\n    >;\n    clientId?: string;\n    location?: string;\n  };\n};\n\nexport function newChannelMain(data: Required<WebROptions>) {\n  switch (data.channelType) {\n    case ChannelType.SharedArrayBuffer:\n      return new SharedBufferChannelMain(data);\n    case ChannelType.PostMessage:\n      return new PostMessageChannelMain(data);\n    case ChannelType.Automatic:\n    default:\n      if (typeof SharedArrayBuffer !== 'undefined') {\n        return new SharedBufferChannelMain(data);\n      } else {\n        return new PostMessageChannelMain(data);\n      }\n  }\n}\n\nexport function newChannelWorker(msg: ChannelInitMessage) {\n  switch (msg.data.channelType) {\n    case ChannelType.SharedArrayBuffer:\n      return new SharedBufferChannelWorker();\n    case ChannelType.PostMessage:\n      return new PostMessageChannelWorker();\n    default:\n      throw new WebRChannelError('Unknown worker channel type received');\n  }\n}\n", "\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Types and implementation inspired from https://github.com/jvilk/BrowserFS\n// LICENSE: https://github.com/jvilk/BrowserFS/blob/8977a704ea469d05daf857e4818bef1f4f498326/LICENSE\n// And from https://github.com/gzuidhof/starboard-notebook\n\n// LICENSE: https://github.com/gzuidhof/starboard-notebook/blob/cd8d3fc30af4bd29cdd8f6b8c207df8138f5d5dd/LICENSE\n\n/**\n * Types for Emscripten primitives.\n *\n * Ideally, much more of these would be taken from `@types/emscripten`.\n */\n\ntype EmscriptenFS = typeof FS;\n\nexport const DIR_MODE = 16895; // 040777\nexport const FILE_MODE = 33206; // 100666\nexport const SEEK_CUR = 1;\nexport const SEEK_END = 2;\n\nexport interface IStats {\n  dev: number;\n  ino?: number;\n  mode?: number;\n  nlink: number;\n  uid: number;\n  gid: number;\n  rdev: number;\n  size: number;\n  blksize: number;\n  blocks: number;\n  atime: Date | string;\n  mtime: Date | string;\n  ctime: Date | string;\n  timestamp?: number;\n}\n\nexport interface IEmscriptenFSNode {\n  id: number;\n  name: string;\n  mode: number;\n  parent: IEmscriptenFSNode;\n  mount: { opts: { root: string } };\n  stream_ops: IEmscriptenStreamOps;\n  node_ops: IEmscriptenNodeOps;\n  timestamp: number;\n}\n\nexport interface IEmscriptenStream {\n  node: IEmscriptenFSNode;\n  nfd: any;\n  flags: string;\n  position: number;\n}\n\nexport function instanceOfStream(\n  nodeOrStream: IEmscriptenFSNode | IEmscriptenStream,\n): nodeOrStream is IEmscriptenStream {\n  return 'node' in nodeOrStream;\n}\n\nexport interface IEmscriptenNodeOps {\n  getattr(node: IEmscriptenFSNode | IEmscriptenStream): IStats;\n  setattr(node: IEmscriptenFSNode | IEmscriptenStream, attr: IStats): void;\n  lookup(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n  ): IEmscriptenFSNode;\n  mknod(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode;\n  rename(\n    oldNode: IEmscriptenFSNode | IEmscriptenStream,\n    newDir: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n  ): void;\n  unlink(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void;\n  rmdir(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void;\n  readdir(node: IEmscriptenFSNode | IEmscriptenStream): string[];\n  symlink(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n    oldPath: string,\n  ): void;\n  readlink(node: IEmscriptenFSNode | IEmscriptenStream): string;\n}\n\nexport interface IEmscriptenStreamOps {\n  open(stream: IEmscriptenStream): void;\n  close(stream: IEmscriptenStream): void;\n  read(\n    stream: IEmscriptenStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number;\n  write(\n    stream: IEmscriptenStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number;\n  llseek(stream: IEmscriptenStream, offset: number, whence: number): number;\n}\n\n/**\n * The emscripten filesystem module API.\n */\nexport type FS = EmscriptenFS & {\n  ErrnoError: any;\n  createNode: (\n    parent: IEmscriptenFSNode | null,\n    name: string,\n    mode: number,\n    dev: number,\n  ) => IEmscriptenFSNode;\n};\n\n/**\n * The emscripten filesystem error codes.\n */\nexport type ERRNO_CODES = any;\n\n/**\n * The emscripten FS Path API.\n */\nexport type PATH = {\n  basename: (path: string) => string;\n  dirname: (path: string) => string;\n  join: (...parts: string[]) => string;\n  join2: (l: string, r: string) => string;\n  normalize: (path: string) => string;\n  splitPath: (filename: string) => string;\n};\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Types and implementation inspired from https://github.com/jvilk/BrowserFS\n// LICENSE: https://github.com/jvilk/BrowserFS/blob/8977a704ea469d05daf857e4818bef1f4f498326/LICENSE\n// And from https://github.com/gzuidhof/starboard-notebook\n\n// LICENSE: https://github.com/gzuidhof/starboard-notebook/blob/cd8d3fc30af4bd29cdd8f6b8c207df8138f5d5dd/LICENSE\nimport { Contents } from '@jupyterlab/services';\n\nimport {\n  FS,\n  ERRNO_CODES,\n  PATH,\n  DIR_MODE,\n  SEEK_CUR,\n  SEEK_END,\n  IEmscriptenStream,\n  instanceOfStream,\n  IEmscriptenStreamOps,\n  IEmscriptenNodeOps,\n  IEmscriptenFSNode,\n  IStats,\n} from './emscripten';\n\nexport const DRIVE_SEPARATOR = ':';\n\nexport const BLOCK_SIZE = 4096;\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder('utf-8');\n\nexport type TDriveMethod =\n  | 'readdir'\n  | 'rmdir'\n  | 'rename'\n  | 'getmode'\n  | 'lookup'\n  | 'mknod'\n  | 'getattr'\n  | 'get'\n  | 'put';\n\n/**\n * Type of the data argument for the drive request, based on the request name\n */\nexport type TDriveData = {\n  rename: {\n    /**\n     * The new path for the file\n     */\n    newPath: string;\n  };\n  mknod: {\n    /**\n     * The mode of the file to create\n     */\n    mode: number;\n  };\n  put: {\n    /**\n     * The file content to write\n     */\n    data: any;\n\n    /**\n     * The file content format\n     */\n    format: Contents.FileFormat;\n  };\n};\n\n/**\n * Drive request\n */\nexport type TDriveRequest<T extends TDriveMethod> = {\n  /**\n   * The method of the request (rmdir, readdir etc)\n   */\n  method: T;\n\n  /**\n   * A unique ID to identify the origin of this request\n   */\n  browsingContextId?: string;\n\n  /**\n   * The path to the file/directory for which the request was sent\n   */\n  path: string;\n} & (T extends keyof TDriveData ? { data: TDriveData[T] } : object);\n\ntype TDriveResponses = {\n  readdir: string[];\n  rmdir: null;\n  rename: null;\n  getmode: number;\n  lookup: DriveFS.ILookup;\n  mknod: null;\n  getattr: IStats;\n  get:\n    | {\n        /**\n         * The returned file content\n         */\n        content: any;\n\n        /**\n         * The content format\n         */\n        format: Contents.FileFormat;\n      }\n    | undefined;\n  put: null;\n};\n\n/**\n * Drive response\n */\nexport type TDriveResponse<T extends TDriveMethod> = TDriveResponses[T];\n\n// Mapping flag -> do we need to overwrite the file upon closing it\nconst flagNeedsWrite: { [flag: number]: boolean } = {\n  0 /*O_RDONLY*/: false,\n  1 /*O_WRONLY*/: true,\n  2 /*O_RDWR*/: true,\n  64 /*O_CREAT*/: true,\n  65 /*O_WRONLY|O_CREAT*/: true,\n  66 /*O_RDWR|O_CREAT*/: true,\n  129 /*O_WRONLY|O_EXCL*/: true,\n  193 /*O_WRONLY|O_CREAT|O_EXCL*/: true,\n  514 /*O_RDWR|O_TRUNC*/: true,\n  577 /*O_WRONLY|O_CREAT|O_TRUNC*/: true,\n  578 /*O_CREAT|O_RDWR|O_TRUNC*/: true,\n  705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: true,\n  706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: true,\n  1024 /*O_APPEND*/: true,\n  1025 /*O_WRONLY|O_APPEND*/: true,\n  1026 /*O_RDWR|O_APPEND*/: true,\n  1089 /*O_WRONLY|O_CREAT|O_APPEND*/: true,\n  1090 /*O_RDWR|O_CREAT|O_APPEND*/: true,\n  1153 /*O_WRONLY|O_EXCL|O_APPEND*/: true,\n  1154 /*O_RDWR|O_EXCL|O_APPEND*/: true,\n  1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: true,\n  1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: true,\n  4096 /*O_RDONLY|O_DSYNC*/: true,\n  4098 /*O_RDWR|O_DSYNC*/: true,\n};\n\n/** Implementation-specifc extension of an open stream, adding the file. */\nexport interface IDriveStream extends IEmscriptenStream {\n  file?: DriveFS.IFile;\n}\n\nexport class DriveFSEmscriptenStreamOps implements IEmscriptenStreamOps {\n  private fs: DriveFS;\n\n  constructor(fs: DriveFS) {\n    this.fs = fs;\n  }\n\n  open(stream: IDriveStream): void {\n    const path = this.fs.realPath(stream.node);\n    if (this.fs.FS.isFile(stream.node.mode)) {\n      stream.file = this.fs.API.get(path);\n    }\n  }\n\n  close(stream: IDriveStream): void {\n    if (!this.fs.FS.isFile(stream.node.mode) || !stream.file) {\n      return;\n    }\n\n    const path = this.fs.realPath(stream.node);\n\n    const flags = stream.flags;\n    let parsedFlags = typeof flags === 'string' ? parseInt(flags, 10) : flags;\n    parsedFlags &= 0x1fff;\n\n    let needsWrite = true;\n    if (parsedFlags in flagNeedsWrite) {\n      needsWrite = flagNeedsWrite[parsedFlags];\n    }\n\n    if (needsWrite) {\n      this.fs.API.put(path, stream.file);\n    }\n\n    stream.file = undefined;\n  }\n\n  read(\n    stream: IDriveStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number {\n    if (\n      length <= 0 ||\n      stream.file === undefined ||\n      position >= (stream.file.data.length || 0)\n    ) {\n      return 0;\n    }\n\n    const size = Math.min(stream.file.data.length - position, length);\n    buffer.set(stream.file.data.subarray(position, position + size), offset);\n    return size;\n  }\n\n  write(\n    stream: IDriveStream,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number,\n  ): number {\n    if (length <= 0 || stream.file === undefined) {\n      return 0;\n    }\n\n    stream.node.timestamp = Date.now();\n\n    if (position + length > (stream.file?.data.length || 0)) {\n      const oldData = stream.file.data ? stream.file.data : new Uint8Array();\n      stream.file.data = new Uint8Array(position + length);\n      stream.file.data.set(oldData);\n    }\n\n    stream.file.data.set(buffer.subarray(offset, offset + length), position);\n\n    return length;\n  }\n\n  llseek(stream: IDriveStream, offset: number, whence: number): number {\n    let position = offset;\n    if (whence === SEEK_CUR) {\n      position += stream.position;\n    } else if (whence === SEEK_END) {\n      if (this.fs.FS.isFile(stream.node.mode)) {\n        if (stream.file !== undefined) {\n          position += stream.file.data.length;\n        } else {\n          throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EPERM);\n        }\n      }\n    }\n\n    if (position < 0) {\n      throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES.EINVAL);\n    }\n\n    return position;\n  }\n}\n\nexport class DriveFSEmscriptenNodeOps implements IEmscriptenNodeOps {\n  private fs: DriveFS;\n\n  constructor(fs: DriveFS) {\n    this.fs = fs;\n  }\n\n  protected node(\n    nodeOrStream: IEmscriptenFSNode | IEmscriptenStream,\n  ): IEmscriptenFSNode {\n    if (instanceOfStream(nodeOrStream)) {\n      return nodeOrStream.node;\n    }\n    return nodeOrStream;\n  }\n\n  getattr(value: IEmscriptenFSNode | IEmscriptenStream): IStats {\n    const node = this.node(value);\n    return {\n      ...this.fs.API.getattr(this.fs.realPath(node)),\n      mode: node.mode,\n      ino: node.id,\n    };\n  }\n\n  setattr(value: IEmscriptenFSNode | IEmscriptenStream, attr: IStats): void {\n    const node = this.node(value);\n    for (const [key, value] of Object.entries(attr)) {\n      switch (key) {\n        case 'mode':\n          node.mode = value;\n          break;\n        case 'timestamp':\n          node.timestamp = value;\n          break;\n        case 'size': {\n          const size = value;\n          const path = this.fs.realPath(node);\n          if (this.fs.FS.isFile(node.mode) && size >= 0) {\n            const file = this.fs.API.get(path);\n            const oldData = file.data ? file.data : new Uint8Array();\n            if (size !== oldData.length) {\n              if (size < oldData.length) {\n                file.data = file.data.slice(0, size);\n              } else {\n                file.data = new Uint8Array(size);\n                file.data.set(oldData);\n              }\n              this.fs.API.put(path, file);\n            }\n          } else {\n            console.warn('setattr size of', size, 'on', node, 'not yet implemented');\n          }\n          break;\n        }\n        default:\n          console.warn('setattr', key, 'of', value, 'on', node, 'not yet implemented');\n          break;\n      }\n    }\n  }\n\n  lookup(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n  ): IEmscriptenFSNode {\n    const node = this.node(parent);\n    const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n    const result = this.fs.API.lookup(path);\n    if (!result.ok) {\n      throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['ENOENT']);\n    }\n    return this.fs.createNode(node, name, result.mode!, 0);\n  }\n\n  mknod(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode {\n    const node = this.node(parent);\n    const path = this.fs.PATH.join2(this.fs.realPath(node), name);\n    this.fs.API.mknod(path, mode);\n    return this.fs.createNode(node, name, mode, dev);\n  }\n\n  rename(\n    value: IEmscriptenFSNode | IEmscriptenStream,\n    newDir: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n  ): void {\n    const oldNode = this.node(value);\n    const newDirNode = this.node(newDir);\n    this.fs.API.rename(\n      oldNode.parent\n        ? this.fs.PATH.join2(this.fs.realPath(oldNode.parent), oldNode.name)\n        : oldNode.name,\n      this.fs.PATH.join2(this.fs.realPath(newDirNode), newName),\n    );\n\n    // Updating the in-memory node\n    oldNode.name = newName;\n    oldNode.parent = newDirNode;\n  }\n\n  unlink(parent: IEmscriptenFSNode | IEmscriptenStream, name: string): void {\n    this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n  }\n\n  rmdir(parent: IEmscriptenFSNode | IEmscriptenStream, name: string) {\n    this.fs.API.rmdir(this.fs.PATH.join2(this.fs.realPath(this.node(parent)), name));\n  }\n\n  readdir(value: IEmscriptenFSNode | IEmscriptenStream): string[] {\n    return this.fs.API.readdir(this.fs.realPath(this.node(value)));\n  }\n\n  symlink(\n    parent: IEmscriptenFSNode | IEmscriptenStream,\n    newName: string,\n    oldPath: string,\n  ): void {\n    throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n  }\n\n  readlink(node: IEmscriptenFSNode | IEmscriptenStream): string {\n    throw new this.fs.FS.ErrnoError(this.fs.ERRNO_CODES['EPERM']);\n  }\n}\n\n/**\n * ContentsAPI base class\n */\nexport abstract class ContentsAPI {\n  constructor(options: ContentsAPI.IOptions) {\n    this._driveName = options.driveName;\n    this._mountpoint = options.mountpoint;\n\n    this.FS = options.FS;\n    this.ERRNO_CODES = options.ERRNO_CODES;\n  }\n\n  lookup(path: string): DriveFS.ILookup {\n    return this.request({ method: 'lookup', path: this.normalizePath(path) });\n  }\n\n  getmode(path: string): number {\n    return this.request({ method: 'getmode', path: this.normalizePath(path) });\n  }\n\n  mknod(path: string, mode: number): null {\n    return this.request({\n      method: 'mknod',\n      path: this.normalizePath(path),\n      data: { mode },\n    });\n  }\n\n  rename(oldPath: string, newPath: string): null {\n    return this.request({\n      method: 'rename',\n      path: this.normalizePath(oldPath),\n      data: { newPath: this.normalizePath(newPath) },\n    });\n  }\n\n  readdir(path: string): string[] {\n    const dirlist = this.request({\n      method: 'readdir',\n      path: this.normalizePath(path),\n    });\n    dirlist.push('.');\n    dirlist.push('..');\n    return dirlist;\n  }\n\n  rmdir(path: string): null {\n    return this.request({ method: 'rmdir', path: this.normalizePath(path) });\n  }\n\n  get(path: string): DriveFS.IFile {\n    const response = this.request({\n      method: 'get',\n      path: this.normalizePath(path),\n    });\n\n    if (!response) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n    }\n\n    const serializedContent = response.content;\n    const format: 'json' | 'text' | 'base64' | null = response.format;\n\n    switch (format) {\n      case 'json':\n      case 'text':\n        return {\n          data: encoder.encode(serializedContent),\n          format,\n        };\n      case 'base64': {\n        const binString = atob(serializedContent);\n        const len = binString.length;\n        const data = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n          data[i] = binString.charCodeAt(i);\n        }\n        return {\n          data,\n          format,\n        };\n      }\n      default:\n        throw new this.FS.ErrnoError(this.ERRNO_CODES['ENOENT']);\n    }\n  }\n\n  put(path: string, value: DriveFS.IFile): null {\n    switch (value.format) {\n      case 'json':\n      case 'text':\n        return this.request({\n          method: 'put',\n          path: this.normalizePath(path),\n          data: {\n            format: value.format,\n            data: decoder.decode(value.data),\n          },\n        });\n      case 'base64': {\n        let binary = '';\n        for (let i = 0; i < value.data.byteLength; i++) {\n          binary += String.fromCharCode(value.data[i]);\n        }\n        return this.request({\n          method: 'put',\n          path: this.normalizePath(path),\n          data: {\n            format: value.format,\n            data: btoa(binary),\n          },\n        });\n      }\n    }\n  }\n\n  getattr(path: string): IStats {\n    const stats = this.request({\n      method: 'getattr',\n      path: this.normalizePath(path),\n    });\n    // Turn datetimes into proper objects\n    if (stats.atime) {\n      stats.atime = new Date(stats.atime);\n    }\n    if (stats.mtime) {\n      stats.mtime = new Date(stats.mtime);\n    }\n    if (stats.ctime) {\n      stats.ctime = new Date(stats.ctime);\n    }\n    // ensure a non-undefined size (0 isn't great, though)\n    stats.size = stats.size || 0;\n    return stats;\n  }\n\n  /**\n   * Normalize a Path by making it compliant for the content manager\n   *\n   * @param path: the path relatively to the Emscripten drive\n   */\n  normalizePath(path: string): string {\n    // Remove mountpoint prefix\n    if (path.startsWith(this._mountpoint)) {\n      path = path.slice(this._mountpoint.length);\n    }\n\n    // Add JupyterLab drive name\n    if (this._driveName) {\n      path = `${this._driveName}${DRIVE_SEPARATOR}${path}`;\n    }\n\n    return path;\n  }\n\n  abstract request<T extends TDriveMethod>(data: TDriveRequest<T>): TDriveResponse<T>;\n\n  private _driveName: string;\n  private _mountpoint: string;\n\n  protected FS: FS;\n  protected ERRNO_CODES: ERRNO_CODES;\n}\n\n/**\n * An Emscripten-compatible synchronous Contents API using the service worker.\n */\nexport class ServiceWorkerContentsAPI extends ContentsAPI {\n  /**\n   * Construct a new ServiceWorkerContentsAPI.\n   */\n  constructor(options: ServiceWorkerContentsAPI.IOptions) {\n    super(options);\n\n    this._baseUrl = options.baseUrl;\n    this._browsingContextId = options.browsingContextId || '';\n  }\n\n  request<T extends TDriveMethod>(data: TDriveRequest<T>): TDriveResponse<T> {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', encodeURI(this.endpoint), false);\n\n    // Add the origin browsing context ID to the request\n    const requestWithBrowsingContextId = {\n      data,\n      browsingContextId: this._browsingContextId,\n    };\n\n    try {\n      xhr.send(JSON.stringify(requestWithBrowsingContextId));\n    } catch (e) {\n      console.error(e);\n    }\n\n    if (xhr.status >= 400) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n    }\n\n    return JSON.parse(xhr.responseText);\n  }\n\n  /**\n   * Get the api/drive endpoint\n   */\n  get endpoint(): string {\n    return `${this._baseUrl}api/drive`;\n  }\n\n  private _baseUrl: string;\n  private _browsingContextId: string;\n}\n\nexport class DriveFS {\n  FS: FS;\n  API: ContentsAPI;\n  PATH: PATH;\n  ERRNO_CODES: ERRNO_CODES;\n  driveName: string;\n\n  constructor(options: DriveFS.IOptions) {\n    this.FS = options.FS;\n    this.PATH = options.PATH;\n    this.ERRNO_CODES = options.ERRNO_CODES;\n    this.API = this.createAPI(options);\n\n    this.driveName = options.driveName;\n\n    this.node_ops = new DriveFSEmscriptenNodeOps(this);\n    this.stream_ops = new DriveFSEmscriptenStreamOps(this);\n  }\n\n  node_ops: IEmscriptenNodeOps;\n  stream_ops: IEmscriptenStreamOps;\n\n  /**\n   * Create the ContentsAPI.\n   *\n   * This is supposed to be overwritten if needed.\n   */\n  createAPI(options: DriveFS.IOptions): ContentsAPI {\n    if (!options.browsingContextId || !options.baseUrl) {\n      throw new Error(\n        'Cannot create service-worker API without current browsingContextId',\n      );\n    }\n\n    return new ServiceWorkerContentsAPI(options as ServiceWorkerContentsAPI.IOptions);\n  }\n\n  mount(mount: any): IEmscriptenFSNode {\n    return this.createNode(null, mount.mountpoint, DIR_MODE | 511, 0);\n  }\n\n  createNode(\n    parent: IEmscriptenFSNode | null,\n    name: string,\n    mode: number,\n    dev: number,\n  ): IEmscriptenFSNode {\n    const FS = this.FS;\n    if (!FS.isDir(mode) && !FS.isFile(mode)) {\n      throw new FS.ErrnoError(this.ERRNO_CODES['EINVAL']);\n    }\n    const node = FS.createNode(parent, name, mode, dev);\n    node.node_ops = this.node_ops;\n    node.stream_ops = this.stream_ops;\n    return node;\n  }\n\n  getMode(path: string): number {\n    return this.API.getmode(path);\n  }\n\n  realPath(node: IEmscriptenFSNode): string {\n    const parts: string[] = [];\n    let currentNode: IEmscriptenFSNode = node;\n\n    parts.push(currentNode.name);\n    while (currentNode.parent !== currentNode) {\n      currentNode = currentNode.parent;\n      parts.push(currentNode.name);\n    }\n    parts.reverse();\n\n    return this.PATH.join.apply(null, parts);\n  }\n}\n\n/**\n * A namespace for ContentsAPI configurations, etc.\n */\nexport namespace ContentsAPI {\n  /**\n   * Initialization options for a contents API;\n   */\n  export interface IOptions {\n    /**\n     * The name of the drive to use for the contents API request.\n     */\n    driveName: string;\n\n    /**\n     * Where to mount files in the kernel.\n     */\n    mountpoint: string;\n\n    /**\n     * The filesystem module API.\n     */\n    FS: FS;\n\n    /**\n     * The filesystem error codes.\n     */\n    ERRNO_CODES: ERRNO_CODES;\n  }\n}\n\n/**\n * A namespace for ServiceWorkerContentsAPI configurations, etc.\n */\nexport namespace ServiceWorkerContentsAPI {\n  /**\n   * Initialization options for a service worker contents API\n   */\n  export interface IOptions extends ContentsAPI.IOptions {\n    /**\n     * The base URL.\n     */\n    baseUrl: string;\n\n    /**\n     * The ID of the browsing context where the request originated.\n     */\n    browsingContextId: string;\n  }\n}\n\n/**\n * A namespace for DriveFS configurations, etc.\n */\nexport namespace DriveFS {\n  /**\n   * A file representation;\n   */\n  export interface IFile {\n    data: Uint8Array;\n    format: 'json' | 'text' | 'base64';\n  }\n\n  /**\n   * The response to a lookup request;\n   */\n  export interface ILookup {\n    ok: boolean;\n    mode?: number;\n  }\n\n  /**\n   * Initialization options for a drive;\n   */\n  export interface IOptions {\n    FS: FS;\n    PATH: PATH;\n    ERRNO_CODES: ERRNO_CODES;\n    baseUrl: string;\n    driveName: string;\n    mountpoint: string;\n    browsingContextId?: string;\n  }\n}\n", "/**\n * Internal virtual filesystem image mounting functionality.\n * @module Mount\n */\n\nimport { ungzip } from 'pako';\nimport { Module } from './emscripten';\nimport { IN_NODE } from './compat';\nimport { DriveFS } from '@jupyterlite/contents';\nimport type { FSMountOptions, FSMetaData } from './webr-main';\nimport type { readFileSync } from 'fs';\n\ntype WorkerFileSystemType = Emscripten.FileSystemType & {\n  reader: { readAsArrayBuffer: (chunk: any) => ArrayBuffer },\n  FILE_MODE: number\n  createNode: (dir: FS.FSNode, file: string, mode: number, dev: number,\n    contents: ArrayBufferView, mtime?: Date) => FS.FSNode;\n};\n\n/**\n * Hooked FS.mount() for using WORKERFS under Node.js or with `Blob` objects\n * replaced with Uint8Array over the communication channel.\n * @internal\n */\nexport function mountFS(type: Emscripten.FileSystemType, opts: FSMountOptions, mountpoint: string) {\n  // For non-WORKERFS filesystem types, just call the original FS.mount()\n  if (type !== Module.FS.filesystems.WORKERFS) {\n    return Module.FS._mount(type, opts, mountpoint) as void;\n  }\n\n  // Otherwise, handle `packages` using our own internal mountImageData()\n  if ('packages' in opts && opts.packages) {\n    opts.packages.forEach((pkg) => {\n      mountImageData(pkg.blob as ArrayBufferLike, pkg.metadata, mountpoint);\n    });\n  } else {\n    // TODO: Handle `blobs` and `files` keys.\n    throw new Error(\n      \"Can't mount data. You must use the `packages` key when mounting with `WORKERFS` in webR.\"\n    );\n  }\n}\n\n/**\n * Mount a Jupyterlite DriveFS Emscripten filesystem to the VFS\n * @internal\n */\nexport function mountDriveFS(mountpoint: string, options: FSMountOptions<'DRIVEFS'>): void {\n  // DriveFS requires the current jupyterlite application base URL\n  const baseUrl = location.origin + '/';\n\n  const fs = new DriveFS({\n    FS: (globalThis as any).FS as DriveFS.IOptions['FS'],\n    PATH: (globalThis as any).PATH as DriveFS.IOptions['PATH'],\n    ERRNO_CODES: (globalThis as any).ERRNO_CODES as object,\n    baseUrl,\n    driveName: options?.driveName || '',\n    mountpoint,\n    browsingContextId: options?.browsingContextId || '',\n  });\n\n  // FIXME: Explicitly bind context stripped by Emscripten's internal `FS.checkOpExists`\n  fs.node_ops.readdir = fs.node_ops.readdir.bind(fs.node_ops);\n  fs.node_ops.getattr = fs.node_ops.getattr.bind(fs.node_ops);\n  fs.node_ops.setattr = fs.node_ops.setattr.bind(fs.node_ops);\n\n  // @ts-expect-error DriveFS does not have `syncfs`, expected by Emscripten.FileSystemType.\n  Module.FS.mount(fs, {}, mountpoint);\n}\n\n/**\n * Download an Emscripten FS image and mount to the VFS\n * @internal\n */\nexport function mountImageUrl(url: string, mountpoint: string) {\n  if (/\\.tgz$|\\.tar\\.gz$|\\.tar$/.test(url)) {\n    // New (v2.0) VFS format - metadata appended to package\n    const dataResp = Module.downloadFileContent(url);\n    if (dataResp.status < 200 || dataResp.status >= 300) {\n      throw new Error(\"Can't download Emscripten filesystem image.\");\n    }\n    const { data, metadata } = decodeVFSArchive(dataResp.response as ArrayBuffer);\n    mountImageData(data, metadata, mountpoint);\n  } else {\n    // Legacy (v1.0) VFS format - from Emscripten's file_packager\n    const urlBase = url.replace(/\\.data\\.gz$|\\.data$|\\.js.metadata$/, '');\n    const metaResp = Module.downloadFileContent(`${urlBase}.js.metadata`);\n    if (metaResp.status < 200 || metaResp.status >= 300) {\n      throw new Error(\"Can't download Emscripten filesystem image metadata.\");\n    }\n\n    const metadata = JSON.parse(\n      new TextDecoder().decode(metaResp.response as ArrayBuffer)\n    ) as FSMetaData;\n\n    const ext = metadata.gzip ? '.data.gz' : '.data';\n    const dataResp = Module.downloadFileContent(`${urlBase}${ext}`);\n    if (dataResp.status < 200 || dataResp.status >= 300) {\n      throw new Error(\"Can't download Emscripten filesystem image data.\");\n    }\n\n    // Decompress filesystem data, if required\n    let data = dataResp.response as ArrayBuffer;\n    if (metadata.gzip) {\n      data = ungzip(data).buffer;\n    }\n    mountImageData(data, metadata, mountpoint);\n  }\n}\n\n/**\n * Read an Emscripten FS image from disk and mount to the VFS (requires Node)\n * @internal\n */\nexport function mountImagePath(path: string, mountpoint: string) {\n  const fs = require('fs') as {\n    readFileSync: typeof readFileSync;\n  };\n\n  if (/\\.tgz$|\\.tar\\.gz$|\\.tar$/.test(path)) {\n    // New (v2.0) VFS format - metadata appended to package\n    const buffer = fs.readFileSync(path);\n    const { data, metadata } = decodeVFSArchive(buffer);\n    mountImageData(data, metadata, mountpoint);\n  } else {\n    // Legacy (v1.0) VFS format - from Emscripten's file_packager\n    const pathBase = path.replace(/\\.data\\.gz$|\\.data$|\\.js.metadata$/, '');\n    const metadata = JSON.parse(\n      fs.readFileSync(`${pathBase}.js.metadata`, 'utf8')\n    ) as FSMetaData;\n\n    const ext = metadata.gzip ? '.data.gz' : '.data';\n    let data: ArrayBufferLike = fs.readFileSync(`${pathBase}${ext}`);\n\n    // Decompress filesystem data, if required\n    if (metadata.gzip) {\n      data = ungzip(data).buffer;\n    }\n    mountImageData(data, metadata, mountpoint);\n  }\n}\n\n// Mount the filesystem image `data` and `metadata` to the VFS at `mountpoint`\nfunction mountImageData(data: ArrayBufferLike | Buffer, metadata: FSMetaData, mountpoint: string) {\n  if (IN_NODE) {\n    const buf = Buffer.from(data);\n    const WORKERFS = Module.FS.filesystems.WORKERFS as WorkerFileSystemType;\n\n    if (!WORKERFS.reader) WORKERFS.reader = {\n      readAsArrayBuffer: (chunk: Buffer) => new Uint8Array(chunk),\n    };\n\n    metadata.files.forEach((f: { filename: string, start: number, end: number }) => {\n      const contents: Buffer & { size?: number } = buf.subarray(f.start, f.end);\n      contents.size = contents.byteLength;\n      contents.slice = (start?: number, end?: number) => {\n        const sub: Buffer & { size?: number } = contents.subarray(start, end);\n        sub.size = sub.byteLength;\n        return sub;\n      };\n      const parts = (mountpoint + f.filename).split('/');\n      const file = parts.pop();\n      if (!file) {\n        throw new Error(`Invalid mount path \"${mountpoint}${f.filename}\".`);\n      }\n      const dir = parts.join('/');\n      Module.FS.mkdirTree(dir);\n      const dirNode = Module.FS.lookupPath(dir, {}).node;\n      WORKERFS.createNode(dirNode, file, WORKERFS.FILE_MODE, 0, contents);\n    });\n  } else {\n    // Main thread communication casts `Blob` to Uint8Array\n    // FIXME: Use a replacer + reviver to handle `Blob`s\n    Module.FS._mount(Module.FS.filesystems.WORKERFS, {\n      packages: [{\n        blob: new Blob([data]),\n        metadata,\n      }],\n    }, mountpoint);\n  }\n}\n\n// Decode archive data and metadata encoded in v2.0 VFS image\nfunction decodeVFSArchive(data: ArrayBufferLike) {\n  const buffer = ungzip(data).buffer;\n  const index = getArchiveMetadata(buffer) || findArchiveMetadata(buffer);\n  if (!index) {\n    throw new Error(\"Can't mount archive, no VFS metadata found.\");\n  }\n\n  const bytes = new DataView(buffer, 512 * index.block, index.len);\n  const metadata = JSON.parse(new TextDecoder().decode(bytes)) as FSMetaData;\n  return { data: buffer, metadata };\n}\n\n// Use archive \"hint\" data to get metadata offset and length\nfunction getArchiveMetadata(buffer: ArrayBufferLike) {\n  const view = new DataView(buffer);\n  const magic = view.getInt32(view.byteLength - 16);\n  // const reserved = view.getInt32(view.byteLength - 12);\n  const block = view.getInt32(view.byteLength - 8);\n  const len = view.getInt32(view.byteLength - 4);\n\n  if (magic !== 2003133010 || block === 0 || len === 0) {\n    return null;\n  } else {\n    return { block, len };\n  }\n}\n\n// Search the .tar archive for the metadata file\nfunction findArchiveMetadata(buffer: ArrayBufferLike) {\n  const decoder = new TextDecoder();\n  let offset = 0;\n  while (offset < buffer.byteLength) {\n    const header = buffer.slice(offset, offset + 512);\n    offset += 512;\n\n    // End of archive\n    if (new Uint8Array(header).every(byte => byte === 0)) {\n      return null;\n    }\n\n    // Skip directories, global, and vendor-specific extended headers\n    const type = decoder.decode(header.slice(156, 157));\n    if (/5|g|[A-Z]/.test(type)) {\n      continue;\n    }\n\n    // Entry data\n    const filename = decoder.decode(header.slice(0, 100)).replace(/\\0+$/, '');\n    const len = parseInt(decoder.decode(header.slice(124, 136)), 8);\n    if (filename == '.vfs-index.json') {\n      return { block: offset / 512, len };\n    }\n\n    // Skip to the next block\n    offset += 512 * Math.ceil(len / 512.);\n  }\n  return null;\n}\n", "import { loadScript } from './compat';\nimport { ChannelWorker } from './chan/channel';\nimport { newChannelWorker, ChannelInitMessage, ChannelType } from './chan/channel-common';\nimport { EvalResponse, Message, Request, newResponse } from './chan/message';\nimport { FSAnalyzeInfo, FSMountOptions, FSNode, WebROptions } from './webr-main';\nimport { EmPtr, Module } from './emscripten';\nimport { IN_NODE } from './compat';\nimport { replaceInObject, throwUnreachable } from './utils';\nimport { WebRPayloadRaw, WebRPayloadPtr, WebRPayloadWorker, isWebRPayloadPtr } from './payload';\nimport { RPtr, RType, RCtor, WebRData, WebRDataRaw } from './robj';\nimport { protect, protectInc, unprotect, parseEvalBare, UnwindProtectException, safeEval } from './utils-r';\nimport { generateUUID } from './chan/task-common';\nimport { mountFS, mountImageUrl, mountImagePath, mountDriveFS } from './mount';\nimport type { parentPort } from 'worker_threads';\n\nimport {\n  CallRObjectMethodMessage,\n  CaptureRMessage,\n  EvalROptions,\n  EvalRMessage,\n  EvalRMessageRaw,\n  FSMessage,\n  FSReadFileMessage,\n  FSMountMessage,\n  FSWriteFileMessage,\n  InvokeWasmFunctionMessage,\n  NewRObjectMessage,\n  ShelterMessage,\n  ShelterDestroyMessage,\n  InstallPackagesMessage,\n  FSSyncfsMessage,\n  FSRenameMessage,\n  FSAnalyzePathMessage,\n} from './webr-chan';\n\nimport {\n  RCall,\n  RCharacter,\n  RComplex,\n  RDataFrame,\n  RDouble,\n  REnvironment,\n  RInteger,\n  RList,\n  RLogical,\n  RObject,\n  RPairlist,\n  RRaw,\n  RString,\n  RSymbol,\n  destroy,\n  getRWorkerClass,\n  initPersistentObjects,\n  isRObject,\n  keep,\n  objs,\n  purge,\n  shelters,\n} from './robj-worker';\n\nlet initialised = false;\nlet resolved = false;\nlet chan: ChannelWorker | undefined;\n\n// Make webR Worker R objects available in WorkerGlobalScope\nObject.assign(globalThis, {\n  RCall,\n  RCharacter,\n  RComplex,\n  RDataFrame,\n  RDouble,\n  REnvironment,\n  RInteger,\n  RList,\n  RLogical,\n  RObject,\n  RPairlist,\n  RRaw,\n  RString,\n  RSymbol,\n  destroy,\n  getRWorkerClass,\n  initPersistentObjects,\n  isRObject,\n  keep,\n  objs,\n  purge,\n  shelters,\n});\n\nconst onWorkerMessage = function (msg: Message) {\n  if (!msg || !msg.type) {\n    return;\n  }\n  if (msg.type === 'init') {\n    if (initialised) {\n      throw new Error(\"Can't initialise worker multiple times.\");\n    }\n    const messageInit = msg as ChannelInitMessage;\n    chan = newChannelWorker(messageInit);\n    messageInit.data.config.channelType = messageInit.data.channelType;\n    init(messageInit.data.config);\n    initialised = true;\n    return;\n  }\n  chan?.resolveRequest(msg);\n};\n\nif (IN_NODE) {\n  const workerThreads = require('worker_threads') as {\n    parentPort: typeof parentPort;\n  };\n  workerThreads.parentPort!.on('message', onWorkerMessage);\n  (globalThis as any).XMLHttpRequest = require('xmlhttprequest-ssl')\n    .XMLHttpRequest as XMLHttpRequest;\n} else {\n  globalThis.onmessage = (ev: MessageEvent<Message>) => onWorkerMessage(ev.data);\n}\n\ntype XHRResponse = {\n  status: number;\n  response: string | ArrayBuffer;\n};\n\nlet _config: Required<WebROptions>;\n\nfunction dispatch(msg: Message): void {\n  switch (msg.type) {\n    case 'request': {\n      const req = msg as Request;\n      const reqMsg = req.data.msg;\n\n      const write = (resp: WebRPayloadWorker, transferables?: [Transferable]) =>\n        chan?.write(newResponse(req.data.uuid, { type: 'payload', data: resp }, transferables));\n      try {\n        switch (reqMsg.type) {\n          case 'analyzePath': {\n            const msg = reqMsg as FSAnalyzePathMessage;\n            const info = Module.FS.analyzePath(msg.data.path, msg.data.dontResolveLastLink);\n            const data: FSAnalyzeInfo = {\n              isRoot: info.isRoot,\n              exists: info.exists,\n              error: info.error,\n              name: info.name,\n              path: info.path,\n              parentExists: info.parentExists,\n              parentPath: info.parentPath,\n              object: info.exists ? copyFSNode(info.object as FSNode) : undefined,\n              parentObject: info.parentExists ? copyFSNode(info.parentObject as FSNode) : undefined,\n            };\n\n            write({\n              obj: data,\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'lookupPath': {\n            const msg = reqMsg as FSMessage;\n            const node = Module.FS.lookupPath(msg.data.path, {}).node;\n            write({\n              obj: copyFSNode(node as FSNode),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'mkdir': {\n            const msg = reqMsg as FSMessage;\n            write({\n              obj: copyFSNode(Module.FS.mkdir(msg.data.path) as FSNode),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'mount': {\n            const msg = reqMsg as FSMountMessage;\n            const type = msg.data.type;\n            const mountpoint = msg.data.mountpoint;\n            if (type === \"IDBFS\" && _config.channelType == ChannelType.SharedArrayBuffer) {\n              throw new Error(\n                'The `IDBFS` filesystem type is not supported under the `SharedArrayBuffer` ' +\n                'communication channel. The `PostMessage` communication channel must be used.'\n              );\n            }\n\n            if (type === \"DRIVEFS\") {\n              const options = msg.data.options as FSMountOptions<typeof type>;\n              mountDriveFS(mountpoint, options);\n            } else {\n              const fs = Module.FS.filesystems[type];\n              Module.FS.mount(fs, msg.data.options, mountpoint);\n            }\n\n            write({ obj: null, payloadType: 'raw' });\n            break;\n          }\n          case 'syncfs': {\n            const msg = reqMsg as FSSyncfsMessage;\n            Module.FS.syncfs(msg.data.populate, (err: string | undefined) => {\n              if (err) {\n                throw new Error(`Emscripten \\`syncfs\\` error: \"${err}\".`);\n              }\n              write({ obj: null, payloadType: 'raw' });\n            });\n            break;\n          }\n          case 'readFile': {\n            const msg = reqMsg as FSReadFileMessage;\n            const reqData = msg.data;\n            const out = {\n              obj: Module.FS.readFile(reqData.path, {\n                encoding: 'binary',\n                flags: reqData.flags,\n              }),\n              payloadType: 'raw',\n            };\n            write(out as WebRPayloadRaw, [out.obj.buffer]);\n            break;\n          }\n          case 'rename': {\n            const msg = reqMsg as FSRenameMessage;\n            write({\n              obj: Module.FS.rename(msg.data.oldpath, msg.data.newpath),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'rmdir': {\n            const msg = reqMsg as FSMessage;\n            write({\n              obj: Module.FS.rmdir(msg.data.path),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'writeFile': {\n            const msg = reqMsg as FSWriteFileMessage;\n            const reqData = msg.data;\n            // FIXME: Use a replacer + reviver to transfer Uint8Array\n            const data = Uint8Array.from(Object.values(reqData.data));\n            write({\n              obj: Module.FS.writeFile(reqData.path, data, { flags: reqData.flags }),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'unlink': {\n            const msg = reqMsg as FSMessage;\n            write({\n              obj: Module.FS.unlink(msg.data.path),\n              payloadType: 'raw',\n            });\n            break;\n          }\n          case 'unmount': {\n            const msg = reqMsg as FSMessage;\n            write({\n              obj: Module.FS.unmount(msg.data.path),\n              payloadType: 'raw',\n            });\n            break;\n          }\n\n          case 'newShelter': {\n            const id = generateUUID();\n            shelters.set(id, []);\n\n            write({\n              payloadType: 'raw',\n              obj: id,\n            });\n            break;\n          }\n\n          case 'shelterSize': {\n            const msg = reqMsg as ShelterMessage;\n            const size = shelters.get(msg.data)!.length;\n\n            write({ payloadType: 'raw', obj: size });\n            break;\n          }\n\n          case 'shelterPurge': {\n            const msg = reqMsg as ShelterMessage;\n            purge(msg.data);\n\n            write({ payloadType: 'raw', obj: null });\n            break;\n          }\n\n          case 'shelterDestroy': {\n            const msg = reqMsg as ShelterDestroyMessage;\n            destroy(msg.data.id, msg.data.obj.obj.ptr);\n\n            write({ payloadType: 'raw', obj: null });\n            break;\n          }\n\n          case 'captureR': {\n            const msg = reqMsg as CaptureRMessage;\n            const data = msg.data;\n\n            const shelter = data.shelter;\n            const prot = { n: 0 };\n\n            try {\n              const capture = captureR(data.code, data.options);\n              protectInc(capture.result, prot);\n              protectInc(capture.output, prot);\n\n              const result = capture.result;\n              keep(shelter, result);\n\n              const n = capture.output.length;\n              const output: any[] = [];\n\n              for (let i = 1; i < n + 1; ++i) {\n                const out = capture.output.get(i);\n                const type = (out.pluck(1, 1) as RCharacter).toString();\n                const data = out.get(2);\n\n                if (type === 'stdout' || type === 'stderr') {\n                  const msg = (data as RString).toString();\n                  output.push({ type, data: msg });\n                } else {\n                  keep(shelter, data);\n                  const payload = {\n                    obj: {\n                      ptr: data.ptr,\n                      type: data.type(),\n                      methods: RObject.getMethods(data),\n                    },\n                    payloadType: 'ptr',\n                  } as WebRPayloadPtr;\n                  output.push({ type, data: payload });\n                }\n              }\n\n              const resultPayload = {\n                payloadType: 'ptr',\n                obj: {\n                  ptr: result.ptr,\n                  type: result.type(),\n                  methods: RObject.getMethods(result),\n                },\n              } as WebRPayloadPtr;\n\n              write({\n                payloadType: 'raw',\n                obj: {\n                  result: resultPayload,\n                  output: output,\n                  images: capture.images,\n                },\n              });\n            } finally {\n              unprotect(prot.n);\n            }\n            break;\n          }\n\n          case 'evalR': {\n            const msg = reqMsg as EvalRMessage;\n\n            const result = evalR(msg.data.code, msg.data.options);\n            keep(msg.data.shelter, result);\n\n            write({\n              obj: {\n                type: result.type(),\n                ptr: result.ptr,\n                methods: RObject.getMethods(result),\n              },\n              payloadType: 'ptr',\n            });\n            break;\n          }\n\n          case 'evalRRaw': {\n            const msg = reqMsg as EvalRMessageRaw;\n            const result = evalR(msg.data.code, msg.data.options);\n\n            protect(result);\n\n            const throwType = () => {\n              throw new Error(`Can't convert object of type ${result.type()} to ${msg.data.outputType}.`);\n            };\n\n            try {\n              let out: WebRDataRaw = undefined;\n              switch (msg.data.outputType) {\n                case 'void':\n                  break;\n                case 'boolean':\n                  switch (result.type()) {\n                    case 'logical':\n                      out = (result as RLogical).toBoolean();\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                case 'boolean[]':\n                  switch (result.type()) {\n                    case 'logical':\n                      out = (result as RLogical).toArray();\n                      if (out.some((i) => i === null)) {\n                        throwType();\n                      }\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                case 'number':\n                  switch (result.type()) {\n                    case 'logical':\n                      out = (result as RLogical).toBoolean();\n                      out = Number(out);\n                      break;\n                    case 'integer':\n                      out = (result as RInteger).toNumber();\n                      break;\n                    case 'double':\n                      out = (result as RDouble).toNumber();\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                case 'number[]':\n                  switch (result.type()) {\n                    case 'logical':\n                      out = (result as RLogical).toArray();\n                      out = out.map((i) => i === null ? throwType() : Number(i));\n                      break;\n                    case 'integer':\n                      out = (result as RInteger).toArray();\n                      if (out.some((i) => i === null)) {\n                        throwType();\n                      }\n                      break;\n                    case 'double':\n                      out = (result as RDouble).toArray();\n                      if (out.some((i) => i === null)) {\n                        throwType();\n                      }\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                case 'string':\n                  switch (result.type()) {\n                    case 'character':\n                      out = (result as RCharacter).toString();\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                case 'string[]':\n                  switch (result.type()) {\n                    case 'character':\n                      out = (result as RCharacter).toArray();\n                      if (out.some((i) => i === null)) {\n                        throwType();\n                      }\n                      break;\n                    default:\n                      throwType();\n                  }\n                  break;\n                default:\n                  throw new Error('Unexpected output type in `evalRRaw().');\n              }\n\n              write({\n                obj: out,\n                payloadType: 'raw',\n              });\n              break;\n            } finally {\n              unprotect(1);\n            }\n          }\n\n          case 'newRObject': {\n            const msg = reqMsg as NewRObjectMessage;\n\n            const payload = newRObject(msg.data.args, msg.data.objType);\n            keep(msg.data.shelter, payload.obj.ptr);\n\n            write(payload);\n            break;\n          }\n\n          case 'callRObjectMethod': {\n            const msg = reqMsg as CallRObjectMethodMessage;\n            const data = msg.data;\n            const obj = data.payload ? RObject.wrap(data.payload.obj.ptr) : RObject;\n\n            const payload = callRObjectMethod(obj, data.prop, data.args);\n            if (isWebRPayloadPtr(payload)) {\n              // TODO: Remove `!`\n              keep(data.shelter!, payload.obj.ptr);\n            }\n\n            write(payload);\n            break;\n          }\n\n          case 'invokeWasmFunction': {\n            const msg = reqMsg as InvokeWasmFunctionMessage;\n            const res = Module.getWasmTableEntry(msg.data.ptr)(...msg.data.args);\n            write({\n              payloadType: 'raw',\n              obj: res,\n            });\n            break;\n          }\n\n          case 'installPackages': {\n            const msg = reqMsg as InstallPackagesMessage;\n            let pkgs = msg.data.name;\n            let repos = msg.data.options.repos ? msg.data.options.repos : _config.repoUrl;\n            if (typeof pkgs === \"string\") pkgs = [pkgs];\n            if (typeof repos === \"string\") repos = [repos];\n            evalR(`webr::install(\n              c(${pkgs.map((r) => '\"' + r + '\"').join(',')}),\n              repos = c(${repos.map((r) => '\"' + r + '\"').join(',')}),\n              quiet = ${msg.data.options.quiet ? 'TRUE' : 'FALSE'},\n              mount = ${msg.data.options.mount ? 'TRUE' : 'FALSE'}\n            )`);\n\n            write({\n              obj: true,\n              payloadType: 'raw',\n            });\n            break;\n          }\n          default:\n            throw new Error('Unknown event `' + reqMsg.type + '`');\n        }\n      } catch (_e) {\n        const e = _e as Error & { errno?: number };\n        const errorObj = {\n          name: e.name,\n          message: e.message,\n          errno: e.errno,\n          stack: e.stack\n        };\n        write({ payloadType: 'err', obj: errorObj });\n\n        /* Capture continuation token and resume R's non-local transfer.\n         * If the exception has reached this point there should no longer be\n         * any `evalJs()` calls on the stack. As such, we assume there are no R\n         * calls above us and it is safe to `longjmp` from here.\n         */\n        if (e instanceof UnwindProtectException) {\n          Module._R_ContinueUnwind(e.cont);\n          throwUnreachable();\n        }\n      }\n      break;\n    }\n    default:\n      throw new Error('Unknown event `' + msg.type + '`');\n  }\n}\n\nfunction copyFSNode(obj: FSNode): FSNode {\n  const retObj: FSNode = {\n    id: obj.id,\n    name: obj.name,\n    mode: obj.mode,\n    isFolder: obj.isFolder,\n    mounted: null,\n    contents: {},\n  };\n  if (obj.isFolder && obj.contents) {\n    retObj.contents = Object.fromEntries(\n      Object.entries(obj.contents).map(([name, node]) => [name, copyFSNode(node)])\n    );\n  }\n  if (obj.mounted !== null) {\n    retObj.mounted = {\n      mountpoint: obj.mounted.mountpoint,\n      root: copyFSNode(obj.mounted.root),\n    };\n  }\n  return retObj;\n}\n\nfunction downloadFileContent(URL: string, headers: Array<string> = []): XHRResponse {\n  const request = new XMLHttpRequest();\n  request.open('GET', URL, false);\n  request.responseType = 'arraybuffer';\n\n  try {\n    headers.forEach((header) => {\n      const splitHeader = header.split(': ');\n      request.setRequestHeader(splitHeader[0], splitHeader[1]);\n    });\n  } catch {\n    const responseText = 'An error occurred setting headers in XMLHttpRequest';\n    console.error(responseText);\n    return { status: 400, response: responseText };\n  }\n\n  try {\n    request.send(null);\n    const status = IN_NODE\n      ? (JSON.parse(String(request.status)) as { data: { statusCode: number } }).data.statusCode\n      : request.status;\n\n    if (status >= 200 && status < 300) {\n      return { status: status, response: request.response as ArrayBuffer };\n    } else {\n      const responseText = new TextDecoder().decode(request.response as ArrayBuffer);\n      console.error(`Error fetching ${URL} - ${responseText}`);\n      return { status: status, response: responseText };\n    }\n  } catch {\n    return { status: 400, response: 'An error occurred in XMLHttpRequest' };\n  }\n}\n\nfunction newRObject(args: WebRData[], objType: RType | RCtor): WebRPayloadPtr {\n  const RClass = getRWorkerClass(objType);\n  const _args = replaceInObject<WebRData[]>(args, isWebRPayloadPtr, (t: WebRPayloadPtr) =>\n    RObject.wrap(t.obj.ptr)\n  );\n  const obj = new RClass(..._args);\n  return {\n    obj: {\n      type: obj.type(),\n      ptr: obj.ptr,\n      methods: RObject.getMethods(obj),\n    },\n    payloadType: 'ptr',\n  };\n}\n\nfunction callRObjectMethod(\n  obj: RObject | typeof RObject,\n  prop: string,\n  args: WebRPayloadWorker[]\n): WebRPayloadWorker {\n  if (!(prop in obj)) {\n    throw new ReferenceError(`${prop} is not defined`);\n  }\n\n  const fn = obj[prop as keyof typeof obj];\n  if (typeof fn !== 'function') {\n    throw Error('Requested property cannot be invoked');\n  }\n\n  const res = (fn as (...args: unknown[]) => unknown).apply(\n    obj,\n    args.map((arg) => {\n      if (arg.payloadType === 'ptr') {\n        return RObject.wrap(arg.obj.ptr);\n      }\n      return replaceInObject(arg.obj, isWebRPayloadPtr, (t: WebRPayloadPtr) =>\n        RObject.wrap(t.obj.ptr)\n      );\n    })\n  ) as WebRData;\n\n  const ret = replaceInObject(res, isRObject, (obj: RObject) => {\n    return {\n      obj: { type: obj.type(), ptr: obj.ptr, methods: RObject.getMethods(obj) },\n      payloadType: 'ptr',\n    };\n  }) as WebRDataRaw;\n\n  return { obj: ret, payloadType: 'raw' };\n}\n\nfunction captureR(expr: string | RObject, options: EvalROptions = {}): {\n  result: RObject,\n  output: RList,\n  images: ImageBitmap[],\n} {\n  const _options: Required<EvalROptions> = Object.assign(\n    {\n      env: objs.globalEnv,\n      captureStreams: true,\n      captureConditions: true,\n      captureGraphics: typeof OffscreenCanvas !== 'undefined',\n      withAutoprint: false,\n      throwJsException: true,\n      withHandlers: true,\n    },\n    replaceInObject(options, isWebRPayloadPtr, (t: WebRPayloadPtr) =>\n      RObject.wrap(t.obj.ptr)\n    )\n  );\n\n  const prot = { n: 0 };\n  const devEnvObj = new REnvironment({});\n  protectInc(devEnvObj, prot);\n\n  // Set the session as non-interactive\n  Module.setValue(Module._R_Interactive, 0, 'i8');\n\n  try {\n    const envObj = new REnvironment(_options.env);\n    protectInc(envObj, prot);\n    if (envObj.type() !== 'environment') {\n      throw new Error('Attempted to evaluate R code with invalid environment object');\n    }\n\n    // Start a capturing canvas graphics device, if required\n    if (_options.captureGraphics) {\n      if (typeof OffscreenCanvas === 'undefined') {\n        throw new Error(\n          'This environment does not have support for OffscreenCanvas. ' +\n          'Consider disabling plot capture using `captureGraphics: false`.'\n        );\n      }\n\n      // User supplied canvas arguments, if any. Default: `capture = TRUE`\n      devEnvObj.bind('canvas_options', new RList(Object.assign({\n        capture: true\n      }, _options.captureGraphics)));\n\n      parseEvalBare(`{\n        old_dev <- dev.cur()\n        do.call(webr::canvas, canvas_options)\n        new_dev <- dev.cur()\n        old_cache <- webr::canvas_cache()\n        plots <- numeric()\n      }`, devEnvObj);\n    }\n\n    const tPtr = objs.true.ptr;\n    const fPtr = objs.false.ptr;\n\n    const fn = parseEvalBare('webr::eval_r', objs.baseEnv);\n    const qu = parseEvalBare('quote', objs.baseEnv);\n    protectInc(fn, prot);\n    protectInc(qu, prot);\n\n    const exprObj = new RObject(expr);\n    protectInc(exprObj, prot);\n\n    const call = Module._Rf_lang6(\n      fn.ptr,\n      Module._Rf_lang2(qu.ptr, exprObj.ptr),\n      _options.captureConditions ? tPtr : fPtr,\n      _options.captureStreams ? tPtr : fPtr,\n      _options.withAutoprint ? tPtr : fPtr,\n      _options.withHandlers ? tPtr : fPtr\n    );\n    protectInc(call, prot);\n\n    // Evaluate the given expression\n    const capture = RList.wrap(safeEval(call, envObj));\n    protectInc(capture, prot);\n\n    // If we've captured an error, throw it as a JS Exception\n    if (_options.captureConditions && _options.throwJsException) {\n      const output = capture.get('output') as RList;\n      const error = (output.toArray() as RObject[]).find(\n        (out) => out.get('type').toString() === 'error'\n      );\n      if (error) {\n        const call = error.pluck('data', 'call') as RCall;\n        const source = call && call.type() === 'call' ? `\\`${call.deparse()}\\`` : 'unknown source';\n        const message = error.pluck('data', 'message')?.toString() || 'An error occurred evaluating R code.';\n        throw new Error(`Error in ${source}: ${message}`);\n      }\n    }\n\n    let images: ImageBitmap[] = [];\n    if (_options.captureGraphics) {\n      // Find new plots after evaluating the given expression\n      const plots = parseEvalBare(`{\n        new_cache <- webr::canvas_cache()\n        plots <- setdiff(new_cache, old_cache)\n      }`, devEnvObj) as RInteger;\n      protectInc(plots, prot);\n\n      images = plots.toArray().map((idx) => {\n        return Module.webr.canvas[idx!].offscreen.transferToImageBitmap();\n      });\n    }\n\n    // Build the capture object to be returned to the caller\n    return {\n      result: capture.get('result'),\n      output: capture.get('output') as RList,\n      images,\n    };\n  } finally {\n    // Restore the session's interactive status\n    Module.setValue(Module._R_Interactive, _config.interactive ? 1 : 0, 'i8');\n\n    // Close the device and destroy newly created canvas cache entries\n    const newDev = devEnvObj.get('new_dev');\n    if (_options.captureGraphics && newDev.type() !== \"null\") {\n      parseEvalBare(`{\n        dev.off(new_dev)\n        dev.set(old_dev)\n        webr::canvas_destroy(plots)\n      }`, devEnvObj);\n    }\n    unprotect(prot.n);\n  }\n}\n\nfunction evalR(expr: string | RObject, options: EvalROptions = {}): RObject {\n  // Defaults for evalR that should differ from the defaults in captureR\n  options = Object.assign({\n    captureGraphics: false\n  }, options);\n\n  const prot = { n: 0 };\n  const capture = captureR(expr, options);\n\n  try {\n    protectInc(capture.output, prot);\n    protectInc(capture.result, prot);\n    // Send captured conditions and output to the JS console. By default, captured\n    // error conditions are thrown and so do not need to be handled here.\n    for (let i = 1; i <= capture.output.length; i++) {\n      const out = capture.output.get(i);\n      const outputType = out.get('type').toString();\n      switch (outputType) {\n        case 'stdout':\n          chan?.writeSystem({ type: 'console.log', data: out.get('data').toString() });\n          break;\n        case 'stderr':\n          chan?.writeSystem({ type: 'console.warn', data: out.get('data').toString() });\n          break;\n        case 'message':\n          chan?.writeSystem({\n            type: 'console.warn',\n            data: out.pluck('data', 'message')?.toString() || '',\n          });\n          break;\n        case 'warning':\n          chan?.writeSystem({\n            type: 'console.warn',\n            data: `Warning message: \\n${out.pluck('data', 'message')?.toString() || ''}`,\n          });\n          break;\n        default:\n          chan?.writeSystem({ type: 'console.warn', data: `Output of type ${outputType}:` });\n          chan?.writeSystem({ type: 'console.warn', data: out.get('data').toJs() });\n          break;\n      }\n    }\n    return capture.result;\n  } finally {\n    unprotect(prot.n);\n  }\n}\n\nfunction init(config: Required<WebROptions>) {\n  _config = config;\n\n  const env = { ...config.REnv };\n  if (!env.TZ) {\n    const fmt = new Intl.DateTimeFormat();\n    env.TZ = fmt.resolvedOptions().timeZone;\n  }\n\n  Module.preRun = [];\n  Module.arguments = _config.RArgs;\n  Module.noExitRuntime = true;\n  Module.noImageDecoding = true;\n  Module.noAudioDecoding = true;\n  Module.noInitialRun = true;\n\n  // Don't instantiate .so libraries packaged through `WEBR_REPO` too\n  // early. Otherwise C++ libraries with dynamic initialisation of\n  // global variables might call into the R API too early, before R has\n  // started.\n  Module.noWasmDecoding = true;\n\n  Module.preRun.push(() => {\n    if (IN_NODE) {\n      globalThis.FS = Module.FS;\n      (globalThis as any).chan = chan;\n    }\n    if (_config.createLazyFilesystem) {\n      Module.createLazyFilesystem();\n    }\n    Module.FS.mkdirTree(_config.homedir);\n    Module.ENV.HOME = _config.homedir;\n    Module.FS.chdir(_config.homedir);\n    Module.ENV = Object.assign(Module.ENV, env);\n\n    // Hook Emscripten's FS.mount() to handle ArrayBuffer data from the channel\n    Module.FS._mount = Module.FS.mount;\n    Module.FS.mount = mountFS;\n  });\n\n  chan?.setDispatchHandler(dispatch);\n\n  Module.onRuntimeInitialized = () => {\n    chan?.run(_config.RArgs);\n  };\n\n  Module.webr = {\n    UnwindProtectException: UnwindProtectException,\n    evalR: evalR,\n    captureR: captureR,\n    channel: chan,\n    canvas: {},\n\n    resolveInit: () => {\n      initPersistentObjects();\n      chan?.setInterrupt(Module._Rf_onintr);\n      Module.setValue(Module._R_Interactive, _config.interactive ? 1 : 0, 'i8');\n      evalR(`options(webr_pkg_repos=\"${_config.repoUrl}\")`);\n      chan?.resolve();\n      resolved = true;\n    },\n\n    setPrompt: (prompt: string) => {\n      chan?.write({ type: 'prompt', data: prompt });\n    },\n\n    readConsole: () => {\n      if (!chan) {\n        throw new Error(\"Can't read console input without a communication channel\");\n      }\n      if (!resolved) Module.webr.resolveInit();\n      return chan.inputOrDispatch();\n    },\n\n    handleEvents: () => {\n      chan?.handleEvents();\n    },\n\n    dataViewer: (ptr: RPtr, title: string) => {\n      const data = RList.wrap(ptr).toObject({ depth: 0 });\n      chan?.write({ type: 'view', data: { data, title } });\n    },\n\n    evalJs: (code: RPtr, await = false): RPtr => {\n      try {\n        let result = null;\n        if (await) {\n          // Run JS on main thread and block until the result resolves\n          const response = chan?.syncRequest({ type: 'eval-await', data: Module.UTF8ToString(code) }) as EvalResponse;\n          if (!response) {\n            throw new Error('Empty sync response for `evalJs`.');\n          } else if (response.data.error) {\n            throw new Error(response?.data.error);\n          } else {\n            result = response?.data.result as WebRData;\n          }\n        } else {\n          // Run JS in the webR worker thread\n          result = (0, eval)(Module.UTF8ToString(code)) as WebRData;\n        }\n        return (new RObject(result)).ptr;\n      } catch (e) {\n        /* Capture continuation token and resume R's non-local transfer here.\n         * By resuming here we avoid potentially unwinding a target intermediate\n         * R stack on the way up to the top level.\n         */\n        if (e instanceof UnwindProtectException) {\n          Module._R_ContinueUnwind(e.cont);\n          throwUnreachable();\n        } else if (e === Infinity) {\n          // Propagate interruption\n          throw e;\n        }\n        const msg = Module.allocateUTF8OnStack(\n          `An error occurred during JavaScript evaluation:\\n  ${(e as { message: string }).message}`\n        );\n        Module._Rf_error(msg);\n      }\n      throwUnreachable();\n      return 0;\n    },\n\n    setTimeoutWasm: (ptr: EmPtr, delay: number, ...args: number[]): void => {\n      chan?.writeSystem({ type: 'setTimeoutWasm', data: { ptr, delay, args } });\n    },\n  };\n\n  Module.locateFile = (path: string) => _config.baseUrl + path;\n  Module.downloadFileContent = downloadFileContent;\n  Module.mountImageUrl = mountImageUrl;\n  Module.mountImagePath = mountImagePath;\n  Module.mountDriveFS = mountDriveFS;\n\n  Module.print = (text: string) => {\n    chan?.write({ type: 'stdout', data: text });\n  };\n\n  Module.printErr = (text: string) => {\n    chan?.write({ type: 'stderr', data: text });\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  (globalThis as any).Module = Module;\n\n  // Proxy WebSockets to main thread.\n  // Requires channel SyncRequest support for handling events.\n  if (chan?.WebSocketProxy) {\n    globalThis.WebSocket = chan.WebSocketProxy;\n  }\n\n  // At the next tick, launch the REPL. This never returns.\n  setTimeout(() => {\n    const scriptSrc = `${_config.baseUrl}R.js`;\n    void loadScript(scriptSrc);\n  });\n}\n"],
  "mappings": "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",
  "names": ["exports", "setUint64", "view", "offset", "value", "high", "low", "setInt64", "getInt64", "getUint64", "int_1", "TEXT_ENCODING_AVAILABLE", "_a", "utf8Count", "str", "strLength", "byteLength", "pos", "value", "extra", "exports", "utf8EncodeJs", "output", "outputOffset", "offset", "sharedTextEncoder", "_b", "utf8EncodeTEencode", "utf8EncodeTEencodeInto", "CHUNK_SIZE", "utf8DecodeJs", "bytes", "inputOffset", "end", "units", "result", "byte1", "byte2", "byte3", "byte4", "unit", "sharedTextDecoder", "_c", "utf8DecodeTD", "stringBytes", "ExtData", "type", "data", "exports", "DecodeError", "_DecodeError", "message", "proto", "exports", "DecodeError_1", "int_1", "exports", "TIMESTAMP32_MAX_SEC", "TIMESTAMP64_MAX_SEC", "encodeTimeSpecToTimestamp", "sec", "nsec", "rv", "secHigh", "secLow", "view", "encodeDateToTimeSpec", "date", "msec", "nsecInSec", "encodeTimestampExtension", "object", "timeSpec", "decodeTimestampToTimeSpec", "data", "nsec30AndSecHigh2", "secLow32", "decodeTimestampExtension", "ExtData_1", "timestamp_1", "ExtensionCodec", "type", "encode", "decode", "index", "object", "context", "i", "encodeExt", "data", "decodeExt", "exports", "ensureUint8Array", "buffer", "exports", "createDataView", "bufferView", "utf8_1", "ExtensionCodec_1", "int_1", "typedArrays_1", "exports", "Encoder", "extensionCodec", "context", "maxDepth", "initialBufferSize", "sortKeys", "forceFloat32", "ignoreUndefined", "forceIntegerToFloat", "object", "depth", "sizeToWrite", "requiredSize", "newSize", "newBuffer", "newBytes", "newView", "byteLength", "ext", "size", "bytes", "item", "keys", "count", "key", "value", "values", "Encoder_1", "defaultEncodeOptions", "encode", "value", "options", "exports", "prettyByte", "byte", "exports", "utf8_1", "DEFAULT_MAX_KEY_LENGTH", "DEFAULT_MAX_LENGTH_PER_KEY", "CachedKeyDecoder", "maxKeyLength", "maxLengthPerKey", "i", "byteLength", "bytes", "inputOffset", "records", "FIND_CHUNK", "record", "recordBytes", "j", "value", "cachedValue", "str", "slicedCopyOfBytes", "exports", "prettyByte_1", "ExtensionCodec_1", "int_1", "utf8_1", "typedArrays_1", "CachedKeyDecoder_1", "DecodeError_1", "isValidMapKeyType", "key", "keyType", "HEAD_BYTE_REQUIRED", "EMPTY_VIEW", "EMPTY_BYTES", "exports", "MORE_DATA", "sharedCachedKeyDecoder", "Decoder", "extensionCodec", "context", "maxStrLength", "maxBinLength", "maxArrayLength", "maxMapLength", "maxExtLength", "keyDecoder", "buffer", "remainingData", "newData", "newBuffer", "size", "posToShow", "view", "pos", "object", "stream", "decoded", "e", "headByte", "totalPos", "isArray", "isArrayHeaderRequired", "arrayItemsLeft", "DECODE", "byteLength", "stack", "state", "headerOffset", "offset", "_a", "headOffset", "extType", "data", "value", "Decoder_1", "exports", "decode", "buffer", "options", "decodeMulti", "isAsyncIterable", "object", "exports", "assertNonNull", "value", "asyncIterableFromStream", "stream", "reader", "done", "ensureAsyncIterable", "streamLike", "Decoder_1", "stream_1", "decode_1", "decodeAsync", "streamLike", "options", "stream", "exports", "decodeArrayStream", "decodeMultiStream", "decodeStream", "encode_1", "exports", "decode_1", "decodeAsync_1", "Decoder_1", "DecodeError_1", "Encoder_1", "ExtensionCodec_1", "ExtData_1", "timestamp_1", "require_XMLHttpRequest", "__commonJSMin", "exports", "module", "fs", "Url", "spawn", "XMLHttpRequest", "opts", "self", "http", "https", "request", "response", "settings", "disableHeaderCheck", "defaultHeaders", "headers", "forbiddenRequestHeaders", "forbiddenRequestMethods", "sendFlag", "errorFlag", "abortedFlag", "listeners", "isAllowedHttpHeader", "header", "isAllowedHttpMethod", "method", "url", "async", "user", "password", "setState", "state", "value", "result", "i", "name", "data", "ssl", "local", "host", "error", "e", "port", "uri", "authBuf", "agent", "options", "doRequest", "responseHandler", "resp", "newOptions", "errorHandler", "chunk", "socket", "contentFile", "syncFile", "execString", "syncProc", "statusText", "errorObj", "status", "event", "callback", "ev", "len", "fire", "WebRError", "msg", "WebRChannelError", "WebRError", "IN_NODE", "loadScript", "url", "resolve", "reject", "script", "e", "__toESM", "nodePathMod", "WebRError", "RTypeMap", "isWebRDataJs", "value", "isComplex", "Module", "dictEmFree", "dict", "key", "protect", "x", "Module", "handlePtr", "protectInc", "prot", "protectWithIndex", "pLoc", "unprotectIndex", "index", "reprotect", "unprotect", "n", "envPoke", "env", "sym", "value", "parseEvalBare", "code", "strings", "envObj", "REnvironment", "out", "RObject", "dictEmFree", "UnwindProtectException", "message", "cont", "safeEval", "call", "transferCache", "transfer", "obj", "transfers", "isUUID", "x", "UUID_LENGTH", "generateUUID", "result", "randomSegment", "pad", "handlePtr", "x", "isRObject", "assertRType", "obj", "type", "Module", "RTypeMap", "shelters", "keep", "shelter", "ptr", "isUUID", "destroy", "objs", "loc", "purge", "ptrs", "e", "newObjectFromData", "isWebRDataJs", "getRWorkerClass", "RNull", "RLogical", "RDouble", "RCharacter", "isComplex", "RComplex", "RRaw", "newObjectFromArray", "RDataFrame", "arr", "prot", "v", "_arr", "isConsistent", "a", "k", "isAtomic", "isAtomicType", "isRVectorAtomic", "call", "RCall", "RSymbol", "protectInc", "unprotect", "RObjectBase", "typeNumber", "typeName", "_RObject_instances", "slice_fn", "_RObject", "data", "__privateAdd", "prop", "parseEvalBare", "result", "protect", "RPairlist", "classCall", "values", "namesObj", "names", "name", "options", "depth", "__privateMethod", "path", "index", "protectWithIndex", "getter", "out", "reprotect", "unprotectIndex", "value", "idx", "valueObj", "assign", "safeEval", "props", "cur", "p", "i", "op", "RObject", "RString", "_RPairlist", "val", "toWebRData", "list", "next", "allowDuplicateKey", "allowEmptyKey", "entries", "keys", "u", "namesArray", "hasNames", "symbol", "_RCall", "RList", "_RList", "isSimpleObject", "_names", "classes", "entry", "j", "_RDataFrame", "hasArrays", "_values", "isConsistentLength", "listObj", "asDataFrame", "RFunction", "args", "_RString", "vmax", "REnvironment", "nProt", "sym", "vObj", "envPoke", "all", "sorted", "symbols", "RVectorAtomic", "kind", "newSetter", "ret", "elt", "m", "_newSetter", "_RLogical", "__privateGet", "naLogical", "_RInteger", "naInteger", "RInteger", "_RDouble", "naDouble", "_RComplex", "_RCharacter", "_RRaw", "jsObj", "typeClasses", "atomicRTypes", "initPersistentObjects", "promiseHandles", "out", "promise", "resolve", "reject", "replaceInObject", "obj", "test", "replacer", "replacerArgs", "isImageBitmap", "v", "RObjectBase", "k", "isImageBitmap", "value", "throwUnreachable", "context", "msg", "WebRError", "isSimpleObject", "isComplex", "isWebRDataJs", "RObjectBase", "encoder", "newRequest", "msg", "transferables", "newRequestResponseMessage", "generateUUID", "newResponse", "uuid", "resp", "transfer", "newSyncRequest", "data", "isWebRPayload", "value", "isWebRPayloadPtr", "import_msgpack", "decoder", "_scheduled", "_resolved", "_result", "_exception", "_syncGen", "SyncTask", "endpoint", "msg", "transfers", "__privateAdd", "_Syncifier", "__privateSet", "__privateGet", "done", "value", "sizeBuffer", "signalBuffer", "taskId", "dataBuffer", "acquireDataBuffer", "UUID_LENGTH", "syncMsg", "newSyncRequest", "id", "releaseDataBuffer", "size", "task", "eventBuffer", "handleEvents", "flag", "i", "bit", "result", "wokenTaskId", "wokenTask", "dataBuffers", "powerof2", "buffer", "setEventsHandler", "handler", "setEventBuffer", "WebSocketProxyFactory", "chan", "_a", "url", "protocols", "generateUUID", "data", "code", "reason", "ev", "IN_NODE", "type", "eventInitDict", "IN_NODE", "_ep", "_dispatch", "_eventBuffer", "_interrupt", "SharedBufferChannelWorker", "__privateAdd", "__privateSet", "IN_NODE", "setEventBuffer", "__privateGet", "setEventsHandler", "WebSocketProxyFactory", "msg", "transfer", "SyncTask", "Module", "args", "e", "_a", "_b", "_c", "_d", "response", "message", "interrupt", "dispatch", "IN_NODE", "_ep", "_parked", "_dispatch", "_promptDepth", "_asyncREPL", "PostMessageChannelWorker", "__privateAdd", "__privateSet", "msg", "str", "e", "__privateGet", "IN_NODE", "transfer", "WebRChannelError", "__privateWrapper", "_args", "args", "argc", "argv", "arg", "idx", "argvPtr", "argPtr", "dispatch", "transferables", "req", "newRequest", "resolve", "prom", "promiseHandles", "message", "uuid", "ChannelType", "newChannelWorker", "msg", "ChannelType", "SharedBufferChannelWorker", "PostMessageChannelWorker", "WebRChannelError", "zero$1", "buf", "len", "STORED_BLOCK", "STATIC_TREES", "DYN_TREES", "MIN_MATCH$1", "MAX_MATCH$1", "LENGTH_CODES$1", "LITERALS$1", "L_CODES$1", "D_CODES$1", "BL_CODES$1", "HEAP_SIZE$1", "MAX_BITS$1", "Buf_size", "MAX_BL_BITS", "END_BLOCK", "REP_3_6", "REPZ_3_10", "REPZ_11_138", "extra_lbits", "extra_dbits", "extra_blbits", "bl_order", "DIST_CODE_LEN", "static_ltree", "static_dtree", "_dist_code", "_length_code", "base_length", "base_dist", "StaticTreeDesc", "static_tree", "extra_bits", "extra_base", "elems", "max_length", "static_l_desc", "static_d_desc", "static_bl_desc", "TreeDesc", "dyn_tree", "stat_desc", "d_code", "dist", "put_short", "s", "w", "send_bits", "value", "length", "send_code", "c", "tree", "bi_reverse", "code", "res", "bi_flush", "gen_bitlen", "desc", "max_code", "stree", "has_stree", "extra", "base", "h", "n", "m", "bits", "xbits", "f", "overflow", "gen_codes", "bl_count", "next_code", "tr_static_init", "init_block", "bi_windup", "smaller", "depth", "_n2", "_m2", "pqdownheap", "k", "v", "j", "compress_block", "ltree", "dtree", "lc", "sx", "build_tree", "node", "scan_tree", "prevlen", "curlen", "nextlen", "count", "max_count", "min_count", "send_tree", "build_bl_tree", "max_blindex", "send_all_trees", "lcodes", "dcodes", "blcodes", "rank", "detect_data_type", "block_mask", "static_init_done", "_tr_init$1", "_tr_stored_block$1", "stored_len", "last", "_tr_align$1", "_tr_flush_block$1", "opt_lenb", "static_lenb", "_tr_tally$1", "_tr_init_1", "_tr_stored_block_1", "_tr_flush_block_1", "_tr_tally_1", "_tr_align_1", "trees", "adler32", "adler", "pos", "s1", "s2", "adler32_1", "makeTable", "table", "crcTable", "crc32", "crc", "t", "end", "crc32_1", "messages", "constants$2", "_tr_init", "_tr_stored_block", "_tr_flush_block", "_tr_tally", "_tr_align", "Z_NO_FLUSH$2", "Z_PARTIAL_FLUSH", "Z_FULL_FLUSH$1", "Z_FINISH$3", "Z_BLOCK$1", "Z_OK$3", "Z_STREAM_END$3", "Z_STREAM_ERROR$2", "Z_DATA_ERROR$2", "Z_BUF_ERROR$1", "Z_DEFAULT_COMPRESSION$1", "Z_FILTERED", "Z_HUFFMAN_ONLY", "Z_RLE", "Z_FIXED", "Z_DEFAULT_STRATEGY$1", "Z_UNKNOWN", "Z_DEFLATED$2", "MAX_MEM_LEVEL", "MAX_WBITS$1", "DEF_MEM_LEVEL", "LENGTH_CODES", "LITERALS", "L_CODES", "D_CODES", "BL_CODES", "HEAP_SIZE", "MAX_BITS", "MIN_MATCH", "MAX_MATCH", "MIN_LOOKAHEAD", "PRESET_DICT", "INIT_STATE", "GZIP_STATE", "EXTRA_STATE", "NAME_STATE", "COMMENT_STATE", "HCRC_STATE", "BUSY_STATE", "FINISH_STATE", "BS_NEED_MORE", "BS_BLOCK_DONE", "BS_FINISH_STARTED", "BS_FINISH_DONE", "OS_CODE", "err", "strm", "errorCode", "zero", "slide_hash", "p", "wsize", "HASH_ZLIB", "prev", "data", "HASH", "flush_pending", "flush_block_only", "put_byte", "b", "putShortMSB", "read_buf", "start", "size", "longest_match", "cur_match", "chain_length", "scan", "match", "best_len", "nice_match", "limit", "_win", "wmask", "strend", "scan_end1", "scan_end", "fill_window", "_w_size", "more", "str", "deflate_stored", "flush", "min_block", "left", "have", "used", "deflate_fast", "hash_head", "bflush", "deflate_slow", "max_insert", "deflate_rle", "deflate_huff", "Config", "good_length", "max_lazy", "nice_length", "max_chain", "func", "configuration_table", "lm_init", "DeflateState", "deflateStateCheck", "deflateResetKeep", "deflateReset", "ret", "deflateSetHeader", "head", "deflateInit2", "level", "method", "windowBits", "memLevel", "strategy", "wrap", "deflateInit", "deflate$2", "old_flush", "header", "level_flags", "beg", "copy", "gzhead_extra", "val", "bstate", "deflateEnd", "status", "deflateSetDictionary", "dictionary", "dictLength", "tmpDict", "avail", "next", "input", "deflateInit_1", "deflateInit2_1", "deflateReset_1", "deflateResetKeep_1", "deflateSetHeader_1", "deflate_2$1", "deflateEnd_1", "deflateSetDictionary_1", "deflateInfo", "deflate_1$2", "_has", "obj", "key", "assign", "sources", "source", "flattenChunks", "chunks", "i", "l", "result", "chunk", "common", "STR_APPLY_UIA_OK", "_utf8len", "q", "string2buf", "c2", "m_pos", "str_len", "buf_len", "buf2binstring", "buf2string", "max", "out", "utf16buf", "c_len", "utf8border", "strings", "ZStream", "zstream", "toString$1", "Z_NO_FLUSH$1", "Z_SYNC_FLUSH", "Z_FULL_FLUSH", "Z_FINISH$2", "Z_OK$2", "Z_STREAM_END$2", "Z_DEFAULT_COMPRESSION", "Z_DEFAULT_STRATEGY", "Z_DEFLATED$1", "Deflate$1", "options", "opt", "dict", "flush_mode", "chunkSize", "_flush_mode", "deflate$1", "deflator", "deflateRaw$1", "gzip$1", "Deflate_1$1", "deflate_2", "deflateRaw_1$1", "gzip_1$1", "constants$1", "deflate_1$1", "BAD$1", "TYPE$1", "inffast", "_in", "_out", "dmax", "whave", "wnext", "s_window", "hold", "lcode", "dcode", "lmask", "dmask", "here", "op", "from", "from_source", "output", "state", "top", "dolen", "dodist", "MAXBITS", "ENOUGH_LENS$1", "ENOUGH_DISTS$1", "CODES$1", "LENS$1", "DISTS$1", "lbase", "lext", "dbase", "dext", "inflate_table", "type", "lens", "lens_index", "codes", "table_index", "work", "opts", "sym", "min", "root", "curr", "drop", "huff", "incr", "fill", "low", "mask", "offs", "here_bits", "here_op", "here_val", "inftrees", "CODES", "LENS", "DISTS", "Z_FINISH$1", "Z_BLOCK", "Z_TREES", "Z_OK$1", "Z_STREAM_END$1", "Z_NEED_DICT$1", "Z_STREAM_ERROR$1", "Z_DATA_ERROR$1", "Z_MEM_ERROR$1", "Z_BUF_ERROR", "Z_DEFLATED", "HEAD", "FLAGS", "TIME", "OS", "EXLEN", "EXTRA", "NAME", "COMMENT", "HCRC", "DICTID", "DICT", "TYPE", "TYPEDO", "STORED", "COPY_", "COPY", "TABLE", "LENLENS", "CODELENS", "LEN_", "LEN", "LENEXT", "DIST", "DISTEXT", "MATCH", "LIT", "CHECK", "LENGTH", "DONE", "BAD", "MEM", "SYNC", "ENOUGH_LENS", "ENOUGH_DISTS", "MAX_WBITS", "DEF_WBITS", "zswap32", "InflateState", "inflateStateCheck", "inflateResetKeep", "inflateReset", "inflateReset2", "inflateInit2", "inflateInit", "virgin", "lenfix", "distfix", "fixedtables", "updatewindow", "src", "inflate$2", "put", "last_bits", "last_op", "last_val", "hbuf", "order", "inf_leave", "inflateEnd", "inflateGetHeader", "inflateSetDictionary", "dictid", "inflateReset_1", "inflateReset2_1", "inflateResetKeep_1", "inflateInit_1", "inflateInit2_1", "inflate_2$1", "inflateEnd_1", "inflateGetHeader_1", "inflateSetDictionary_1", "inflateInfo", "inflate_1$2", "GZheader", "gzheader", "toString", "Z_NO_FLUSH", "Z_FINISH", "Z_OK", "Z_STREAM_END", "Z_NEED_DICT", "Z_STREAM_ERROR", "Z_DATA_ERROR", "Z_MEM_ERROR", "Inflate$1", "last_avail_out", "next_out_utf8", "tail", "utf8str", "inflate$1", "inflator", "inflateRaw$1", "Inflate_1$1", "inflate_2", "inflateRaw_1$1", "ungzip$1", "constants", "inflate_1$1", "Deflate", "deflate", "deflateRaw", "gzip", "Inflate", "inflate", "inflateRaw", "ungzip", "ungzip_1", "ungzip", "instanceOfStream", "nodeOrStream", "DRIVE_SEPARATOR", "encoder", "decoder", "flagNeedsWrite", "DriveFSEmscriptenStreamOps", "fs", "stream", "path", "flags", "parsedFlags", "needsWrite", "buffer", "offset", "length", "position", "size", "_a", "oldData", "whence", "DriveFSEmscriptenNodeOps", "nodeOrStream", "instanceOfStream", "value", "node", "attr", "key", "file", "parent", "name", "result", "mode", "dev", "newDir", "newName", "oldNode", "newDirNode", "oldPath", "ContentsAPI", "options", "newPath", "dirlist", "response", "serializedContent", "format", "binString", "len", "data", "i", "binary", "stats", "DRIVE_SEPARATOR", "ServiceWorkerContentsAPI", "xhr", "requestWithBrowsingContextId", "e", "DriveFS", "mount", "FS", "parts", "currentNode", "mountFS", "type", "opts", "mountpoint", "Module", "pkg", "mountImageData", "mountDriveFS", "options", "baseUrl", "fs", "DriveFS", "mountImageUrl", "url", "dataResp", "data", "metadata", "decodeVFSArchive", "urlBase", "metaResp", "ext", "ungzip_1", "mountImagePath", "path", "buffer", "pathBase", "IN_NODE", "buf", "WORKERFS", "chunk", "f", "contents", "start", "end", "sub", "parts", "file", "dir", "dirNode", "index", "getArchiveMetadata", "findArchiveMetadata", "bytes", "view", "magic", "block", "len", "decoder", "offset", "header", "byte", "filename", "initialised", "resolved", "chan", "RCall", "RCharacter", "RComplex", "RDataFrame", "RDouble", "REnvironment", "RInteger", "RList", "RLogical", "RObject", "RPairlist", "RRaw", "RString", "RSymbol", "destroy", "getRWorkerClass", "initPersistentObjects", "isRObject", "keep", "objs", "purge", "shelters", "onWorkerMessage", "msg", "messageInit", "newChannelWorker", "init", "IN_NODE", "ev", "_config", "dispatch", "req", "reqMsg", "write", "resp", "transferables", "newResponse", "info", "Module", "data", "copyFSNode", "node", "type", "mountpoint", "ChannelType", "options", "mountDriveFS", "fs", "err", "reqData", "out", "id", "generateUUID", "size", "shelter", "prot", "capture", "captureR", "protectInc", "result", "n", "output", "i", "payload", "resultPayload", "unprotect", "evalR", "protect", "throwType", "newRObject", "obj", "callRObjectMethod", "isWebRPayloadPtr", "res", "pkgs", "repos", "r", "_e", "e", "errorObj", "UnwindProtectException", "throwUnreachable", "retObj", "name", "downloadFileContent", "URL", "headers", "request", "header", "splitHeader", "responseText", "status", "args", "objType", "RClass", "_args", "replaceInObject", "t", "prop", "fn", "arg", "expr", "_a", "_options", "devEnvObj", "envObj", "parseEvalBare", "tPtr", "fPtr", "qu", "exprObj", "call", "safeEval", "error", "source", "message", "images", "plots", "idx", "newDev", "_b", "outputType", "config", "env", "fmt", "mountFS", "prompt", "ptr", "title", "code", "await", "response", "delay", "path", "mountImageUrl", "mountImagePath", "text", "scriptSrc", "loadScript"]
}
