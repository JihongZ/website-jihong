---
title: 'Tips about Git and Github'
author: 'Jihong Zhang'
date: 'Mar 10 2024'
categories:
  - Git
  - Github
execute: 
  echo: fenced
  eval: false
format: 
  html: 
    code-summary: 'Code'
    code-fold: false
    code-line-numbers: false
---

#### Scenario: My local changes are ahead of the remote but I want to discard those changes.

This happens when I want to pull the remote repo to local but I have some random changes at local. Those random changes should be discarded but using `git pull` makes those changes ahead. Thus, I have to restore to previous commit to align with previous commit.

In following code, I type `git reset` and `tab` key which will list all recent commits. `f17c6d9` is the commit I'm gonna go.

-   `git reset f17c6d9` can reset HEAD to the target comit in history, which make local changes as **unstaged changes**

-   To discard unstaged changes, use `git restore .`

```{.bash}
➜  website-jihong git:(main) git reset            
FETCH_HEAD     HEAD           ORIG_HEAD      main           office         origin/main    origin/office
d636b58  -- [HEAD]    add lecture08 (7 minutes ago)
66dde99  -- [HEAD^]   add lecture08 (9 minutes ago)
f17c6d9  -- [HEAD^^]  adjust sidebar to include previous posts (66 minutes ago)
1211a8e  -- [HEAD~3]  add one new note (14 hours ago)
e4e27b7  -- [HEAD~4]  revide sidebar to include lec08 in quarto.yml (2 days ago)
e479890  -- [HEAD~5]  finish lecture08 (2 days ago)
5f19afd  -- [HEAD~6]  add updates to lecture 08 (2 days ago)
5b90ec6  -- [HEAD~7]  Merge remote-tracking branch 'origin/main' (3 days ago)
d7a9508  -- [HEAD~8]  local changes (3 days ago)
fb69016  -- [fb69016] update lecture08 (4 days ago)
c4f4e29  -- [HEAD~9]  add .rdb in .gitignore (6 days ago)
8feff97  -- [HEAD~10] revise BGGM note (6 days ago)
8b98ac9  -- [HEAD~11] add note of BGGM (6 days ago)
119c64d  -- [HEAD~12] add video link for lecture 4 and 7 (6 days ago)
8417f4a  -- [HEAD~13] revise Lecture07.qmd (7 days ago)
1537f56  -- [HEAD~14] add lecture07 slide11 (7 days ago)
b0bd066  -- [HEAD~15] add keymap doc for iTerm2 (7 days ago)
ff6c8c7  -- [HEAD~16] change color bg and left border (8 days ago)
af18b92  -- [HEAD~17] adjust link and other elements bg-color (8 days ago)
3370b97  -- [HEAD~18] revert back to original giscus setting (8 days ago)
➜  website-jihong git:(main) git reset f17c6d9
Unstaged changes after reset:
M       posts/2024-01-12-syllabus-adv-multivariate-esrm-6553/Lecture08/Lecture08.qmd
➜  website-jihong git:(main) ✗ git restore .    
➜  website-jihong git:(main) 
```

For the future pull while ignore local changes, see this stackoverflow [post](https://stackoverflow.com/questions/4157189/how-to-git-pull-while-ignoring-local-changes). There are two methods:

-   Method I:

    -   This even works when local changes have already been staged and comitted.

```{.bash}
## (1) First fetch all changes:
$ git fetch --all
## (2) Then reset the main:
$ git reset --hard origin/main
## (3) Pull/update:
$ git pull
```

-   Method II:

    -   Use this when you feel like your local changes still useful and **DO NOT** want to throw them away. This keeps the local changes hidden, but after pulling the remote to local, you pop local changes up afterwards.

```{.bash}
$ git stash
$ git pull
$ git stash pop
```
