---
title: "Note: Interactive Data Visualization for R"
author: Jihong Zhang <a href="https://orcid.org/0000-0003-2820-3734"><img src="/images/ORCID-iD_icon_24x24.png" alt=""/></a>
title-block-banner: false
date: "2025-03-16"
date-modified: "`{r} Sys.Date()`"
execute: 
  message: false
  warning: false  
format: html
bibliography: references.bib
---

::: objectives
## Overview {.unnumbered}

The interactive web app development in R requires multiple relevant skillsets: HTML, CSS, Javascript, R, and Shiny etc. This is a reading note covering the following books:

1.  {[Javascript for R](https://book.javascript-for-r.com/widgets-intro-intro)} (JFR) by John Coene (2021-04-19).
2.  {[Interactive web-based data visualization with R, plotly, and shiny](https://plotly-r.com)} (IVRPS) by Carson Sievert (2019-12-19).
3.  {[Outstanding User Interfaces with Shiny](https://unleash-shiny.rinterface.com/)} (OUIS) by David Granjon (2022-03-14).
    -   Understand how Shiny deals with the classic web development standards and what are the main differences.
    -   Manipulate **HTML tags** from R to create custom layouts.
    -   Harness the power of **CSS and JavaScript** to quickly design apps standing out from the pack.
    -   Discover the steps to import and convert existing web frameworks like Bootstrap 4 and Framework7.
    -   Learn how Shiny internally deals with inputs.
    -   Learn more about less-documented Shiny mechanisms (websockets, sessions, …).

```{r}
#| code-fold: true

if (!require("memer")) {
  devtools::install_github("sctyner/memer") 
  library(memer)
}else{
  library(memer) # devtools::install_github("sctyner/memer") 
}

library(plotly)
meme_get("DistractedBf") %>% 
  meme_text_distbf("Javascript", "data scientists", "ggplot2")
```
:::

## Relevant resources

1.  [htmlwidgets gallery](https://gallery.htmlwidgets.org/)
2.  [htmltools](https://github.com/rstudio/htmltools) package
    -   [Chapter 2: Manipulate HTML tags from R with {htmltools}](https://unleash-shiny.rinterface.com/htmltools-overview) in Outstanding User Interfaces with Shiny

## Observable JS

There are two ways to publish Observable Javascript with Quarto:

1.  Write OJS code in `{ojs}` cells in the Quarto document (see more [details](https://quarto.org/docs/interactive/ojs/)).
2.  Write code using ObservableHQ notebook and share embedded output

::: maccaution
Either way has pros and cons: First method can make use of various R packages for data sciences (i.e., `tidyverse`) if you are R users, it also has seamlessly embedded into `.qmd` file. However, `{ojs}` cells do not have autocompletion nor allow you to execute cells without rendering the whole Quarto markdown document. Second method, on the other hand, allows you to write syntax-highlighted OJS code with autocompletion and execute the cells lively, but you have to use Javascript libraries to do data analysis (i.e., [Aquero](https://idl.uw.edu/arquero/api/)).

**A mixing method** combining the goods of both methods is performing the data analysis in R, export it to CSV locally or into the cloud (e.g., Google), then using the file attachment function for reading data in the ObservableHQ. Alternatively, if you are not mentally attached to Quarto markdown, the Observable [Framework](https://observablehq.com/framework/getting-started) is another option of standalone data visualization project.
:::

```{ojs}
//| code-summary: "Method 1: {ojs} cell"
//| code-fold: true

Plot.rectY({length: 100000}, 
           Plot.binX({y: "count"}, {x: d3.randomNormal()})
          ).plot()

```

Since ObservableHQ is likely long-term maintained, I prefer the second method.

To embed [ObservableHQ](https://observablehq.com/) notebook cells into Quarto, make sure your ObservableHQ notebook is public, then take the following steps in ObservableHQ to have access to a sharable url of one cell:

[⋮]{.redcolor} \> `Export` \> `Embed Cells`.

::: macwindow
Method 2: One example of embedded cell is like the following, note that you may need to upgrade to the Pro version to remove attribution banner.

```{r}
htmltools::tags$iframe(
  src = "https://observablehq.com/embed/c03db5cde95f513e?cells=chart", 
  scrolling = "no", 
  seamless = "seamless",
  frameBorder = "0",
  width="100%", 
  height="369"
)
```
:::

::: macwindow
**Dashboard with javascript**

If you prefer construct the dashboard with javascript locally and use your perfered language (such as R and Python) for data analysis, the Observable Framework offers another option to deploy your javascript+R dashboard. See here for detailed [code](https://observablehq.com/framework/getting-started#next-steps) for "get started of local development". Following is the toy example I created (Github [link](https://github.com/JihongZ/hello-framework)).

```{r}
htmltools::tags$iframe(
  src="https://jihongz.observablehq.cloud/hello-framework",
  scrolling = "no", 
  seamless = "seamless",
  frameborder="0",
  width="100%", 
  height="1000",
  title="Hello World Observable Framework"
)
```

<!-- ::: {.column-screen} -->

<!-- <iframe width="100%" height="1000" frameborder="0"   title="Hello World Observable Framework"></iframe> -->

<!-- ::: -->
:::

{{< include JFR_Chapter3/JFR_Chapter3.qmd >}}

{{< include JFR_Chapter5/JFR_Chapter5.qmd >}}
