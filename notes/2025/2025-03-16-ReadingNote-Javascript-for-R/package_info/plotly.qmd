---
title: "plotly package"
author: Jihong Zhang
date: "2025-03-16"
date-modified: "`{r} Sys.Date()`"
categories:
  - htmltools
  - htmlwidgets
  - Javascript
execute: 
  warning: false
  message: false
fig-cap-location: top  
toc-depth: 3
toc-expand: true
toc-location: left
sidebar: id-javascript-in-R  
format: html
---

# plotly package

-   This section also includes [Chapter 2 - Overview](https://plotly-r.com/overview) in [Book: Interactive web-based data visualization with R, plotly, and shiny](https://plotly-r.com/), which has more details about `plotly` package.

## Color Schema

```{r}
shen_qing = "#212A54" # 深青色
qian_qing = "#234C73" # 浅青色
cui_qing = "#263E47" # 翠青色
dan_qing = "#F2F8FF" # 淡青色
hutao_hong = "#793328" # 胡桃红
dan_feng = "#FFF8F0" # 淡粉色
tao_you = "#C0BAB6" # 陶釉色
```


------------------------------------------------------------------------

## IVRPS Chapter 2: Basic Information

`plotly` R package is powered by the Javascript library *plotly.js*. A `plotly` object is initialized with a `plot_ly()` function.

```{r}
library(plotly)
library(ggplot2)
head(diamonds)
```

-   `plot_ly()` tries to find a sensible geometric representation of that information for

-   Note that column name is formatted with `~Name` in `plot_ly()`, which is different from `ggplot2` package `Name` or `vars(Name)`.

```{r}
#| layout-ncol: 1
#| fig-cap:
#|   - "Plot 1"
#|   - "Plot 2"
#|   - "Plot 3"
plot_ly(diamonds, x=~cut)
plot_ly(diamonds, x=~cut, y=~clarity, colors="Accent")
plot_ly(diamonds, x=~cut, color=~clarity, colors="Accent")
```

-   To specify the color directly, use `I()` function to declar the color value as "asis".

```{r}
plot_ly(diamonds, x=~cut, 
        color=I("tomato"), 
        stroke=I("royalblue"), 
        span = I(3)) |> 
layout(title = "Histogram with I() function")
```

### Translate ggplot2 to plotly

In @fig-plotly-1, `ggplotly()` can translate a `ggplot2` object into a plotly object.

```{r}
#| label: fig-plotly-1
p <- ggplot(diamonds, aes(x=log(carat), y=log(price))) + 
  geom_hex(bins = 100)
ggplotly(p)
```

### `add_` as layers and `|>` as connection

Plotly implements geoms in a similar fashion as ggplot2, functions that start in add\_ add a layer to the plot (e.g.: add_lines, add_bars), making it easy to combine series into a single chart, as in @fig-plotly-2.

```{r}
#| label: fig-plotly-2
#| fig-cap: "Plotly with add_ and |> as connection"
plot_ly(mtcars, x=~disp) |> 
  add_markers(y=~mpg, text = rownames(mtcars)) |> 
  add_lines(y=~fitted(loess(mpg ~ disp)))
```

### Data in plotly.js

![A diagram of what happens when you print a plotly graph](https://plotly-r.com/images/printing.svg)

-   Use `plotly_json()` to see the JSON representation of the plotly object.

-   Use `jasonlite` to quickly check jason elements. Check out the [package information](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html).

```{r}
library(jsonlite)
library(tidyverse)
p <- plot_ly(diamonds, x = ~cut, color = ~clarity, colors = "Accent")
p_jason <- plotly_json(p, FALSE, pretty = TRUE) |> 
  fromJSON() 
colnames(p_jason$data)
```

### Work directly with plotly.js

`add_trace(type = "scatter", mode = "xxx")` function allows you to work directly with plotly.js. This function is a low-level interface to plotly.js, compared to other functions like `add_markers`.

```{r}
set.seed(99)
plot_ly() |> 
 add_trace(
   type = "scatter",
   mode = "markers+lines+text",
   x = 4:6, 
   y = 4:6,
   text = replicate(3, praise::praise("You are ${adjective}! 🙌")),
   textposition = "right",
   hoverinfo = "text",
   textfont = list(family = "MiSans", size = 16)
 ) |> 
 layout(xaxis = list(range = c(3, 8)))
```

------------------------------------------------------------------------

## IVRPS Chapter 3: Scattered Trace

The trace is general layer in plot.js, which can be specified with a type. The trace layer with type scatter is for drawing geometries like points, lines, text, and polygons.

### `add_lines` and `add_paths`

-   `add_lines` ensures lines are drawn according to the ordering of x, which is desirable for a time series plotting. The figure below starts with the lowest value of x ---`1967-07-01` \| `12.6`.

-   `add_paths` draws lines in the order of the data frame (row ordering). As shown in figure below, points starts with the point in the first row---`2005-07-01` \| `2.2`--- then `2005-08-01` \| `2.7`.

-   If x is sorted from lowest to highest, `add_paths` with be equivalent to `add_lines`.

```{r}
#| code-summary: "data"
#| code-fold: true
library(kableExtra)
data(economics, package = "ggplot2")

economics |> 
  select(date, psavert) |> 
  arrange(psavert) |> 
  head(5) |> 
  kable()
```

```{r}
#| code-summary: "add_paths"
#| code-fold: true
p <- economics |> 
  arrange(psavert) |> 
  plot_ly(x=~date, y=~psavert)

add_paths(p)
```

```{r}
#| code-summary: "add_lines"
#| code-fold: true

add_lines(p)
```

```{r}
#| code-summary: "add_paths with sorted x values"
#| code-fold: true
economics |> 
  arrange(date) |> 
  plot_ly(x=~date, y=~psavert, color = I("tomato")) |> 
  add_paths()
```

### Attributes: Group data into sub-gemometry

-   Some attributes include color, alpha, symbol, stroke, span, size, linetype.

```{r}
library(lubridate)
econ <- economics |> 
  mutate(yr = year(date), mnth = month(date))

plot_ly(econ, x=~mnth, y=~uempmed) |> 
  add_lines(color=~ordered(yr), colors="Accent")
```

Scatter traces can be specified with a mode of `markers` (`add_markers` with a numeric x and y axis). This results in scatterplot.

1.  Use `alpha` to adjust the transparancy of scatter points. It can combat with overplotting (points with exactly same x and y values). A location with more points shows less transparent.

```{r}
subplot(
  plot_ly(mpg, x=~cty, y=~hwy, name = "default"),
  plot_ly(mpg, x=~cty, y=~hwy) |> 
    add_markers(alpha = .2, name = "alpha")
)
```

2.  Use `color` and `colorbar()` to produce color trace and color schema. The default colorscale is `viridis`.

```{r}
subplot(
  plot_ly(mpg, x=~cty, y=~hwy) |> 
    add_markers(alpha = .2, color=~cyl, showlegend = FALSE) |> 
    colorbar(title = "Viridis"),
  plot_ly(mpg, x=~cty, y=~hwy) |> 
    add_markers(alpha = .2, color=~factor(cyl), showlegend = FALSE) 
)
```

3.  Use `colors=` argument to alter the default color scale. (similar to `ggplot2::scale_color_brewer()`). It can be one of the following three types:

    -   color palette name (e.g., check out `RColorBrewer::brewer.pal.info`)
    -   a munually specified vector of colors `c("#132B43", "#56B1F7")`
    -   a color interpolation function like `colorRamp()` or `scales::colour_ramp()`, i.e., `colorRamp(c("red", "white", "blue"))`

```{r}
rownames(RColorBrewer::brewer.pal.info)
```

### `color=` and `stroke=`

The `color` argument is meant to control the ‘fill-color’ of a geometric object, whereas `stroke` is meant to control the ‘outline-color’ of a geometric object.

```{r}
p <- plot_ly(mpg, x=~cty, y=~hwy)
subplot(
  p |> 
    add_markers(alpha = .2, color=~cyl, showlegend = FALSE), 
  p |> 
    add_markers(color=I("black"), stroke=~cyl, showlegend = FALSE) 
)
```

4.  Use `symbol` argument to map data values to different shape.

-   Use `symbols` to specify certain visual values: "circle", "diamond" etc.

```{r}
p <- plot_ly(mpg, x=~cty, y=~hwy, alpha = .3) 

subplot(
  p |> add_markers(symbol =~factor(cyl), color=I("black"),
                   symbols = 9:12),
  p |> add_markers(symbol =~factor(cyl), color=I("black"), 
                   symbols = c("triangle-up", "diamond", "circle"))
)
```

5.  Use `span` to control width of the stroke (outline).

```{r}
subplot(
  plot_ly(mpg, x=~cty, y=~hwy, alpha=.5) |> 
    add_markers(symbol=I(18), stroke=I("black"), span=I(1)),
  plot_ly(mpg, x=~cty, y=~hwy, alpha=.5) |> 
    add_markers(symbol=I(18), stroke=I("black"), span=I(3))
)
```

6.  Use `size` to control the area of markers.

-   Use `sizes` to control the min and max values of size in pixles.

```{r}
p <- plot_ly(mpg, x=~cty, y=~hwy, alpha = .3)

subplot(
  p |> add_markers(size=I(30), name="fixed"),
  p |> add_markers(size=~cyl, sizes = c(1, 100), name="custom")
)
```

7.  Use `linetype` to control line types

```{r}
econ <- economics |> 
  mutate(yr = year(date), mnth = month(date)) |> 
  filter(yr %in% 1967:1972) 

plot_ly(data = econ, x=~mnth, y=~uempmed, linetype =~factor(yr), size = I(3)) |> 
  add_lines()
```


## IVRPS Chapter 5: Bars and Histogram

### `add_bars()` and `add_histogram()`

Use `add_bars()` and `add_histogram()` to wrap the bar plot and the histogram plot. The bar plots requires the height information of bars (`x` and `y`), while the histogram requires only `x` variables.

::: rmdnote
If the count is calculated in R (using `count()` for categorical data and `hist(plot=FALSE)` for continous data), `add_bars` is faster than `add_histogram` in terms of page load time.
:::

```{r}
subplot(
  plot_ly(data = diamonds, x=~price) |> add_histogram(name="Histogram", color=I(shen_qing)),
  plot_ly(data = diamonds, x=~price, y=~carat) |> add_bars(name="Bar", color=I(hutao_hong))
)
```

### Multiple subplots: `lapply` + `subplot`

In following code, `group_split()` is similar to `base::split()`.

`one_plot` function allows to plot a histogram with x-axis as "price". `add_annotations()` adds names of subplots on the top.

```{r}
library(tidyverse)

one_plot <- function(d) {
  plot_ly(d, x = ~price) %>%
    add_annotations(
      ~unique(clarity), x = 0.5, y = 1, 
      xref = "paper", yref = "paper", showarrow = FALSE
    )
}

diamonds |> 
  group_split(clarity) |> 
  lapply(one_plot) |> 
  subplot(nrows = 2, shareX = TRUE, titleX = FALSE) |> 
  hide_legend()
```

### `layout(barmode = "stack")`: stacked barplot

```{r}
subplot(
  plot_ly(diamonds, x=~cut, color=~clarity) |> 
    add_histogram() |> 
    layout(barmode="stack") |> 
    hide_guides(),
  
  diamonds |> 
    group_by(cut, clarity) |> 
    count() |> 
    group_by(cut) |> 
    mutate(prop = n / sum(n)) |> 
    plot_ly(x=~cut, color=~clarity, y=~prop) |> 
    add_bars() |> 
    layout(barmode="stack") 
)
```

## IVRPS Chapter 8: 3D Charts

### Add `z` attribute to create 3D

By default, with z-axis added, `plot_ly` will use the scatter plot. Use `add_markers()` to specify 3D scatter plot.

```{r}
p_3d <- plot_ly(data = mpg, x=~cty, y=~hwy, z=~cyl, color=~cyl) |> 
  add_markers(alpha = .4, stroke = I("black"))
p_3d
```

### `layout(scene)`: set up axis for 3D chart

Below plot set up titles for x/y/z-axis inside `scene`. Use R list object to specify multiple attributes in `layout`.

```{r}
p_3d |> 
  layout(
    scene = list(
      xaxis = list(title = "MPG city"),
      yaxis = list(title = "MPG highway"),
      zaxis = list(title = "Number of cylinders")
    )
  )
```

### `add_surface()`: 3d surface

For 3D surface, z-axis is a continuous surface (a matrix) with the same ordering with x and y. plot.js will automatically interpolate the gaps among points to create the surface.

For example, `datasets::volcano` is a matrix with 87 rows and 61 columns, with rows corresponding to grid lines running east to west and columns to south to north. So the height of volcano will be the z-axis.

```{r}
x <- seq_len(nrow(volcano)) + 100
y <- seq_len(ncol(volcano)) + 500

plot_ly() |> add_surface(x=~x, y=~y, z=~volcano)
```

## IVRPS Chapter 10: Share HTML to others

###  `savehtml()` and `saveWidget()` to save contents


`htmlwidgets::saveWidget()` will save self-contained html files (including all html/css dependencies) by default. It will has larger file size but others can directly open and review it. You can save dependency into separated folder by specifying  `selfcontained = F`. By doing that, it will be equivalent to `htmltools::savehtml()`. For example, see the following example code:


```{r}
#| eval: false
library(htmlwidgets)
p <- plot_ly(x = rnorm(100))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
saveWidget(p, "p2.html", selfcontained = F, libdir = "lib")
```

Then, to embed a external html file into Quarto or Bookdown, use `htmltools::tags$iframe`

```{r}
#| eval: false
htmltools::tags$iframe(
  src = "p1.html", 
  scrolling = "no", 
  seamless = "seamless",
  frameBorder = "0"
)
```

