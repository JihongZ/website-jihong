{
  "hash": "788ac754d2f2a37f8dc9a4671e2c0213",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Moving My Website to Quarto\"\nauthor: \"Jihong Zhang\"\ndate: \"06/25/2023\"\ndraft: false\ncategories:\n  - quarto\nformat:\n  html:\n    toc: true\n    code-fold: true # hide code by default\n    html-math-method: katex\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n> Since June 25, 2023, I start to move my website from hugo/rmarkdown/blogdown/wowchemy to quarto website. It is difficult to explain why I spend so much time on that. Perhaps because some reasons same as other bloggers:\n>\n> \\(1\\) Quarto is the next generation of rmarkdown.\n>\n> \\(2\\) Quarto is independent with R or Rstudio.\n>\n> \\(3\\) Quarto has a clean file tree for website building.\n>\n> \\(4\\) Quarto has cleaner command than hugo (i.e., \\`quarto publish netlify\\` for publishing website etc.).\n>\n> This blog serves as a note how I customize quarto website bit by bit. It will not be a comprehensive tutorial (much online resources exists) but contain be some tricks.\n\n## Useful links\n\n1.  Quarto official documentation is always the best place to starts with.\n\n[![](quarto.png){fig-align=\"center\"}](https://quarto.org)\n\n2.  Nicola Rennie's blog is very inspiring. Nice font setting and background. I feel like [Hugo ApÃ©ro](https://github.com/hugo-apero/) is the best hugo theme in the market.\n\n    [![](nrennie.png){width=\"320\" height=\"200\"}](https://nrennie.rbind.io)\n\n3.  Yihui's blog. As the creator of blogdown, Yihui talked about why not transfer to Quarto :P I am a old player of hugo/blogdown, but I am not good at customizing the website from the scratch. Thus, quarto suits my needs very well. For those who is very experienced at JS, hugo is still a better choice.\n\n    [![](yihui.png){width=\"320\" height=\"200\"}](https://yihui.org/en/2022/04/quarto-r-markdown/#should-you-switch)\n\n4.  Frank Harrel's blog: R workflow.\n\n    [![](FrankHarrel.png){width=\"320\" height=\"200\"}](https://www.fharrell.com/post/rflow/)\n\n## Tricks of Quarto\n\n### Code highlighting\n\nThe very first trick is using `format > html > code-fold: true` settings in YAML metadata in *\\_quarto.yml* (global) or *.qmd* (local) to hide the code block as `|> Code`, like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kableExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'kableExtra' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nkbl(head(iris)) |> \n  kable_styling(\n    html_font = \"Ysabeau Office\",\n    font_size = 11, full_width = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 11px; font-family: Ysabeau Office; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Sepal.Length </th>\n   <th style=\"text-align:right;\"> Sepal.Width </th>\n   <th style=\"text-align:right;\"> Petal.Length </th>\n   <th style=\"text-align:right;\"> Petal.Width </th>\n   <th style=\"text-align:left;\"> Species </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 5.1 </td>\n   <td style=\"text-align:right;\"> 3.5 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.9 </td>\n   <td style=\"text-align:right;\"> 3.0 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.7 </td>\n   <td style=\"text-align:right;\"> 3.2 </td>\n   <td style=\"text-align:right;\"> 1.3 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4.6 </td>\n   <td style=\"text-align:right;\"> 3.1 </td>\n   <td style=\"text-align:right;\"> 1.5 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.0 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 1.4 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5.4 </td>\n   <td style=\"text-align:right;\"> 3.9 </td>\n   <td style=\"text-align:right;\"> 1.7 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n   <td style=\"text-align:left;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNote that the code block can be numbered and added with a left border using `code-block-bg: true` and `code-block-border-left: \"#31BAE9\"`\n\nCode block now also can be shown with language `#| echo: fenced`. As the code chunk shown below, `{r}` is explicitly presented. I don't hate `#|` as the new way of chuck option setup but when I test the code chuck, I found there is a space between `#|` and option keys. For example, it should be `#| echo: fenced` rather than `#|echo:fenced`. Otherwise, quarto will ignore chunk options.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"false\"}\n```{{r}}\n#| eval: false\n#| code-fold: false\nkableExtra::kbl(head(iris)) |> \n  kableExtra::kable_styling(\n    html_font = \"Ysabeau Office\",\n    bootstrap_options = c('striped', 'hover'),\n    font_size = 10, full_width = TRUE)\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"show\"}\n```{{python}}\n#| eval: false\n#| code-fold: show\nimport numpy as np\niris = np.array(iris)\n```\n````\n:::\n\n\n### Visual model\n\nVisual model is one of the most appealing feature for Quarto but I am far from a expert in that. It looks like a visual model version of markdown editor (so called WYSIWYM editing, What you see is What you mean) but slightly different. The shortcut of switching between source and visual model is `Cmd` + `Shift` + `F4` (Thanks to Yihui's [JS](https://yihui.org/en/2023/02/key-buttons/) for pretty keyboard styling).\n\nI list some most frequently used keyboard for visual mode editing:\n\n(a) Insert Hyperlink: `Cmd` + <kbd>K</kbd>\n\n(b) Add footnote[^1]: `Shift`+`Cmd`+`F7`\n\n(c) Insert picture: `Shift` +`Cmd` +<kbd>I</kbd>\n\n(d) Insert code chunk[^2]: `Alt` +`Cmd` +<kbd>I</kbd>\n\n(e) Edit attribute[^3]: `F4`\n\n[^1]: Like this.\n\n[^2]: By default, it will insert R code chunk. If another language is frequently, use `Tools > Modify keyboard shortcuts > filter 'Insert'`. There should be a place for setting shortcut for other language.\n\n[^3]: Click \\`F4\\` in any place in the div works.\n\nPlease also refer to the [official document](https://quarto.org/docs/visual-editor/vscode/) for more shortcuts and features. One thing I found very interesting is single quote mark `` ` `` . First, I'm not sure how to escape this in visual model. Second, if you close quote before typing content, like \\`\\`, visual mode will escape both quote marks. However, if you type in left quote mark then content and then close quote (i.e., type in\\``something` first, and type closing quote mark), it can quote content correctly.\n\nLast but not least, perhaps just type `/` in rstudio is a better choice as it will pop up a list of elements to choose.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}