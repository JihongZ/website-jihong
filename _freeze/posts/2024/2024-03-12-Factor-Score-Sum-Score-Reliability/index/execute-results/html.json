{
  "hash": "a95bad5cde4ed6d2e7953b619c44a52a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Sum Score, Factor Score, and Reliability'\nauthor: 'Jihong Zhang'\ndate: 'Mar 12 2024'\nimage: \"Sim_FactorScore_NetworkScore_Correlation.png\"\ncategories:\n  - Scoring\n  - Reliability\n  - CTT\n  - Factor Analysis\nexecute: \n  warning: false\n  message: false\ncitation: true\nformat: \n  html:\n    code-fold: true\n    code-line-numbers: false\nbibliography: references.bib\ncsl: apa.csl\n---\n\n\n\n\nNetwork psychometrics has become an alternative approach to factor analysis and item response theory in multiple fields of psychology and education, such as psychopathology, personality, measurement validation, and dimensionality determancy etc. However, individual scoring differences between psychometric network analysis and traditional psychometric modeling has not been well investigated. Some questions arise regarding individual scoring:\n\n1.  What will be individual scores in psychometric network analysis? Or, how can we evaluate the average level of each individuals?\n2.  If we can build individual scoring in psychometric network, what is the relationship between this scoring with factor scores.\n3.  How can we use this scoring method to evaluate measurement quality, such as reliability or validity?\n\nTo answer these questions, we first need to review how individuals are scored in factor analysis method and classical test theory. Borrowing the theoretical framework and purpose of factor scoring, we can construct the scoring method for psychometric network. Then, we can show that there are statistical relationship between network scores with factor scores. Thus, depending on the psychometric methods researchers use, they can be free to use either factor score or network score to report. They can also compute the other without constructing the other model.\n\nOverall, the purpose of this post is to illustrate the definition, assumption, psychometric properties, usage, and interpretation of factor scores in Structural Equation Models (SEM), and how those features of factor scores compare to sum scores in Classical Test Theory (CTT). This post is inspired by Dr. Templin's [2022 presentation](https://jonathantemplin.com/wp-content/uploads/2022/10/sem15pre906_lecture11.pdf).\n\n## Definition of Test Score\n\nIn CTT, the test score is unit of analysis of the whole test, which can be statistically expressed as:\n\n$$\nY_{total} = T+e\n$$\n\nWhere $Y_{total}$ denotes test scores, $T$ denotes true score, and $e$ denotes error. There are some assumptions:\n\n1.  Items are assumed exchangeable;\n2.  Expected value of $e$ is 0;\n3.  Error $e$ is expected to be uncorrelated with true score $T$\n\n## Scoring of Classical test theory\n\nIn classical test theory (CTT), the test score is construct as sum of item scores. CTT assumes that there is a true score exists that reflect the true ability of test takers and the observed sum scores of each individual is a combination of true score and random error.\n\n$$\nY_{total} = T + e\n$$\n\nWhere $Y_{total}$ denotes a vector of observed sum scores of respondents, $T$ denotes a vector of true scores of respondents, and $e$ denotes the random error for respondents. True scores and random errors are independent.\n\n### CTT-based reliability\n\nMultiple reliability coefficients have been proposed in previous literature. Each reliability has their advantages and disadvantages. Let's take the average iter-item correlation as one example. Average iter-item correlation is computed as the proportion of variance in the sum score that is due to variation in the latent trait or true score.\n\nWe can derive the reliability as following:\n\n$$\n\\text{Var}(Y_{total}) = \\text{Var}(T+e) = \\text{Var}(T)+\\text{Var}(e)+2\\text{Cov}(T,e)\n$$\n\nBut, since T and e are assumed independent $\\text{Cov}(T, e) = 0$, so,\n\n$$\n\\text{Var}(Y_{total}) = \\text{Var}(T)+\\text{Var}(e)\n$$\n\nThen, reliability can be computed as:\n\n$$\n\\rho = \\frac{\\text{Var}(T)}{\\text{Var}(Y)} = \\frac{\\text{Var}(T)}{\\text{Var}(T)+\\text{Var}(e)} \n$$\n\nWhere,\n\n-   $\\text{Var}(T)$ is variance of true score and could be interpreted as variability in the latent trait in the context of factor analysis.\n\n-   $\\text{Var}(e)$ is variance of error, and could be interpreted as measurement error\n\n#### Mini example\n\nUsing a 10-item example with each having 1-5 scale.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Data Read-in\"}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(kableExtra)\nlibrary(psych)\ndat_path <- 'posts/Lectures/2024-01-12-syllabus-adv-multivariate-esrm-6553/Lecture07/Code'\nconspiracy <- read.csv(here(dat_path, 'conspiracies.csv'))\nitemResp <- conspiracy |> select(starts_with('PolConsp'))\nconspiracy |> \n  mutate(ID = 1:177) |> \n  pivot_longer(starts_with('PolConsp'), names_to = 'Item', values_to = 'Resp') |> \n  mutate(Item = factor(Item, paste0('PolConsp', 1:10))) |> \n  group_by(Item) |> \n  summarise(\n    Mean = mean(Resp),\n    SD = sd(Resp),\n    Min = min(Resp),\n    Max = max(Resp),\n    Skew = psych::skew(Resp)\n  ) |> \n  kable(digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|Item       |  Mean|    SD| Min| Max|  Skew|\n|:----------|-----:|-----:|---:|---:|-----:|\n|PolConsp1  | 2.367| 1.136|   1|   5| 0.432|\n|PolConsp2  | 1.955| 1.112|   1|   5| 1.050|\n|PolConsp3  | 1.876| 1.096|   1|   5| 1.019|\n|PolConsp4  | 2.011| 1.108|   1|   5| 0.925|\n|PolConsp5  | 1.983| 1.105|   1|   5| 0.962|\n|PolConsp6  | 1.893| 1.003|   1|   5| 0.887|\n|PolConsp7  | 1.723| 1.004|   1|   5| 1.340|\n|PolConsp8  | 1.842| 0.952|   1|   5| 0.788|\n|PolConsp9  | 1.808| 1.137|   1|   5| 1.324|\n|PolConsp10 | 1.520| 1.056|   1|   5| 2.224|\n\n\n:::\n:::\n\n\n\n\nOne estimate of the internal consistency reliability of a test is <mark>Cronbach's $\\alpha$</mark>, which summarizes the average item-test correlation.\n\nThe standard Cronbach's $\\alpha$ is .93. The average Iter-Item Correlation is .564. Ideally, the average inter-item correlation for a set of items should be between .20 and .40, suggesting that while the items are reasonably homogenous, they do contain sufficiently unique variance so as to not be isomorphic with each other [@piedmont2014].\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Reliability by psych package\"}\nkable(alpha(itemResp)$total, digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|   | raw_alpha| std.alpha| G6(smc)| average_r|    S/N|   ase|  mean|    sd| median_r|\n|:--|---------:|---------:|-------:|---------:|------:|-----:|-----:|-----:|--------:|\n|   |     0.927|     0.928|   0.935|     0.564| 12.937| 0.008| 1.898| 0.833|    0.582|\n\n\n:::\n:::\n\n\n\n\nUsing factor analysis and `lavaan`, we can reproduce average inter-item correlations assuming items are tau-equavalent:\n\n-   Item responses are standardized (mean as 0, variance as 1)\n\n-   Factor loadings are constrained to be equal as 1\n\n-   Residual variances of items are constrained to be equal\n\nThen, iter-item correlation and Cronbach's alpha can be computed as:\n\n$$\n\\rho = \\frac{\\text{Var}(\\theta)}{\\text{Var}(\\theta)+\\text{Var}(\\psi)}\n$$\n\n$$\n\\alpha = \\frac{N\\rho}{\\sigma^2 +(N-1)\\rho}\n$$\n\nwhere N is sample size, $\\rho$ is average iter-item correlation, and $\\sigma^2$ are average item variances and equal to 1 if items are standardized.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"iter-item correlation by lavaan\"}\nlibrary(lavaan)\nitemResp_std <- itemResp |> \n  mutate(across(everything(), scale))\nunifac_model <- '\nF1 =~ 1*PolConsp1+1*PolConsp2+1*PolConsp3+1*PolConsp4+1*PolConsp5+1*PolConsp6+1*PolConsp7+1*PolConsp8+1*PolConsp9+1*PolConsp10\nPolConsp1 ~~equal(\"e1\")*PolConsp1\nPolConsp2 ~~equal(\"e1\")*PolConsp2\nPolConsp3 ~~equal(\"e1\")*PolConsp3\nPolConsp4 ~~equal(\"e1\")*PolConsp4\nPolConsp5 ~~equal(\"e1\")*PolConsp5\nPolConsp6 ~~equal(\"e1\")*PolConsp6\nPolConsp7 ~~equal(\"e1\")*PolConsp7\nPolConsp8 ~~equal(\"e1\")*PolConsp8\nPolConsp9 ~~equal(\"e1\")*PolConsp9\nPolConsp10~~equal(\"e1\")*PolConsp10\n'\nfit = cfa(model = unifac_model, data = itemResp_std, std.lv = FALSE)\n# summary(fit)\nVar_F1 = as.numeric(coef(fit)['F1~~F1'])\nVar_errors= as.numeric(coef(fit)[1])\nrho = Var_F1 / (Var_F1 + Var_errors) # reliability \nrho # average iter-item correlation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5640165\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Cronbach's alpha by lavaan\"}\nCron_alpha = 10*rho / (1 + (10-1)*rho )\nCron_alpha # Cronbach's alpha\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9282467\n```\n\n\n:::\n:::\n\n\n\n\nCronbach's alpha is related to number of items:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Correlation between alpha and test length\"}\nlibrary(greekLetters)  \ntibble(nItems = 2:20, alpha = nItems*rho / (1 + (nItems-1)*rho )) |> \n  ggplot() +\n  aes(x = nItems, y = alpha) +\n  geom_point(size = 3, shape = 1) +\n  geom_path(group = 1) +\n  scale_x_continuous(breaks = 2:20) +\n  scale_y_continuous(breaks = seq(0.7, 1, .025), limits = c(0.7, 1)) +\n  labs(x = 'Retrospective Number of items', y = paste0(\"Cronbach's \", greeks('alpha')),\n       title = 'Relationship between number of items with alpha')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n\n## Scoring of Factor Analysis\n\nIn factor analysis, factor scores are computed using parameters of CFA, i.e., unique variances ($\\Psi$), factor loadings ($\\Lambda$) and factor correlations ($\\Phi$). In most modern statistical software (i.e., lavaan or Mplus), factor scores are estimated by multivariate methods that use various aspects of the reduced or unreduced correlation matrix and factor analysis coefficients [@brownConfirmatoryFactorAnalysis2015]. A frequently used method of estimating factor scores is Thurston's (1935) least squared regression approach, although several other strategies have been developed (e.g., Bartlett, 1937; Harman, 1976; McDonald, 1982).\n\nFor confirmatory factor analysis that is identified, the scoring method discussed by Thurston (1935) and Thomson (1934) has the closed form [@ferrando2018; @skrondalRegressionFactorScores2001]:\n\n$$\n\\text{EAP}(\\boldsymbol{\\theta}_i) = \\boldsymbol{\\Phi}\\boldsymbol{\\Lambda}'\\boldsymbol{R}^{-1}\\boldsymbol{Y}_i=\\boldsymbol{S}'\\boldsymbol{R}^{-1}\\boldsymbol{Y}_i\n$$ {#eq-thurston}\n\nand $\\boldsymbol{R}$ is the the estimated item covaraince matrix:\n\n$$\n\\boldsymbol{R} = \\boldsymbol{\\Lambda}\\boldsymbol{\\Phi}\\boldsymbol{\\Lambda}'+\\boldsymbol{\\Psi}\n$$\n\nWhere $\\boldsymbol{\\theta_i}$ and $\\boldsymbol{Y}_i$ are factor score estimates and item responses for individual $i$, respectively; $\\Phi$ is the factor correlation matrix (for example, for single factor model, $\\Phi$ is 1 $\\times$ 1 matrix ), $\\Psi$ is $J \\times J$ unique variances of items, and $\\Lambda$ is the pattern loading matrix. $\\boldsymbol{S}$ is the factor loading structure matrix with the size $I \\times P$ where $I$ denotes number of item and $P$ denotes number of latent factors. For unidimensional structure, $\\boldsymbol{S} = \\boldsymbol{\\Lambda}$.\n\nTo derive the Thurston's method, we can first partition joint distribution of all $I$ items and $K$ factor scores as\n\n$$\nf(\\boldsymbol{\\theta, Y}) = f(\\begin{bmatrix}\\Theta\\\\Y\\end{bmatrix}) \\\\\n= N_{I+K}(\\begin{bmatrix}\\mu_\\Theta \\\\ \\mu+\\Lambda'\\mu_\\Theta \\end{bmatrix},\n\\begin{bmatrix}\n\\Phi\\Lambda' \\space\\space\\space\\space\\space\\space\\space\\space\\space \\Phi \\\\\n\\Lambda\\Phi\\Lambda'+\\Psi \\space\\space \\Lambda\\Phi\n\\end{bmatrix})\n$$ Based on relationship between conditional distribution of $f(\\theta|Y)$ and joint distribution of $f(Y, \\theta)$:\n\n$$\n\\boldsymbol{\\mu^*=\\mu_1+\\Sigma_{12}\\Sigma_{22}^{-1}(Y-\\mu_2)}\n$$\n\nWhere $\\mu_1$ and $\\mu_2$ are mean components of partitioned joint distribution, and $\\Sigma_{12}$ and $\\Sigma_{22}$ are \\[1,2\\] and \\[2,2\\] elements of variance components of partitioned joint distribution.Then,\n\n$$\nf(\\boldsymbol{\\theta|Y}) = \\mu_\\Theta + \\Phi\\Lambda'(\\Lambda\\Phi\\Lambda'+\\Psi)^{-1}(Y'-(\\mu+\\Lambda'\\mu_\\Theta))\n$$\n\nAssume factor scores and item responses are standardized, $\\mu_\\Theta = 0$ and $\\mu = 0$, then this is equivalent to @eq-thurston.\n\nAlternatively, using [Bartlett's (1937, 1938)]{.underline} method [@skrondalRegressionFactorScores2001], factor scores can be estimated as:\n\n$$\n\\text{EAP}(\\boldsymbol{\\theta_i}) = \\boldsymbol{(\\Lambda'\\Psi^{-1}\\Lambda)^{-1}\\Lambda'\\Psi^{-1}Y_i}\n$$\n\n### lavaan\n\nUsing the consipiracy theory data, we can calculate the factor scores based on the equation mention above using Thurston's method and compare to the estimated factor score by `lavaan`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"lavaan code\"}\nmodel2 <- '\n    F1 =~ PolConsp1+PolConsp2+PolConsp3+PolConsp4+PolConsp5+PolConsp6+PolConsp7+PolConsp8+PolConsp9+PolConsp10\n'\nfit2 = cfa(model = model2, data = itemResp_std, std.lv = TRUE)\nsummary(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlavaan 0.6-19 ended normally after 20 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        20\n\n  Number of observations                           177\n\nModel Test User Model:\n                                                      \n  Test statistic                               120.975\n  Degrees of freedom                                35\n  P-value (Chi-square)                           0.000\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)\n  F1 =~                                               \n    PolConsp1         0.627    0.069    9.127    0.000\n    PolConsp2         0.755    0.065   11.677    0.000\n    PolConsp3         0.706    0.066   10.647    0.000\n    PolConsp4         0.734    0.065   11.234    0.000\n    PolConsp5         0.871    0.060   14.528    0.000\n    PolConsp6         0.865    0.060   14.367    0.000\n    PolConsp7         0.735    0.065   11.244    0.000\n    PolConsp8         0.865    0.060   14.361    0.000\n    PolConsp9         0.730    0.065   11.154    0.000\n    PolConsp10        0.615    0.069    8.893    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)\n   .PolConsp1         0.601    0.067    9.030    0.000\n   .PolConsp2         0.425    0.049    8.634    0.000\n   .PolConsp3         0.496    0.056    8.828    0.000\n   .PolConsp4         0.455    0.052    8.724    0.000\n   .PolConsp5         0.236    0.031    7.540    0.000\n   .PolConsp6         0.246    0.032    7.643    0.000\n   .PolConsp7         0.455    0.052    8.723    0.000\n   .PolConsp8         0.247    0.032    7.646    0.000\n   .PolConsp9         0.461    0.053    8.740    0.000\n   .PolConsp10        0.617    0.068    9.055    0.000\n    F1                1.000                           \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Thurston's and Bartlett's method\"}\n## extract factor loadings and unique variances\nlambdas = as.numeric(coef(fit2)[paste0(\"F1=~PolConsp\", 1:10)])\nLambda = matrix(lambdas, ncol = 1)\npsis = as.numeric(coef(fit2)[paste0(\"PolConsp\", 1:10, \"~~PolConsp\", 1:10)])\nPsi = diag(sqrt(psis))\nPhi = diag(1)\n\n## Estimated Structural correlation matrix\nR = Lambda %*% Phi %*% t(Lambda) + Psi\n\n## Thurston's method\n# FNS_influence <- Y %*% rowSums(precision_mat) # calculate FNS based on expected influence\n# LNS_influence <- Y %*% precision_mat %*% rowSums(precision_mat) # calculate LNS based on expected inlfuence\nTheta_thurston = as.numeric(diag(1) %*% t(Lambda) %*% solve(R) %*% t(itemResp_std))\n## Bartlett's method\nTheta_bartlett = as.numeric(solve(t(Lambda) %*% solve(Psi) %*% Lambda) %*% t(Lambda) %*% solve(Psi) %*% t(itemResp_std))\nTheta_lavaan_regression = as.numeric(lavPredict(fit2, method = 'regression'))\nTheta_lavaan_Bartlett = as.numeric(lavPredict(fit2, method = 'Bartlett'))\n```\n:::\n\n\n\n\nWe can find that Thurston's method is consistent with `lavaan` 's output of factor scores:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Comparison\"}\nfs = tibble(\n   lavaan_regression =  Theta_lavaan_regression,\n   lavaan_Bartlett =  Theta_lavaan_Bartlett,\n   Thurston = Theta_thurston,\n   Bartlett = Theta_bartlett,\n   Sumscore = as.numeric(scale(rowSums(itemResp)))\n) \ncor(fs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  lavaan_regression lavaan_Bartlett  Thurston  Bartlett\nlavaan_regression         1.0000000       1.0000000 0.9991816 0.9991816\nlavaan_Bartlett           1.0000000       1.0000000 0.9991816 0.9991816\nThurston                  0.9991816       0.9991816 1.0000000 1.0000000\nBartlett                  0.9991816       0.9991816 1.0000000 1.0000000\nSumscore                  0.9931802       0.9931802 0.9970037 0.9970037\n                   Sumscore\nlavaan_regression 0.9931802\nlavaan_Bartlett   0.9931802\nThurston          0.9970037\nBartlett          0.9970037\nSumscore          1.0000000\n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Comparison\"}\nfs = fs |> \n  pivot_longer(c(lavaan_Bartlett, Sumscore, Thurston, Bartlett), names_to = \"Method\", values_to = \"Score\") |> \n  mutate(Method = factor(Method, levels = c(\"Sumscore\", \"Thurston\", \"Bartlett\", \"lavaan_Bartlett\")))\nggplot(fs) +\n  geom_abline(aes(slope = 1, intercept = 0), color = \"grey\") +\n  geom_point(aes(x = lavaan_regression, y = Score, color = Method, shape = Method), \n             size = 3, alpha = .4, stroke = 1.3) +\n  labs(x = \"Factor score by lavaan\", y = \"Factor score by Thurston's and Bartlett's method\") +\n  scale_shape_manual(values = 1:4) +\n  scale_y_continuous(limits = c(-1.1, 4)) +\n  scale_x_continuous(limits = c(-1.1, 4)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n### Mplus\n\nIn Mplus, latent factor score estimation can have varied methods under two condition: (1) when individual level factor scores are of interests, factor scores are estimated based on either Maximum-likelihood estimators or Bayes estimators; (2) when factor scores are used for secondary analysis (dependent variables of regression models), factor scores are viewed as one type of imputed values, thus they are also known as plausible values and estimated by Bayesian imputation and Rubin's (1978) method [@rubinMultipleImputationNonresponse1978; @asparouhovPlausibleValuesLatent2010; @vondavierWhatArePlausible2009].\n\nUnder the first condition, according to simulation study of @asparouhovPlausibleValuesLatent2010, [using ML estimators and small sample size]{.underline}, standardized errors for factor scores is underestimated. Another finding is that the larger the absolute factor score value is the larger the standard error is. This is because large absolute factor score values are generally in the tail of the factor score distribution, i.e., in a region with fewer observations.\n\nWith continuous variable, Mplus estimates factor scores as the maximum of posterior distribution of the factor (also called the *Maximum A Posterior* method), which is the same as the Regression Method for factor score estimation [@asparouhovPlausibleValuesLatent2010; @skrondalRegressionFactorScores2001]. It should be noted that, with this method, using factor scores as predictors given unbiased regression slopes, but using factor scores as dependent variables gives biased slopes. With categorical variables and the maximum-likelihood estimator, Mplus estimates factor scores as the expected value of the posterior distribution of the factor, which is also called the Expected A Posteriori (EAP) method.\n\n::: callout-note\n## Relationship between factor score and network score\n\nThe official paper will show both factor score and network score of unidimensional factor analysis is a special case of general scoring form when weight matrix is factor loadings or centrality measures.\n:::\n\n![Correlation between factor scores and network scores](Sim_FactorScore_NetworkScore_Correlation.png){.preview-image fig-align=\"center\"}\n\nFor network model,\n\n$$\n\\hat \\Sigma = \\Delta(I-\\Omega)^{-1}\\Delta\n$$\n\nwhere $\\Omega$ is a edge weight matrix or a standardized partial correlation matrix with diagonal elements as zeros, $\\Delta$ is the diagonal matrix with element $\\delta_{jj} =\\kappa_{jj}^{-\\frac{1}{2}}$. That is,\n\n$$\n\\Delta = \\text{diag}(\\hat K)^{-\\frac12}\n$$\n\nWe can derive the above Equation by assuming the precision matrix $\\kappa$ and partial correlation $\\omega_{jk}$ has following relationship:\n\n$$\n\\omega_{jk} = -\\frac{\\kappa_{jk}}{\\sqrt{\\kappa_{jj}}\\sqrt{\\kappa_{kk}}}\n$$\n\nThen, since the diagnal elements of matrix $\\Omega$ are zeros, it is easy to show that\n\n$$\n\\hat K = \\text{diag}{(\\hat K)}^{\\frac12}(I-\\Omega)\\text{diag}{(\\hat K)}^{\\frac12}\n$$\n\n$$\n\\hat \\Sigma = \\hat K^{-1} = \\text{diag}{(\\hat K)}^{-\\frac12}(I-\\Omega)^{-1}\\text{diag}{(\\hat K)}^{-\\frac12}\n$$\n\nFor factor analysis,\n\n$$\n\\hat \\Sigma  = \\boldsymbol{\\Lambda \\Phi \\Lambda'+\\Psi}\n$$\n\nWe can show that\n\n$$\n(I-\\Omega)^{-1} = \\Delta^{-1}(\\boldsymbol{\\Lambda \\Phi \\Lambda'+\\Psi})\\Delta^{-1}\n$$\n\nThus,\n\n$$\nI - \\Omega = \\Delta(\\boldsymbol{\\Lambda \\Phi \\Lambda'+\\Psi})^{-1}\\Delta\n$$\n\nBased on @eq-thurston Thurston's regression method, we know that\n\n$$\n\\boldsymbol{\\hat \\theta_i = \\Lambda'(\\Lambda \\Phi \\Lambda'+\\Psi)^{-1}Y_i \\\\ \n= \\Lambda' \\Delta^{-1}(I-\\Omega)\\Delta^{-1}Y_i}\n$$\n\nThen, if we set general scoring formular as\n\n$$\n\\boldsymbol{\\hat\\eta_i= W \\Delta^{-1}(I-\\Omega)\\Delta^{-1} Y_i}\n$$ {#eq-generalform} Where $\\boldsymbol{W}$ is a $1 \\times J$ weight matrix suggesting the \"importance\" of items.\n\nThus, as shown in @eq-generalform, we can conclude that when $\\boldsymbol{W \\approx \\Lambda}$, then $\\boldsymbol{\\hat\\eta \\approx \\hat\\theta}$; when $\\boldsymbol{W \\approx S}$, then $\\boldsymbol{\\hat\\eta \\approx \\hat{FS}}$\n\n## Correlation between estimated factor scores and true factor scores\n\nWhen item responses and factor scores are standardized, based on Thurston's regression method (see @eq-thurston), the estimated factor scores are:\n\n$$\n\\hat\\theta_i =\\Lambda'R^{-1}Y_i \\\\=\\Lambda'(\\Lambda\\Lambda'+\\Psi)^{-1}(\\Lambda\\theta_i^T+e_i) \\\\\n=\\Lambda'(\\Lambda\\Lambda'+\\Psi)^{-1}\\Lambda\\theta_i^T+\\Lambda'(\\Lambda\\Lambda'+\\Psi)^{-1}e_i\n$$\n\nThe relationship between estimated factor scores and true factor scures is a [**simple linear regression**]{.underline} with $\\Lambda'(\\Lambda\\Lambda'+\\Psi)^{-1}\\Lambda$ as the estimated linear slope.\n\nFor simple linear regression $Y=b_0+b_1X$, the Pearson's correlation is $r = b_1 * \\frac{S_X}{S_Y}$. Then, when both $\\hat \\theta_i$ and $\\theta_i^T$ are normal distributed, then the correlation between estimated and true factor score is as:\n\n$$\nr_{\\hat\\theta\\theta^T}^{Turston}= \\Lambda'(\\Lambda'\\Lambda+\\Psi)^{-1}\\Lambda\\frac{S_{\\theta^T}}{S_{\\hat\\theta}} \n$$\n\nUsing R, we can estimate \"unscaled\" correlation for $\\lambda = .7$ and $J = 6$ as\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsuppressMessages(library(tidyverse))\nset.seed(1234)\ncorr_true_est_theta <- function(lambda, J, N) {\n  Lambdas = matrix(rep(lambda, J), ncol = 1)\n  Psi = diag(1 - lambda^2, J)\n  \n  corr <- t(Lambdas) %*% solve(Lambdas %*% t(Lambdas) + Psi) %*% Lambdas\n  \n  true_fac_score = rnorm(N, 0, 1)\n  \n  Y = t(Lambdas %*% true_fac_score) + mvtnorm::rmvnorm(N, sigma = Psi)\n  est_fac_score = as.numeric(t(Lambdas) %*% solve(Lambdas %*% t(Lambdas) + Psi) %*% t(Y))\n  corr = corr * (sd(true_fac_score)/sd(est_fac_score))\n  corr\n}\ncorr_true_est_theta(lambda = 0.7, J = 6, N = 500)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]\n[1,] 0.9303474\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\ndat <- expand.grid(lambda=seq(.1,.9,.1), J = c(6, 12 , 24), N = c(100, 500, 1000)) |> \n  as.data.frame() |> \n  rowwise() |> \n  mutate(cor = corr_true_est_theta(lambda = lambda, J = J, N = N),\n         J = factor(J, levels = c(6, 12 , 24)),\n         N = factor(N, levels = c(100, 500, 1000)))\n\nggplot(dat) +\n  geom_point(aes(x=lambda, y = cor, col = J)) +\n  geom_path(aes(x=lambda, y = cor, group = J, col = J)) +\n  scale_x_continuous(breaks =  seq(.1,.9,.1)) +\n  scale_y_continuous(breaks =  seq(.1, 1,.1)) +\n  facet_wrap(~ N) +\n  labs(x = greekLetters::greeks(\"lambda\"), \n       title = \"Unscaled Correlation between Estimated Factor scores and True Factor Scores\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}