{
  "hash": "95e00a0749d8fd33626eda61c74887a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example 01: Make Friends with R\"\nsidebar: false\nformat: \n  html:\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    toc_collapsed: true\n    number_sections: true\n    code-fold: show\n    code-summary: \"Hide the code\"\n---\n\n\n\n# How to use this file\n\n1.  You can review all R code on this webpage.\n\n2.  To test one certain chunk of code, you click the \"copy\" icon in the upper right hand side of the chunk block (see screenshot below)\n\n    -   ![](figures/R-copy-paste.png)\n\n3.  To review the whole file, click \"\\</\\> Code\" next to the title of this paper. Find \"View Source\" and click the button. Then, you can paste to the newly created Quarto Document.\n\n    ![](figures/code-copy-paste.png)\n\n# R SYNTAX AND NAMING CONVENTIONS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# MAKE FRIENDS WITH R\n# BASED ON MAKE FRIENDS WITH R BY JONATHAN TEMPLIN\n# CREATED BY JIHONG ZHANG\n\n# R comments begin with a # -- there are no multiline comments\n\n# RStudio helps you build syntax\n#   GREEN: Comments and character values in single or double quotes\n\n# You can use the tab key to complete object names, functions, and arugments\n\n# R is case sensitive. That means R and r are two different things.\n```\n:::\n\n\n\n# R Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In R, every statement is a function\n\n# The print function prints the contents of what is inside to the console\nprint(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# The terms inside the function are called the arguments; here print takes x\n#   To find help with what the arguments are use:\n?print\n\n# Each function returns an object\nprint(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can determine what type of object is returned by using the class function\nclass(print(x = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n# R Objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Each objects can be saved into the R environment (the workspace here)\n#   You can save the results of a function call to a variable of any name\nMyObject = print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(MyObject)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can view the objects you have saved in the Environment tab in RStudio\n# Or type their name\nMyObject\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# There are literally thousands of types of objects in R (you can create them),\n#   but for our course we will mostly be working with data frames (more later)\n\n# The process of saving the results of a function to a variable is called \n#   assignment. There are several ways you can assign function results to \n#   variables:\n\n# The equals sign takes the result from the right-hand side and assigns it to\n#   the variable name on the left-hand side:\nMyObject = print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# The <- (Alt \"-\" in RStudio) functions like the equals (right to left)\nMyObject2 <- print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(MyObject, MyObject2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# The -> assigns from left to right:\nprint(x = 10) -> MyObject3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(MyObject, MyObject2, MyObject3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n# Importing and Exporting Data\n\n-   The data frame is an R object that is a rectangular array of data. The variables in the data frame can be any class (e.g., numeric, character) and go across the columns. The observations are across the rows.\n\n-   We will start by importing data from a comma-separated values (csv) file.\n\n-   We will use the read.csv() function. Here, the argument `stringsAsFactors` keeps R from creating data strings\n\n-   We will use `here::here()` function to quickly point to the target data file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can also set the directory using setwd(). Here, I set my directory to \n#   my root folder:\nsetwd(\"~\")\n\ngetwd()\ndir()\n# If I tried to re-load the data, I would get an error:\nHeightsData = read.csv(file = \"heights.csv\", stringsAsFactors = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2: I can use the full path to the file:\n# HeightsData = \n#   read.csv(\n#     file = \"/Users/jihong/Documents/website-jihong/posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data/heights.csv\", \n#     stringsAsFactors = FALSE)\n\n# Or, I can reset the current directory and use the previous syntax:\n# setwd(\"/Users/jihong/Documents/website-jihong/posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data/\")\n\nHeightsData = read.csv(file = \"heights.csv\", stringsAsFactors = FALSE)\nHeightsData\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID HeightIN\n1   1 72.76783\n2   2 69.45293\n3   3 69.70142\n4   4 69.36786\n5   5 70.55350\n6   6 69.76497\n7   7 70.55302\n8   8 69.02545\n9   9 69.48786\n10 10 69.29473\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note: Windows users will have to either change the direction of the slash\n#   or put two slashes between folder levels.\n\n# To show my data in RStudio, I can either double click it in the \n#   Environment tab or use the View() function\nView(HeightsData)\n\n# You can see the variable names and contents by using the $:\nHeightsData$ID\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# To read in SPSS files, we will need the foreign library. The foreign\n#   library comes installed with R (so no need to use install.packages()).\nlibrary(foreign)\n\n# The read.spss() function imports the SPSS file to an R data frame if the \n#   argument to.data.frame is TRUE\nWideData = read.spss(file = \"wide.sav\", to.data.frame = TRUE)\nWideData\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID Gender DVTime1 DVTime2 DVTime3 DVTime4 AgeTime1 AgeTime2 AgeTime3\n1   1      1    21.0    20.0    21.5    23.0      8.0     10.0     12.0\n2   2      1    21.0    21.5    24.0    25.5      8.1     10.1     12.1\n3   3      1    20.5    24.0    24.5    26.0      8.5     10.4     12.2\n4   4      1    23.5    24.5    25.0    26.5      8.7     10.6     12.5\n5   5      1    21.5    23.0    22.5    23.5      7.9     10.0     12.1\n6   6      1    20.0    21.0    21.0    22.5      8.0     10.0     11.9\n7   7      1    21.5    22.5    23.0    25.0      8.2     10.2     12.0\n8   8      1    23.0    23.0    23.5    24.0      7.9      9.9     12.1\n9   9      1    20.0    21.0    22.0    21.5      8.0     10.1     12.4\n10 10      1    16.5    19.0    19.0    19.5      8.3     10.2     12.1\n   AgeTime4\n1      14.0\n2      14.2\n3      14.1\n4      14.4\n5      13.9\n6      13.8\n7      14.1\n8      14.0\n9      14.3\n10     14.2\n```\n\n\n:::\n:::\n\n\n\n# Merging R data frame objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The WideData and HeightsData have the same set of ID numbers. We can use the merge() function to merge them into a single data frame. Here, x is the name of the left-side data frame and y is the name of the right-side data frame. The arguments by.x and by.y are the name of the variable(s) by which we will merge:\nAllData = merge(x = WideData, y = HeightsData, by.x = \"ID\", by.y = \"ID\")\nAllData\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID Gender DVTime1 DVTime2 DVTime3 DVTime4 AgeTime1 AgeTime2 AgeTime3\n1   1      1    21.0    20.0    21.5    23.0      8.0     10.0     12.0\n2   2      1    21.0    21.5    24.0    25.5      8.1     10.1     12.1\n3   3      1    20.5    24.0    24.5    26.0      8.5     10.4     12.2\n4   4      1    23.5    24.5    25.0    26.5      8.7     10.6     12.5\n5   5      1    21.5    23.0    22.5    23.5      7.9     10.0     12.1\n6   6      1    20.0    21.0    21.0    22.5      8.0     10.0     11.9\n7   7      1    21.5    22.5    23.0    25.0      8.2     10.2     12.0\n8   8      1    23.0    23.0    23.5    24.0      7.9      9.9     12.1\n9   9      1    20.0    21.0    22.0    21.5      8.0     10.1     12.4\n10 10      1    16.5    19.0    19.0    19.5      8.3     10.2     12.1\n   AgeTime4 HeightIN\n1      14.0 72.76783\n2      14.2 69.45293\n3      14.1 69.70142\n4      14.4 69.36786\n5      13.9 70.55350\n6      13.8 69.76497\n7      14.1 70.55302\n8      14.0 69.02545\n9      14.3 69.48786\n10     14.2 69.29473\n```\n\n\n:::\n\n```{.r .cell-code}\n## Method 2: Use dplyr method, |> can be typed using `command + shift + M`\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nWideData |> \n  left_join(HeightsData, by = \"ID\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID Gender DVTime1 DVTime2 DVTime3 DVTime4 AgeTime1 AgeTime2 AgeTime3\n1   1      1    21.0    20.0    21.5    23.0      8.0     10.0     12.0\n2   2      1    21.0    21.5    24.0    25.5      8.1     10.1     12.1\n3   3      1    20.5    24.0    24.5    26.0      8.5     10.4     12.2\n4   4      1    23.5    24.5    25.0    26.5      8.7     10.6     12.5\n5   5      1    21.5    23.0    22.5    23.5      7.9     10.0     12.1\n6   6      1    20.0    21.0    21.0    22.5      8.0     10.0     11.9\n7   7      1    21.5    22.5    23.0    25.0      8.2     10.2     12.0\n8   8      1    23.0    23.0    23.5    24.0      7.9      9.9     12.1\n9   9      1    20.0    21.0    22.0    21.5      8.0     10.1     12.4\n10 10      1    16.5    19.0    19.0    19.5      8.3     10.2     12.1\n   AgeTime4 HeightIN\n1      14.0 72.76783\n2      14.2 69.45293\n3      14.1 69.70142\n4      14.4 69.36786\n5      13.9 70.55350\n6      13.8 69.76497\n7      14.1 70.55302\n8      14.0 69.02545\n9      14.3 69.48786\n10     14.2 69.29473\n```\n\n\n:::\n:::\n\n\n\n# Transforming Wide to Long\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sometimes, certain packages require repeated measures data to be in a long\n# format. \n\nlibrary(dplyr) # contains variable selection \n\n## Wrong Way\nAllData |> \n  tidyr::pivot_longer(starts_with(\"DVTime\"), names_to = \"DV\", values_to = \"DV_Value\") |> \n  tidyr::pivot_longer(starts_with(\"AgeTime\"), names_to = \"Age\", values_to = \"Age_Value\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 160 × 7\n      ID Gender HeightIN DV      DV_Value Age      Age_Value\n   <dbl>  <dbl>    <dbl> <chr>      <dbl> <chr>        <dbl>\n 1     1      1     72.8 DVTime1     21   AgeTime1         8\n 2     1      1     72.8 DVTime1     21   AgeTime2        10\n 3     1      1     72.8 DVTime1     21   AgeTime3        12\n 4     1      1     72.8 DVTime1     21   AgeTime4        14\n 5     1      1     72.8 DVTime2     20   AgeTime1         8\n 6     1      1     72.8 DVTime2     20   AgeTime2        10\n 7     1      1     72.8 DVTime2     20   AgeTime3        12\n 8     1      1     72.8 DVTime2     20   AgeTime4        14\n 9     1      1     72.8 DVTime3     21.5 AgeTime1         8\n10     1      1     72.8 DVTime3     21.5 AgeTime2        10\n# ℹ 150 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n## Correct Way\nAllData |> \n  tidyr::pivot_longer(c(starts_with(\"DVTime\"), starts_with(\"AgeTime\"))) |> \n  tidyr::separate(name, into = c(\"Variable\", \"Time\"), sep = \"Time\") |> \n  tidyr::pivot_wider(names_from = \"Variable\", values_from = \"value\") -> AllDataLong\n```\n:::\n\n\n\n# Gathering Descriptive Statistics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The psych package makes getting descriptive statistics very easy.\n## install.packages(\"psych\")\nlibrary(psych)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'psych'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:rstan':\n\n    lookup\n```\n\n\n:::\n\n```{.r .cell-code}\n# We can use describe() to get descriptive statistics across all cases:\nDescriptivesWide = describe(AllData)\nDescriptivesWide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         vars  n  mean   sd median trimmed  mad   min   max range  skew\nID          1 10  5.50 3.03   5.50    5.50 3.71  1.00 10.00  9.00  0.00\nGender      2 10  1.00 0.00   1.00    1.00 0.00  1.00  1.00  0.00   NaN\nDVTime1     3 10 20.85 1.92  21.00   21.06 1.11 16.50 23.50  7.00 -0.78\nDVTime2     4 10 21.95 1.76  22.00   22.00 1.48 19.00 24.50  5.50 -0.13\nDVTime3     5 10 22.60 1.81  22.75   22.75 1.85 19.00 25.00  6.00 -0.48\nDVTime4     6 10 23.70 2.18  23.75   23.88 2.22 19.50 26.50  7.00 -0.43\nAgeTime1    7 10  8.16 0.27   8.05    8.12 0.22  7.90  8.70  0.80  0.79\nAgeTime2    8 10 10.15 0.21  10.10   10.12 0.15  9.90 10.60  0.70  0.85\nAgeTime3    9 10 12.14 0.18  12.10   12.12 0.15 11.90 12.50  0.60  0.72\nAgeTime4   10 10 14.10 0.18  14.10   14.10 0.15 13.80 14.40  0.60  0.00\nHeightIN   11 10 70.00 1.10  69.59   69.77 0.39 69.03 72.77  3.74  1.50\n         kurtosis   se\nID          -1.56 0.96\nGender        NaN 0.00\nDVTime1      0.19 0.61\nDVTime2     -1.37 0.56\nDVTime3     -0.87 0.57\nDVTime4     -1.04 0.69\nAgeTime1    -0.85 0.08\nAgeTime2    -0.51 0.07\nAgeTime3    -0.77 0.06\nAgeTime4    -1.22 0.06\nHeightIN     1.19 0.35\n```\n\n\n:::\n\n```{.r .cell-code}\nDescriptivesLong = describe(AllDataLong)\nDescriptivesLong\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         vars  n  mean   sd median trimmed  mad   min   max range  skew\nID          1 40  5.50 2.91   5.50    5.50 3.71  1.00 10.00  9.00  0.00\nGender      2 40  1.00 0.00   1.00    1.00 0.00  1.00  1.00  0.00   NaN\nHeightIN    3 40 70.00 1.05  69.59   69.77 0.39 69.03 72.77  3.74  1.69\nTime*       4 40  2.50 1.13   2.50    2.50 1.48  1.00  4.00  3.00  0.00\nDV          5 40 22.27 2.12  22.50   22.31 2.22 16.50 26.50 10.00 -0.24\nAge         6 40 11.14 2.25  11.25   11.14 2.89  7.90 14.40  6.50 -0.01\n         kurtosis   se\nID          -1.31 0.46\nGender        NaN 0.00\nHeightIN     1.92 0.17\nTime*       -1.44 0.18\nDV          -0.13 0.34\nAge         -1.42 0.36\n```\n\n\n:::\n\n```{.r .cell-code}\n# We can use describeBy() to get descriptive statistics by groups:\nDescriptivesLongID = describeBy(AllDataLong, group = AllDataLong$ID)\nDescriptivesLongID\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Descriptive statistics by group \ngroup: 1\n         vars n  mean   sd median trimmed  mad   min   max range skew kurtosis\nID          1 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00     0  NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00     0  NaN      NaN\nHeightIN    3 4 72.77 0.00  72.77   72.77 0.00 72.77 72.77     0  NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00     3 0.00    -2.08\nDV          5 4 21.38 1.25  21.25   21.38 1.11 20.00 23.00     3 0.21    -1.92\nAge         6 4 11.00 2.58  11.00   11.00 2.97  8.00 14.00     6 0.00    -2.08\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.62\nAge      1.29\n------------------------------------------------------------ \ngroup: 2\n         vars n  mean   sd median trimmed  mad   min   max range skew kurtosis\nID          1 4  2.00 0.00   2.00    2.00 0.00  2.00  2.00   0.0  NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0  NaN      NaN\nHeightIN    3 4 69.45 0.00  69.45   69.45 0.00 69.45 69.45   0.0  NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0 0.00    -2.08\nDV          5 4 23.00 2.12  22.75   23.00 2.22 21.00 25.50   4.5 0.14    -2.25\nAge         6 4 11.12 2.62  11.10   11.12 2.97  8.10 14.20   6.1 0.02    -2.07\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       1.06\nAge      1.31\n------------------------------------------------------------ \ngroup: 3\n         vars n  mean   sd median trimmed  mad  min  max range  skew kurtosis\nID          1 4  3.00 0.00   3.00    3.00 0.00  3.0  3.0   0.0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.0  1.0   0.0   NaN      NaN\nHeightIN    3 4 69.70 0.00  69.70   69.70 0.00 69.7 69.7   0.0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.0  4.0   3.0  0.00    -2.08\nDV          5 4 23.75 2.33  24.25   23.75 1.48 20.5 26.0   5.5 -0.45    -1.83\nAge         6 4 11.30 2.40  11.30   11.30 2.74  8.5 14.1   5.6  0.00    -2.07\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       1.16\nAge      1.20\n------------------------------------------------------------ \ngroup: 4\n         vars n  mean   sd median trimmed  mad   min   max range skew kurtosis\nID          1 4  4.00 0.00   4.00    4.00 0.00  4.00  4.00   0.0  NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0  NaN      NaN\nHeightIN    3 4 69.37 0.00  69.37   69.37 0.00 69.37 69.37   0.0  NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0 0.00    -2.08\nDV          5 4 24.88 1.25  24.75   24.88 1.11 23.50 26.50   3.0 0.21    -1.92\nAge         6 4 11.55 2.45  11.55   11.55 2.82  8.70 14.40   5.7 0.00    -2.08\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.62\nAge      1.23\n------------------------------------------------------------ \ngroup: 5\n         vars n  mean   sd median trimmed  mad   min   max range  skew kurtosis\nID          1 4  5.00 0.00   5.00    5.00 0.00  5.00  5.00     0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00     0   NaN      NaN\nHeightIN    3 4 70.55 0.00  70.55   70.55 0.00 70.55 70.55     0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00     3  0.00    -2.08\nDV          5 4 22.62 0.85  22.75   22.62 0.74 21.50 23.50     2 -0.28    -1.96\nAge         6 4 10.97 2.60  11.05   10.97 2.89  7.90 13.90     6 -0.05    -2.09\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.43\nAge      1.30\n------------------------------------------------------------ \ngroup: 6\n         vars n  mean   sd median trimmed  mad   min   max range  skew kurtosis\nID          1 4  6.00 0.00   6.00    6.00 0.00  6.00  6.00   0.0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0   NaN      NaN\nHeightIN    3 4 69.76 0.00  69.76   69.76 0.00 69.76 69.76   0.0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0  0.00    -2.08\nDV          5 4 21.12 1.03  21.00   21.12 0.74 20.00 22.50   2.5  0.27    -1.85\nAge         6 4 10.93 2.49  10.95   10.93 2.82  8.00 13.80   5.8 -0.02    -2.07\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.52\nAge      1.25\n------------------------------------------------------------ \ngroup: 7\n         vars n  mean   sd median trimmed  mad   min   max range skew kurtosis\nID          1 4  7.00 0.00   7.00    7.00 0.00  7.00  7.00   0.0  NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0  NaN      NaN\nHeightIN    3 4 70.55 0.00  70.55   70.55 0.00 70.55 70.55   0.0  NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0 0.00    -2.08\nDV          5 4 23.00 1.47  22.75   23.00 1.11 21.50 25.00   3.5 0.35    -1.87\nAge         6 4 11.12 2.52  11.10   11.12 2.82  8.20 14.10   5.9 0.02    -2.05\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.74\nAge      1.26\n------------------------------------------------------------ \ngroup: 8\n         vars n  mean   sd median trimmed  mad   min   max range  skew kurtosis\nID          1 4  8.00 0.00   8.00    8.00 0.00  8.00  8.00   0.0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0   NaN      NaN\nHeightIN    3 4 69.03 0.00  69.03   69.03 0.00 69.03 69.03   0.0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0  0.00    -2.08\nDV          5 4 23.38 0.48  23.25   23.38 0.37 23.00 24.00   1.0  0.32    -2.08\nAge         6 4 10.97 2.65  11.00   10.97 3.04  7.90 14.00   6.1 -0.02    -2.10\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.24\nAge      1.32\n------------------------------------------------------------ \ngroup: 9\n         vars n  mean   sd median trimmed  mad   min   max range  skew kurtosis\nID          1 4  9.00 0.00   9.00    9.00 0.00  9.00  9.00   0.0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0   NaN      NaN\nHeightIN    3 4 69.49 0.00  69.49   69.49 0.00 69.49 69.49   0.0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0  0.00    -2.08\nDV          5 4 21.12 0.85  21.25   21.12 0.74 20.00 22.00   2.0 -0.28    -1.96\nAge         6 4 11.20 2.74  11.25   11.20 3.11  8.00 14.30   6.3 -0.03    -2.11\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.43\nAge      1.37\n------------------------------------------------------------ \ngroup: 10\n         vars n  mean   sd median trimmed  mad   min   max range  skew kurtosis\nID          1 4 10.00 0.00  10.00   10.00 0.00 10.00 10.00   0.0   NaN      NaN\nGender      2 4  1.00 0.00   1.00    1.00 0.00  1.00  1.00   0.0   NaN      NaN\nHeightIN    3 4 69.29 0.00  69.29   69.29 0.00 69.29 69.29   0.0   NaN      NaN\nTime        4 4  2.50 1.29   2.50    2.50 1.48  1.00  4.00   3.0  0.00    -2.08\nDV          5 4 18.50 1.35  19.00   18.50 0.37 16.50 19.50   3.0 -0.68    -1.73\nAge         6 4 11.20 2.53  11.15   11.20 2.82  8.30 14.20   5.9  0.04    -2.07\n           se\nID       0.00\nGender   0.00\nHeightIN 0.00\nTime     0.65\nDV       0.68\nAge      1.27\n```\n\n\n:::\n:::\n\n\n\n# Transforming Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transforming data is accomplished by the creation of new variables. \nAllDataLong$AgeC = AllDataLong$Age - mean(AllDataLong$Age)\n\n# You can also use functions to create new variables. Here we create new terms\n#   using the function for significant digits:\nAllDataLong$AgeYear = signif(x = AllDataLong$Age, digits = 2)\nAllDataLong$AgeDecade = signif(x = AllDataLong$Age, digits = 1)\nhead(AllDataLong)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n     ID Gender HeightIN Time     DV   Age   AgeC AgeYear AgeDecade\n  <dbl>  <dbl>    <dbl> <chr> <dbl> <dbl>  <dbl>   <dbl>     <dbl>\n1     1      1     72.8 1      21     8   -3.14      8           8\n2     1      1     72.8 2      20    10   -1.14     10          10\n3     1      1     72.8 3      21.5  12    0.863    12          10\n4     1      1     72.8 4      23    14    2.86     14          10\n5     2      1     69.5 1      21     8.1 -3.04      8.1         8\n6     2      1     69.5 2      21.5  10.1 -1.04     10          10\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}