{
  "hash": "d6578a803eadf8f3de5ea6142c9e8713",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 01: Make Friends with R\"\nformat: \n  html:\n    highlight: tango\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    toc_collapsed: true\n    number_sections: true\n    code-fold: show\n    code-summary: \"Hide the code\"\n---\n\n\n\n## R SYNTAX AND NAMING CONVENTIONS\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# MAKE FRIENDS WITH R\n# BASED ON MAKE FRIENDS WITH R BY JONATHAN TEMPLIN\n# CREATED BY JIHONG ZHANG\n\n# R comments begin with a # -- there are no multiline comments\n\n# RStudio helps you build syntax\n#   GREEN: Comments and character values in single or double quotes\n\n# You can use the tab key to complete object names, functions, and arugments\n\n# R is case sensitive. That means R and r are two different things.\n```\n:::\n\n\n\n# R Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In R, every statement is a function\n\n# The print function prints the contents of what is inside to the console\nprint(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# The terms inside the function are called the arguments; here print takes x\n#   To find help with what the arguments are use:\n?print\n\n# Each function returns an object\nprint(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can determine what type of object is returned by using the class function\nclass(print(x = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n## R Objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Each objects can be saved into the R environment (the workspace here)\n#   You can save the results of a function call to a variable of any name\nMyObject = print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(MyObject)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can view the objects you have saved in the Environment tab in RStudio\n# Or type their name\nMyObject\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# There are literally thousands of types of objects in R (you can create them),\n#   but for our course we will mostly be working with data frames (more later)\n\n# The process of saving the results of a function to a variable is called \n#   assignment. There are several ways you can assign function results to \n#   variables:\n\n# The equals sign takes the result from the right-hand side and assigns it to\n#   the variable name on the left-hand side:\nMyObject = print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# The <- (Alt \"-\" in RStudio) functions like the equals (right to left)\nMyObject2 <- print(x = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(MyObject, MyObject2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# The -> assigns from left to right:\nprint(x = 10) -> MyObject3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(MyObject, MyObject2, MyObject3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Importing and Exporting Data into R data frame objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The data frame is an R object that is a rectangular array of data. The \n#   variables in the data frame can be any class (e.g., numeric, character)\n#   and go across the columns. The observations are across the rows.\nhere::set_here(\"posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in normalizePath(path):\npath[1]=\"posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data\":\nNo such file or directory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(con, \"w\"): cannot open file\n'posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data/.here':\nNo such file or directory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(con, \"w\"): cannot open the connection\n```\n\n\n:::\n\n```{.r .cell-code}\n# We will start by importing data from a comma-separated values (csv) file.\n#   We will use the read.csv() function. Here, the argument stringsAsFactors\n#   keeps R from creating data strings\nHeightsData = read.csv(file = \"data/heights.csv\", stringsAsFactors = FALSE)\n\n# Note: The argument file is the path to the file. If you opened this script\n#   directly in RStudio, then the current directory is the directory that\n#   contains the script. If the data file is in that directory, you can omit\n#   the full path. To find the current directory used in the environment, \n#   use the getwd() function. \ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jihong/Documents/Projects/website-jihong/posts/Lectures/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# To show the files in that directory, use the dir() function. You can see if\n#    the file you are opening is or is not in the current directory.\ndir()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"_extensions\"                      \"data\"                            \n[3] \"figures\"                          \"Lecture01.qmd\"                   \n[5] \"MakeFriendsWithR.qmd\"             \"MakeFriendsWithR.rmarkdown\"      \n[7] \"quarto-uark-revealjs-theme.Rproj\" \"template_files\"                  \n[9] \"template.html\"                   \n```\n\n\n:::\n\n```{.r .cell-code}\n# You can also set the directory using setwd(). Here, I set my directory to \n#   my root folder:\nsetwd(\"~\")\n\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jihong\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndir()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Applications\"               \"Applications (Parallels)\"  \n [3] \"Brewfile\"                   \"Brewfile.lock.json\"        \n [5] \"data\"                       \"Desktop\"                   \n [7] \"Documents\"                  \"Downloads\"                 \n [9] \"Dropbox\"                    \"HSR\"                       \n[11] \"iCloud Drive (Archive)\"     \"iCloud Drive (Archive) - 1\"\n[13] \"Library\"                    \"mambaforge\"                \n[15] \"Movies\"                     \"Music\"                     \n[17] \"OneDrive\"                   \"opt\"                       \n[19] \"Parallels\"                  \"Pictures\"                  \n[21] \"Public\"                     \"PycharmProjects\"           \n[23] \"Rlibs\"                      \"Sites\"                     \n[25] \"venv-metal\"                 \"Zotero\"                    \n```\n\n\n:::\n\n```{.r .cell-code}\n# If I tried to re-load the data, I would get an error:\nHeightsData = read.csv(file = \"heights.csv\", stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(file, \"rt\"): cannot open file 'heights.csv': No such file or\ndirectory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n\n\n:::\n\n```{.r .cell-code}\n# So, I can use the full path to the file:\nHeightsData = \n  read.csv(\n    file = \"/Users/jonathantemplin/Desktop/mv2018epsy905_lecture01/wide.csv\", \n    stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(file, \"rt\"): cannot open file\n'/Users/jonathantemplin/Desktop/mv2018epsy905_lecture01/wide.csv': No such file\nor directory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n\n\n:::\n\n```{.r .cell-code}\n# Or, I can reset the current directory and use the previous syntax:\nsetwd(\"/Users/jonathantemplin/Desktop/mv2018epsy905_lecture01\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in setwd(\"/Users/jonathantemplin/Desktop/mv2018epsy905_lecture01\"): cannot change working directory\n```\n\n\n:::\n\n```{.r .cell-code}\nHeightsData = read.csv(file = \"heights.csv\", stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(file, \"rt\"): cannot open file 'heights.csv': No such file or\ndirectory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n\n\n:::\n\n```{.r .cell-code}\n# Note: Windows users will have to either change the direction of the slash\n#   or put two slashes between folder levels.\n\n# To show my data in RStudio, I can either double click it in the \n#   Environment tab or use the View() function\nView(HeightsData)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in View(HeightsData): unable to open display\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in .External2(C_dataviewer, x, title): unable to start data viewer\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can see the variable names and contents by using the $:\nHeightsData$ID\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# To read in SPSS files, we will need the foreign library. The foreign\n#   library comes installed with R (so no need to use install.packages()).\nlibrary(foreign)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'foreign' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# The read.spss() function imports the SPSS file to an R data frame if the \n#   argument to.data.frame is TRUE\nWideData = read.spss(file = \"wide.sav\", to.data.frame = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in read.spss(file = \"wide.sav\", to.data.frame = TRUE): unable to open file: 'No such file or directory'\n```\n\n\n:::\n\n```{.r .cell-code}\nWideData\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'WideData' not found\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merging R data frame objects ================================================\n\n# The WideData and HeightsData have the same set of ID numbers. We can use the\n#   merge() function to merge them into a single data frame. Here, x is the \n#   name of the left-side data frame and y is the name of the right-side data\n#   frame. The arguments by.x and by.y are the name of the variable(s) by \n#   which we will merge:\nAllData = merge(x = WideData, y = HeightsData, by.x = \"ID\", by.y = \"ID\")\nAllData\n\n# Transforming Wide to Long ===================================================\n\n# Sometimes, certain packages require repeated measures data to be in a long\n#   format. The EPSY905R package has a function that simplifies the process for\n#   us. We first have to create a varlist object that will give directions\n#   for which variables will be long-format. These are the time-invariant ones.\nvarlist = list()\nvarlist$DV = c(\"DVTime1\", \"DVTime2\", \"DVTime3\", \"DVTime4\")\nvarlist$DV = paste0(\"DVTime\", 1:4)\nvarlist$Age = paste0(\"AgeTime\", 1:4)\n\n# We then use the MultiWide2Long function:\nAllDataLong = MultiWide2Long(data = AllData, idvars = \"ID\", varlist = varlist, \n                             timevals = 1:4, timevar = \"time\")\n\n# Gathering Descriptive Statistics ============================================\n\n# The psych package makes getting descriptive statistics very easy.\ninstall.packages(\"psych\")\nlibrary(psych)\n\n# We can use describe() to get descriptive statistics across all cases:\nDescriptivesWide = describe(AllData)\nDescriptivesWide\n\nDescriptivesLong = describe(AllDataLong)\nDescriptivesLong\n\n# We can use describeBy() to get descriptive statistics by groups:\nDescriptivesLongID = describeBy(AllDataLong, group = AllDataLong$ID)\nDescriptivesLongID\n\n# Transforming Data ===========================================================\n\n# Transforming data is accomplished by the creation of new variables. The [4]\n#  indicates the use of the 4th element of the $mean variable (atomic vector)\nAllDataLong$AgeC = AllDataLong$Age - DescriptivesLong$mean[4]\n\n# Here is another way to do the same thing, the term in the [ ] is logical\nAllDataLong$AgeC = AllDataLong$Age - \n  DescriptivesLong$mean[which(rownames(DescriptivesLong) == \"Age\")]\n\n# You can also use functions to create new variables. Here we create new terms\n#   using the function for significant digits:\nAllDataLong$AgeYear = signif(x = AllDataLong$Age, digits = 2)\nAllDataLong$AgeDecade = signif(x = AllDataLong$Age, digits = 1)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}