{
  "hash": "92e4d86db156c739d69ed47148d9a349",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 07: Matrix Algebra\"\nsubtitle: \"Matrix Algebra in R\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-09-24\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\noutput-location: column\ncode-annotations: below\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 07: Matrix Algebra\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n\n\n\n## Today's Class\n\n-   Matrix Algebra\n-   Multivariate Normal Distribution\n-   Multivariate Linear Analysis\n\n## Graduate Certificate in ESRM Program\n\n1.  See link [here](https://esrm.uark.edu/certificates/index.php)\n\n# An Brief Introduction to Matrix\n\n## Today's Example Data\n\n-   Imagine that I collected data SAT test scores for both the Math (SATM) and Verbal (SATV) sections of 1,000 students\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nlibrary(ESRM64503)\nlibrary(kableExtra)\nshow_table(head(dataSAT))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> id </th>\n   <th style=\"text-align:right;\"> SATV </th>\n   <th style=\"text-align:right;\"> SATM </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 520 </td>\n   <td style=\"text-align:right;\"> 580 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 520 </td>\n   <td style=\"text-align:right;\"> 550 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 460 </td>\n   <td style=\"text-align:right;\"> 440 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 560 </td>\n   <td style=\"text-align:right;\"> 530 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 430 </td>\n   <td style=\"text-align:right;\"> 440 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 490 </td>\n   <td style=\"text-align:right;\"> 530 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\nshow_table(tail(dataSAT))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:right;\"> id </th>\n   <th style=\"text-align:right;\"> SATV </th>\n   <th style=\"text-align:right;\"> SATM </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 995 </td>\n   <td style=\"text-align:right;\"> 995 </td>\n   <td style=\"text-align:right;\"> 570 </td>\n   <td style=\"text-align:right;\"> 560 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 996 </td>\n   <td style=\"text-align:right;\"> 996 </td>\n   <td style=\"text-align:right;\"> 480 </td>\n   <td style=\"text-align:right;\"> 420 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 997 </td>\n   <td style=\"text-align:right;\"> 997 </td>\n   <td style=\"text-align:right;\"> 430 </td>\n   <td style=\"text-align:right;\"> 330 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 998 </td>\n   <td style=\"text-align:right;\"> 998 </td>\n   <td style=\"text-align:right;\"> 560 </td>\n   <td style=\"text-align:right;\"> 540 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 999 </td>\n   <td style=\"text-align:right;\"> 999 </td>\n   <td style=\"text-align:right;\"> 470 </td>\n   <td style=\"text-align:right;\"> 410 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1000 </td>\n   <td style=\"text-align:right;\"> 1000 </td>\n   <td style=\"text-align:right;\"> 540 </td>\n   <td style=\"text-align:right;\"> 660 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dataSAT$SATV, dataSAT$SATM)\n```\n\n::: {.cell-output-display}\n![](Lecture07_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\n\n## Background\n\n-   Matrix operations are fundamental to all modern statistical software.\n\n-   When you installed R, R also comes with required matrix algorithm **library** for you. Two popular are **BLAS** and **LAPACK**\n\n    -   Other optimized libraries include OpenBLAS, AtlasBLAS, GotoBLAS, Intel MKL\n\n        `{bash}} Matrix products: default LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib`\n\n-   From the LAPACK [website](https://www.netlib.org/lapack/),\n\n    > **LAPACK** is written in Fortran 90 and provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems.\n    >\n    > LAPACK routines are written so that as much as possible of the computation is performed by calls to the Basic Linear Algebra Subprograms (**BLAS**).\n\n## Matrix Elements\n\n-   A matrix (denote as capitalized **X**) is composed of a set of elements\n\n    -   Each element is denote by its position in the matrix (row and column)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX = matrix(c(\n  1, 2,\n  3, 4,\n  5, 6\n), nrow = 3, byrow = TRUE)\nX\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(X) # Number of rows and columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   In R, we use `matrix[rowIndex, columnIndex]` to extract the element with the position of rowIndex and columnIndex\n\n\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nX[2, 1]\nX[3] # No comma in the bracket will output the element in column-wise order\nX[2, ] # 2nd row vector\nX[, 1] # 1st column vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n[1] 5\n[1] 3 4\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   In statistics, we use $x_{ij}$ to represent one element with the position of *i*th row and *j*th column. For a example matrix $\\mathbf{X}$ with the size of 1000 rows and 2 columns.\n\n    -   The first subscript is the index of the rows\n\n    -   The second subscript is the index of the columns\n\n$$\n\\mathbf{X} = \\begin{bmatrix}\nx_{11} & x_{12}\\\\\nx_{21} & x_{22}\\\\\n\\dots &  \\dots \\\\\nx_{1000, 1} & x_{1000,2}\n\\end{bmatrix}\n$$\n\n## Scalars\n\n-   A scalar is just a single number\n\n-   The name scalar is important: the number \"scales\" a vector â€“ it can make a vector \"longer\" or \"shorter\".\n\n-   Scalars are typically written without boldface:\n\n    $$\n    x_{11} = 520\n    $$\n\n-   Each element of a matrix is a scalar.\n\n-   Matrices can be multiplied by scalar so that each elements are multiplied by this scalar\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    3 * X\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    3    6\n    [2,]    9   12\n    [3,]   15   18\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## Matrix Transpose\n\n-   The transpose of a matrix is a reorganization of the matrix by switching the indices for the rows and columns\n\n    $$\n    \\mathbf{X} = \\begin{bmatrix}\n    520 & 580\\\\\n    520 & 550\\\\\n    \\vdots &  \\vdots\\\\\n    540 & 660\\\\\n    \\end{bmatrix}\n    $$\n\n$$\n\\mathbf{X}^T = \\begin{bmatrix}\n520 & 520 & \\cdots & 540\\\\\n580 & 550 & \\cdots & 660\n\\end{bmatrix}\n$$\n\n-   An element $x_{ij}$ in the original matrix $\\mathbf{X}$ is now $x_{ij}$ in the transposed matrix $\\mathbf{X}^T$\n\n-   **Transposes are used to align matrices for operations where the sizes of matrices matter (such as matrix multiplication)**\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    t(X)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2] [,3]\n    [1,]    1    3    5\n    [2,]    2    4    6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## Types of Matrices\n\n-   **Square Matrix:** A square matrix has the same number of rows and columns\n\n    -   Correlation / covariance matrices are square matrices\n\n-   **Diagonal Matrix**: A diagonal matrix is a square matrix with non-zero diagonal elements ($x_{ij}\\neq0$ for $i=j$) and zeros on the off-diagonal elements ($x_{ij} =0$ for $i\\neq j$):\n\n    $$\n    \\mathbf{A} = \\begin{bmatrix}\n    2.758 & 0 & 0 \\\\\n    0 & 1.643 & 0 \\\\\n    0 & 0     & 0.879\\\\\n    \\end{bmatrix}\n    $$\n\n    -   We will use diagonal matrices to transform correlation matrices to covariance matrices\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    vars = c(2.758, 1.643, 0.879)\n    diag(vars)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          [,1]  [,2]  [,3]\n    [1,] 2.758 0.000 0.000\n    [2,] 0.000 1.643 0.000\n    [3,] 0.000 0.000 0.879\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n-   **Symmetric Matrix**: A symmetric matrix is a square matrix where all elements are reflected across the diagonal ($x_{ij} = x_{ji}$)\n\n    -   Correlation and covariance matrices are symmetric matrices\n    -   [**Question**: A diagonal matrix is always a symmetric matrix?]{.underline} [True]{.mohu}\n\n## Linear Combinations\n\n-   Addition of a set of vectors (all multiplied by scalars) is called a linear combination:\n\n    $$\n    \\mathbb{y} = a_1x_1 + a_2x_2 + \\cdots + a_kx_k\n    $$\n\n-   Here, $\\mathbb{y}$ is the linear combination\n\n    -   For all *k* vectors, the set of all possible linear combinations is called their **span**\n\n    -   Typically not thought of in most analyses â€“ but when working with things that don't exist (latent variables) becomes somewhat importnat\n\n-   **In Data**, linear combinations happen frequently:\n\n    -   Linear models (i.e., Regression and ANOVA)\n\n    -   Principal components analysis\n\n    -   **Question**: Does generalized linear model contains linear combinations? [True, link function + a linear combination]{.mohu}.\n\n## Inner (Dot/Cross-) Product of Vectors\n\n-   An important concept in vector geometry is that of the inner product of two vectors\n\n    -   The inner product is also called the dot product\n\n    $$\n    \\mathbf{a} \\cdot \\mathbf{b} = a_{11}b_{11}+a_{21}b_{21}+\\cdots+ a_{N1}b_{N1} = \\sum_{i=1}^N{a_{i1}b_{i1}}\n    $$\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = matrix(c(1, 2), ncol = 1)\ny = matrix(c(2, 3), ncol = 1)\ncrossprod(x, y) # R function for dot product of x and y\nt(x) %*% y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    8\n     [,1]\n[1,]    8\n```\n\n\n:::\n:::\n\n\n\n\n\n\n> This is formally equivalent to (but usually slightly faster than) the call `t(x) %*% y` (`crossprod`) or `x %*% t(y)` (`tcrossprod`).\n\nUsing our **example data `dataSAT`**,\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrossprod(dataSAT$SATV, dataSAT$SATM) # x and y could be variables in our data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]\n[1,] 251928400\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   **In Data**: the angle between vectors is related to the correlation between variables and the projection is related to regression/ANOVA/linear models\n\n# Matrix Algebra\n\n## Moving from Vectors to Matrices\n\n-   A matrix can be thought of as a collection of vectors\n\n    -   In R, we use `df$[name]` or `matrix[, index]` to extract single vector\n\n-   Matrix algebra defines a set of operations and entities on matrices\n\n    -   I will present a version meant to mirror your previous algebra experiences\n\n-   Definitions:\n\n    -   Identity matrix\n\n    -   Zero vector\n\n    -   Ones vector\n\n-   Basic Operations:\n\n    -   Addition\n\n    -   Subtraction\n\n    -   Multiplication\n\n    -   \"Division\"\n\n## Matrix Addition and Subtraction\n\n-   Matrix addition and subtraction are much like vector addition / subtraction\n\n-   **Rules**: Matrices must be the same size (rows and columns)\n\n    -   [Be careful!! R may not pop up error message when matrice + vector!]{style=\"color: red\"}\n\n\n\n\n\n\n        ::: {.cell output-location='column'}\n        \n        ```{.r .cell-code}\n        A = matrix(c(1, 2, 3, 4), nrow = 2, byrow = T)\n        B = c(1, 2)\n        A\n        B\n        A+B\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n             [,1] [,2]\n        [1,]    1    2\n        [2,]    3    4\n        [1] 1 2\n             [,1] [,2]\n        [1,]    2    3\n        [2,]    5    6\n        ```\n        \n        \n        :::\n        :::\n\n\n\n\n\n\n-   **Method**: the new matrix is constructed of element-by-element addition/subtraction of the previous matrices\n\n-   **Order**: the order of the matrices (pre- and post-) does not matter\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nA = matrix(c(1, 2, 3, 4), nrow = 2, byrow = T)\nB = matrix(c(5, 6, 7, 8), nrow = 2, byrow = T)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n```\n\n\n:::\n\n```{.r .cell-code}\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    5    6\n[2,]    7    8\n```\n\n\n:::\n\n```{.r .cell-code}\nA + B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    6    8\n[2,]   10   12\n```\n\n\n:::\n\n```{.r .cell-code}\nA - B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   -4   -4\n[2,]   -4   -4\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Matrix Multiplication\n\n-   **The new matrix** has the size of same [number of rows of pre-multiplying]{style=\"color: tomato; font-weight: bold\"} matrix and [same number of columns of post-multiplying]{style=\"color: royalblue; font-weight: bold\"} matrix\n\n$$\n\\mathbf{A}_{(r \\times c)} \\mathbf{B}_{(c\\times k)} = \\mathbf{C}_{(r\\times k)}\n$$\n\n-   **Rules**: Pre-multiplying matrix must have number of columns equaling to the number of rows of the post-multiplying matrix\n\n-   **Method**: the elements of the new matrix consist of the inner (dot) product of [the row vectors of the pre-multiplying matrix]{style=\"color: tomato; font-weight: bold\"} and [the column vectors of the post-multiplying matrix]{style=\"color: royalblue; font-weight: bold\"}\n\n-   **Order**: The order of the matrices matters\n\n-   **R**: use `%*%` operator or `crossprod` to perform matrix multiplication\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nA = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = T)\nB = matrix(c(5, 6, 7, 8, 9, 10), nrow = 3, byrow = T)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    5    6\n[2,]    7    8\n[3,]    9   10\n```\n\n\n:::\n\n```{.r .cell-code}\nA %*% B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   46   52\n[2,]  109  124\n```\n\n\n:::\n\n```{.r .cell-code}\nB %*% A\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]   29   40   51\n[2,]   39   54   69\n[3,]   49   68   87\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   **Example**: The inner product of A's 1st row vector and B's 1st column vector equal to AB's first element\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\ncrossprod(A[1, ], B[, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   46\n```\n\n\n:::\n\n```{.r .cell-code}\n(A%*%B)[1, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Identity Matrix\n\n-   The identity matrix (denoted as $\\mathbf{I}$) is a matrix that pre- and post- multiplied by another matrix results in the original matrix:\n\n    $$\n    \\mathbf{A}\\mathbf{I} = \\mathbf{A}\n    $$\n\n    $$\n    \\mathbf{I}\\mathbf{A}=\\mathbf{A}\n    $$\n\n-   The identity matrix is a square matrix that has:\n\n    -   Diagonal elements = 1\n\n    -   Off-diagonal elements = 0\n\n    $$\n    \\mathbf{I}_{(3 \\times 3)} = \\begin{bmatrix}\n    1&0&0\\\\\n    0&1&0\\\\\n    0&0&1\\\\\n    \\end{bmatrix}\n    $$\n\n-   **R**: we can create a identity matrix using `diag`\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    diag(nrow = 3)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2] [,3]\n    [1,]    1    0    0\n    [2,]    0    1    0\n    [3,]    0    0    1\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## Zero and One Vector\n\n-   The zero and one vector is a column vector of zeros and ones:\n\n    $$\n    \\mathbf{0}_{(3\\times 1)} = \\begin{bmatrix}0\\\\0\\\\0\\end{bmatrix}\n    $$\n\n    $$\n    \\mathbf{1}_{(3\\times 1)} = \\begin{bmatrix}1\\\\1\\\\1\\end{bmatrix}\n    $$\n\n-   When pre- or post- multiplied the matrix ($\\mathbf{A}$) is the zero vector:\n\n    $$\n    \\mathbf{A0=0}\n    $$\n\n    $$\n    \\mathbf{0^TA=0}\n    $$\n\n-   **R:**\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nzero_vec <- matrix(0, nrow = 3, ncol = 1)\ncrossprod(B, zero_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    0\n[2,]    0\n```\n\n\n:::\n\n```{.r .cell-code}\none_vec <- matrix(1, nrow = 3, ncol = 1)\ncrossprod(B, one_vec) # column-wise sums\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   21\n[2,]   24\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Matrix \"Division\": The Inverse Matrix\n\n-   Division from algebra:\n\n    -   First: $\\frac{a}{b} = b^{-1}a$\n\n    -   Second: $\\frac{a}{b}=1$\n\n-   \"Division\" in matrices serves a similar role\n\n    -   For [**square symmetric**]{style=\"color: tomato; font-weight: bold\"} matrices, an inverse matrix is a matrix that when pre- or post- multiplied with another matrix produces the identity matrix:\n\n        $$\n        \\mathbf{A^{-1}A=I}\n        $$\n\n        $$\n        \\mathbf{AA^{-1}=I}\n        $$\n\n-   **R:** use `solve()` to calculate the matrix inverse\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- matrix(rlnorm(9), 3, 3, byrow = T)\nround(solve(A) %*% A, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   **Caution**: Calculation is complicated, even computers have a tough time. Not all matrix can be inverted:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- matrix(2:10, nrow = 3, ncol = 3, byrow = T)\nA\nsolve(A)%*%A\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in solve.default(A): Lapack routine dgesv: system is exactly singular: U[3,3] = 0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    3    4\n[2,]    5    6    7\n[3,]    8    9   10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Example: the inverse of variance-covaraince matrix\n\n-   In data: the inverse shows up constantly in statistics\n\n    -   Models which assume some types of (multivariate) normality need an inverse convariance matrix\n\n-   Using our SAT example\n\n    -   Our data matrix was size ($1000\\times 2$), which is not invertible\n\n    -   However, $\\mathbf{X^TX}$ was size ($2\\times 2$) â€“ square and symmetric\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    X = as.matrix(dataSAT[, c(\"SATV\", \"SATM\")])\n    crossprod(X, X)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n              SATV      SATM\n    SATV 251797800 251928400\n    SATM 251928400 254862700\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n    -   The inverse $\\mathbf{(X^TX)^{-1}}$ is\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    solve(crossprod(X, X))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                  SATV          SATM\n    SATV  3.610217e-07 -3.568652e-07\n    SATM -3.568652e-07  3.566802e-07\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## Matrix Algebra Operations\n\n::: columns\n::: column\n-   $\\mathbf{(A+B)+C=A+(B+C)}$\n\n-   $\\mathbf{A+B=B+A}$\n\n-   $c(\\mathbf{A+B})=c\\mathbf{A}+c\\mathbf{B}$\n\n-   $(c+d)\\mathbf{A} = c\\mathbf{A} + d\\mathbf{A}$\n\n-   $\\mathbf{(A+B)^T=A^T+B^T}$\n\n-   $(cd)\\mathbf{A}=c(d\\mathbf{A})$\n\n-   $(c\\mathbf{A})^{T}=c\\mathbf{A}^T$\n\n-   $c\\mathbf{(AB)} = (c\\mathbf{A})\\mathbf{B}$\n\n-   $\\mathbf{A(BC) = (AB)C}$\n:::\n\n::: column\n-   $\\mathbf{A(B+C)=AB+AC}$\n-   $\\mathbf{(AB)}^T=\\mathbf{B}^T\\mathbf{A}^T$\n:::\n:::\n\n## Advanced Matrix Functions/Operations\n\n-   We end our matrix discussion with some advanced topics\n\n-   To help us throughout, let's consider the correlation matrix of our SAT data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR <- cor(dataSAT[, c(\"SATV\", \"SATM\")])\nR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          SATV      SATM\nSATV 1.0000000 0.7752238\nSATM 0.7752238 1.0000000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n$$\nR = \\begin{bmatrix}1.00 & 0.78 \\\\ 0.78 & 1.00\\end{bmatrix}\n$$\n\n## Matrix Trace\n\n-   For a square matrix $\\mathbf{A}$ with *p* rows/columns, the matrix trace is the sum of the diagonal elements:\n\n    $$\n    tr\\mathbf{A} = \\sum_{i=1}^{p} a_{ii}\n    $$\n\n-   In R, we can use `tr()` in `psych` package to calculate matrix trace\n\n-   For our data, the trace of the correlation matrix is 2\n\n    -   For all correlation matrices, **the trace is equal to the number of variables**\n\n\n\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        psych::tr(R)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] 2\n        ```\n        \n        \n        :::\n        :::\n\n\n\n\n\n\n-   The trace is considered as the total variance in multivariate statistics\n\n    -   Used as a target to recover when applying statistical models\n\n## Model Determinants\n\n-   A square matrix can be characterized by a scalar value called a determinant:\n\n    $$\n    \\text{det}\\mathbf{A} =|\\mathbf{A}|\n    $$\n\n-   Manual calculation of the determinant is tedious. In R, we use `det()` to calculate matrix determinant\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    det(R)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.399028\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n-   The determinant is useful in statistics:\n\n    -   Shows up in multivariate statistical distributions\n\n    -   Is a measure of \"generalized\" variance of multiple variables\n\n-   If the determinant is positive, the matrix is called **positive definite** $\\rightarrow$ the matrix has an inverse\n\n-   If the determinant is not positive, the matrix is called **non-positive definite** $\\rightarrow$ the matrix does not have an inverse\n\n## Wrap Up\n\n1.  Matrices show up nearly anytime multivariate statistics are used, often in the help/manual pages of the package you intend to use for analysis\n\n2.  You don't have to do matrix algebra, but please do try to understand the concepts underlying matrices\n\n3.  Your working with multivariate statistics will be better off because of even a small amount of understanding\n\n# Multivariate Normal Distribution\n\n## Covariance and Correlation in Matrices\n\n-   The covariance matrix $\\mathbf{S}$ is found by:\n\n    $$\n    \\mathbf{S}=\\frac{1}{N-1} \\mathbf{(X-1\\cdot\\bar x^T)^T(X-1\\cdot\\bar x^T)}\n    $$\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    X = as.matrix(dataSAT[,c(\"SATV\", \"SATM\")])\n    N = nrow(X)\n    XBAR = matrix(colMeans(X), ncol = 1)\n    ONES = matrix(1, nrow = nrow(X))\n    S = 1/(N-1) * t(X - ONES%*% t(XBAR)) %*% (X - ONES%*% t(XBAR))\n    S\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n             SATV     SATM\n    SATV 2479.817 3135.359\n    SATM 3135.359 6596.303\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    cov(X)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n             SATV     SATM\n    SATV 2479.817 3135.359\n    SATM 3135.359 6596.303\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n## From Covariance to Correlation\n\n-   If we take the SDs (the square root of the diagonal of the covariance matrix) and put them into diagonal matrix $\\mathbf{D}$, the correlation matrix is found by:\n\n$$\n\\mathbf{R = D^{-1}SD^{-1}}\n$$ $$\n\\mathbf{S = DRD}\n$$\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nS\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         SATV     SATM\nSATV 2479.817 3135.359\nSATM 3135.359 6596.303\n```\n\n\n:::\n\n```{.r .cell-code}\nD = sqrt(diag(diag(S)))\nD\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]\n[1,] 49.79777  0.00000\n[2,]  0.00000 81.21763\n```\n\n\n:::\n\n```{.r .cell-code}\nR = solve(D) %*% S %*% solve(D)\nR\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]      [,2]\n[1,] 1.0000000 0.7752238\n[2,] 0.7752238 1.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          SATV      SATM\nSATV 1.0000000 0.7752238\nSATM 0.7752238 1.0000000\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Generalized Variance\n\n-   The determinant of the covariance matrix is called **generalized variance**\n\n$$\n\\text{Generalized Sample Variance} = |\\mathbf{S}|\n$$\n\n-   It is a measure of spread across all variables\n\n    -   Reflecting how much overlap (covariance) in variables raltive to total variances occurs in the sample\n\n    -   Amount of overlap reduces the generalized sample variance\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\ngsv = det(S)\ngsv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6527152\n```\n\n\n:::\n\n```{.r .cell-code}\n# If no correlation\nS_noCorr = S\nS_noCorr[upper.tri(S_noCorr)] = S_noCorr[lower.tri(S_noCorr)] = 0\nS_noCorr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         SATV     SATM\nSATV 2479.817    0.000\nSATM    0.000 6596.303\n```\n\n\n:::\n\n```{.r .cell-code}\ngsv_noCorr <- det(S_noCorr)\ngsv_noCorr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16357628\n```\n\n\n:::\n\n```{.r .cell-code}\ngsv / gsv_noCorr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.399028\n```\n\n\n:::\n\n```{.r .cell-code}\n# If correlation = 1\nS_PerfCorr = S\nS_PerfCorr[upper.tri(S_PerfCorr)] = S_PerfCorr[lower.tri(S_PerfCorr)] = prod(diag(S))\nS_PerfCorr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             SATV         SATM\nSATV     2479.817 16357628.070\nSATM 16357628.070     6596.303\n```\n\n\n:::\n\n```{.r .cell-code}\ngsv_PefCorr <- det(S_PerfCorr)\ngsv_PefCorr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.67572e+14\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   The generalized sample variance is:\n\n    -   Largest when variables are uncorrelated\n    -   Zero when variables from a linear dependency\n\n## Total Sample Variance\n\n-   The total sample variance is the sum of the variances of each variable in the sample\n\n    -   The sum of the diagonal elements of the sample covariance matrix\n    -   The trace of the sample covariance matrix\n\n$$\n\\text{Total Sample Variance} = \\sum_{v=1}^{V} s^2_{x_i} = \\text{tr}\\mathbf{S}\n$$\n\nTotal sample variance for our SAT example:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(diag(S))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9076.121\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   The total sample variance does not take into consideration the covariances among the variables\n\n    -   Will not equal zero if linearly dependency exists\n\n## Mutlivariate Normal Distribution and Mahalanobis Distance\n\n-   The PDF of Multivariate Normal Distribution is very similar to univariate normal distribution\n\n$$\nf(\\mathbf{x}_p) = \\frac{1}{(2\\pi)^{\\frac{V}2}|\\mathbf{\\Sigma}|^{\\frac12}}\\exp[-\\frac{\\color{tomato}{(x_p^T - \\mu)^T \\mathbf{\\Sigma}^{-1}(x_p^T-\\mu)}}{2}]\n$$\n\nWhere $V$ represents number of variables and the highlighed is [Mahalanobis Distance]{style=\"color: tomato\"}.\n\n-   We use $MVN(\\mathbf{\\mu, \\Sigma})$ to represent a multivariate normal distribution with mean vector as $\\mathbf{\\mu}$ and covariance matrix as $\\mathbf{\\Sigma}$\n\n-   Similar to squared mean error in univariate distribution, we can calculate squared Mahalanobis Distance for each observable individual in the context of Multivariate Distribution\n\n$$\nd^2(x_p) = (x_p^T - \\mu)^T \\Sigma^{-1}(x_p^T-\\mu)\n$$\n\n-   In R, we can use `mahalanobis` followed by data vector (`x`), mean vector (`center`), and covariance matrix (`cov`) to calculate the **squared Mahalanobis Distance** for one individual\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nx_p <- X[1, ]\nx_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSATV SATM \n 520  580 \n```\n\n\n:::\n\n```{.r .cell-code}\nmahalanobis(x = x_p, center = XBAR, cov = S)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.346228\n```\n\n\n:::\n\n```{.r .cell-code}\nmahalanobis(x = X[2, ], center = XBAR, cov = S)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4211176\n```\n\n\n:::\n\n```{.r .cell-code}\nmahalanobis(x = X[3, ], center = XBAR, cov = S)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6512687\n```\n\n\n:::\n\n```{.r .cell-code}\n# Alternatively,\nt(x_p - XBAR) %*% solve(S) %*% (x_p - XBAR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]\n[1,] 1.346228\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmh_dist_all <- apply(X, 1, \\(x) mahalanobis(x, center = XBAR, cov = S))\nplot(density(mh_dist_all))\n```\n\n::: {.cell-output-display}\n![](Lecture07_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\n## Multivariate Normal Properties\n\n-   The multivariate normal distribution has some useful properties that show up in statistical methods\n\n-   If $\\mathbf{X}$ is distributed multivariate normally:\n\n    1.  Linear combinations of $\\mathbf{X}$ are normally distributed\n    2.  All subsets of $\\mathbf{X}$ are multivariate normally distributed\n    3.  A zero covariance between a pair of variables of $\\mathbf{X}$ implies that the variables are independent\n    4.  Conditional distributions of $\\mathbf{X}$ are multivariate normal\n\n## How to use Multivariate Normal Distribution in R\n\nSimilar to other distribution functions, we use `dmvnorm` to get the density given the observations and the parameters (mean vector and covariance matrix). `rmvnorm` can generate multiple samples given the distribution\n\n\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nlibrary(mvtnorm)\n(mu <- colMeans(dataSAT[, 2:3]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SATV   SATM \n499.32 498.27 \n```\n\n\n:::\n\n```{.r .cell-code}\nS \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         SATV     SATM\nSATV 2479.817 3135.359\nSATM 3135.359 6596.303\n```\n\n\n:::\n\n```{.r .cell-code}\ndmvnorm(X[1, ], mean = mu, sigma = S)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.177814e-05\n```\n\n\n:::\n\n```{.r .cell-code}\ndmvnorm(X[2, ], mean = mu, sigma = S)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.046773e-05\n```\n\n\n:::\n\n```{.r .cell-code}\n## Total Log Likelihood \nLL <- sum(log(apply(X, 1, \\(x) dmvnorm(x, mean = mu, sigma = S))))\nLL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -10682.62\n```\n\n\n:::\n\n```{.r .cell-code}\n## Generate samples from MVN\nrmvnorm(20, mean = mu, sigma = S) |> show_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> SATV </th>\n   <th style=\"text-align:right;\"> SATM </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 435.5570 </td>\n   <td style=\"text-align:right;\"> 514.7871 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 485.9694 </td>\n   <td style=\"text-align:right;\"> 451.6971 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 479.7557 </td>\n   <td style=\"text-align:right;\"> 464.0686 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 540.7826 </td>\n   <td style=\"text-align:right;\"> 544.0689 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 456.4417 </td>\n   <td style=\"text-align:right;\"> 398.2206 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 513.1988 </td>\n   <td style=\"text-align:right;\"> 597.4055 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 593.1801 </td>\n   <td style=\"text-align:right;\"> 679.6526 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 535.5480 </td>\n   <td style=\"text-align:right;\"> 468.7802 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 452.3367 </td>\n   <td style=\"text-align:right;\"> 528.4314 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 517.5690 </td>\n   <td style=\"text-align:right;\"> 599.0224 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 475.8046 </td>\n   <td style=\"text-align:right;\"> 463.1286 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 506.7705 </td>\n   <td style=\"text-align:right;\"> 498.0742 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 520.6535 </td>\n   <td style=\"text-align:right;\"> 508.6460 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 508.6183 </td>\n   <td style=\"text-align:right;\"> 501.5767 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 456.9402 </td>\n   <td style=\"text-align:right;\"> 486.4695 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 508.9558 </td>\n   <td style=\"text-align:right;\"> 492.5694 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 537.1668 </td>\n   <td style=\"text-align:right;\"> 465.5386 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 556.1411 </td>\n   <td style=\"text-align:right;\"> 650.1690 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 529.3456 </td>\n   <td style=\"text-align:right;\"> 493.3810 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 502.4084 </td>\n   <td style=\"text-align:right;\"> 552.7246 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n\n## Wrapping Up\n\n1.  We are now ready to discuss multivariate models and the art/science of multivariate modeling\n\n2.  Many of the concepts of univariate models carry over\n\n    -   Maximum likelihood\n    -   Model building via nested models\n    -   All of the concepts involve multivariate distributions\n\n3.  Matrix algebra was necessary so as to concisely talk about our distributions (which will soon be models)\n\n4.  The multivariate normal distribution will be necessary to understand as it is the most commonly used distribution for estimation of multivariate models\n\n5.  Next class we will get back into data analysis â€“ but for multivariate observationsâ€¦using Râ€™s lavaan package for path analysis\n",
    "supporting": [
      "Lecture07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}