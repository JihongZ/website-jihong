{
  "hash": "41f1e1b81ac52f39e940cd66cd8f51f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 07: Generalized Linear Models (Binary Outcome) and Matrix Algebra\"\nsubtitle: \"Matrix Algebra in R\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-09-24\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\noutput-location: column\ncode-annotations: below\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 07: Matrix Algebra\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n\n## Today's Class\n\n-   Matrix Algebra\n-   Multivariate Normal Distribution\n-   Multivariate Linear Analysis\n\n## Graduate Certificate\n\n# An Introduction to Matrix Algebra\n\n## Matrix Elements\n\n-   A matrix (denote as capitalized **X**) is composed of a set of elements\n\n    -   Each element is denote by its position in the matrix (row and column)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX = matrix(c(\n  1, 2,\n  3, 4,\n  5, 6\n), nrow = 3, byrow = TRUE)\nX\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(X) # Number of rows and columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n:::\n\n\n\n\n-   In R, we use `matrix[rowIndex, columnIndex]` to extract the element with the position of rowIndex and columnIndex\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX[2, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n-   In statistics, we use $x_{ij}$ to represent one element with the position of *i*th row and *j*th column. For a example matrix $\\mathbf{X}$ with the size of 1000 rows and 2 columns.\n\n    -   The first subscript is the index of the rows\n\n    -   The second subscript is the index of the columns\n\n$$\n\\mathbf{X} = \\begin{bmatrix}\nx_{11} & x_{12}\\\\\nx_{21} & x_{22}\\\\\n\\dots &  \\dots \\\\\nx_{1000, 1} & x_{1000,2}\n\\end{bmatrix}\n$$\n\n## Scalars\n\n-   A scalar is just a single number\n\n-   The name scalar is important: the number \"scales\" a vector â€“ it can make a vector \"longer\" or \"shorter\".\n\n-   Scalars are typically written without boldface:\n\n    $$\n    x_{11} = 520\n    $$\n\n-   Each element of a matrix is a scalar.\n\n-   Matrices can be multiplied by scalar so that each elements are multiplied by this scalar\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    3 * X\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    3    6\n    [2,]    9   12\n    [3,]   15   18\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n## Matrix Transpose\n\n-   The transpose of a matrix is a reorganization of the matrix by switching the indices for the rows and columns\n\n    $$\n    \\mathbf{X} = \\begin{bmatrix}\n    520 & 580\\\\\n    520 & 550\\\\\n    \\vdots &  \\vdots\\\\\n    540 & 660\\\\\n    \\end{bmatrix}\n    $$\n\n$$\n\\mathbf{X}^T = \\begin{bmatrix}\n520 & 520 & \\cdots & 540\\\\\n580 & 550 & \\cdots & 660\n\\end{bmatrix}\n$$\n\n-   An element $x_{ij}$ in the original matrix $\\mathbf{X}$ is now $x_{ij}$ in the transposed matrix $\\mathbf{X}^T$\n\n-   **Transposes are used to align matrices for operations where the sizes of matrices matter (such as matrix multiplication)**\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    t(X)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2] [,3]\n    [1,]    1    3    5\n    [2,]    2    4    6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n## Types of Matrices\n\n-   **Square Matrix:** A square matrix has the same number of rows and columns\n\n    -   Correlation / covariance matrices are square matrices\n\n-   **Diagonal Matrix**: A diagonal matrix is a square matrix with non-zero diagonal elements ($x_{ij}\\neq0$ for $i=j$) and zeros on the off-diagonal elements ($x_{ij} =0$ for $i\\neq j$):\n\n    $$\n    \\mathbf{A} = \\begin{bmatrix}\n    2.758 & 0 & 0 \\\\\n    0 & 1.643 & 0 \\\\\n    0 & 0     & 0.879\\\\\n    \\end{bmatrix}\n    $$\n\n    -   We will use diagonal matrices to form correlation matrices\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}