{
  "hash": "bad9158e1bdbdaaf707b9d4e8c263828",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 12: Principal Components Analysis and Exploratory Factor Analysis\"\nsubtitle: \"ESRM 64503 - Lecture 12: PCA and EFA\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-10-09\"\ndate-modified: \"2024-10-11\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 12: PCA and EFA\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\nbibliography: references.bib\n---\n\n\n\n\n## Course Evaluation\n\n-   [You will get 2 extra credit points if you finish the course evaluation.]{style=\"color: royalblue; font-weight: bold\"}\n\n| **Course**       | **Course Name**             | **Survey Open** | **Survey Close** |\n|------------------|-----------------------------|-----------------|------------------|\n| ESRM 64503 - 001 | APPLIED MULTIVARIATE STATS  | Nov 21          | Dec 6            |\n\n## Today's Class\n\n-   Methods for exploratory analysis\n\n    -   Principal Components-based exploratory approach (PCA)\n    -   Maximum Likelihood-based Exploratory Factor Analysis (EFA)\n    -   Exploratory Structural Equation Modeling\n\n\n\n\n::: {.cell output-location='default'}\n\n```{.r .cell-code}\nlibrary(ESRM64503)\nlibrary(kableExtra)\nlibrary(tidyverse)\nlibrary(DescTools) # Desc() allows you to quick screen data\nlibrary(lavaan) # Desc() allows you to quick screen data\n# options(digits = 3)\n```\n:::\n\n\n\n\n## The Logic of Exploratory Analyses\n\n-   Exploratory analyses attempt to discover hidden structure in data with little to no user input\n    -   Aside from the selection of analysis and estimation\n-   The results from exploratory analyses can be misleading\n    -   If data do not meet assumptions of model or method selected\n    -   If data have quirks that are idiosyncratic to the sample selected\n    -   If some cases are extreme relative to others\n    -   If constraints made by analysis are implausible\n-   Sometimes, exploratory analyses are needed\n    -   Must construct an analysis that capitalizes on the known features of data\n    -   There are better ways to conduct such analyses\n-   Often, exploratory analyses are not needed\n    -   But are conducted anyway – see a lot of reports of scale development that start with the idea that a construct has a certain number of dimensions\n\n# Advanced Matrix Operations\n\n## Matrix Orthogonality\n\n-   A square matrix $\\Lambda$ is said to be orthogonal if:\n\n$$\n\\mathbf{\\Lambda\\Lambda^T = \\Lambda^T\\Lambda = I}\n$$\n\n-   For example, $\\mathbf \\Lambda$ is a orthogonal matrix\n\n    -   $$\n        \\mathbf \\Lambda = \\frac{1}{7}\\begin{bmatrix}\n        3 & 2 & 6 \\\\\n        -6 & 3 & 2 \\\\\n        2 & 6 & 3\n        \\end{bmatrix}\n        $$\n\n\n-   Orthogonal matrices are characterized by two properties\n    1.  The dot product of all row vector multiples is the zero vector\n        -   Meaning vectors are orthogonal (or uncorrelated)\n    2.  For each row vector, the sum of all elements is one\n        -   Meaning vectors are “normalized”\n-   The matrix above is also called **orthonormal**\n    -   The diagonal is equal to 1 (each vector has a unit length)\n-   Orthonormal matrices are used in principal components and exploratory factor analysis\n\n## Eigenvalues and Eigenvectors\n\n-   A square matrix $\\mathbf{\\Sigma}$ can be decomposed into a set of eigenvalues $\\mathbf{\\lambda}$ and a set of eigenvectors $\\mathbf e$:\n\n$$\n\\mathbf{\\Sigma e} = \\lambda \\mathbf{e}\n$$\n\n-   Each eigenvalue has a corresponding eigenvector\n    -   The number equal to the number of rows/columns of $\\mathbf{\\Sigma}$\n-   **Principal components analysis** uses eigenvalues and eigenvectors to reconfigure data\n\n## R Code: Eigenvalues and Eigenvectors\n\n-   In R, we can use `eigen()` function to get eigenvalues and eigenvectors of a square matrix (e.g., a correlation matrix).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ESRM64503)\n## Correlation matrix of SAT-Verbal and SAT-Math\nsat_corrmat = cor(dataSAT[, c(\"SATV\", \"SATM\")])\n\n## eignvalues and eigenvectors of correlation matrix:\nsat_eigen = eigen(x = sat_corrmat, symmetric = TRUE)\nsat_eigen$values # eigenvalues\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.7752238 0.2247762\n```\n\n\n:::\n\n```{.r .cell-code}\nsat_eigen$vectors # eigenvectors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]       [,2]\n[1,] 0.7071068 -0.7071068\n[2,] 0.7071068  0.7071068\n```\n\n\n:::\n:::\n\n\n\n\n-   In our SAT sample, the two eigenvalues obtained were:\n\n$$\n\\lambda_1 = 1.775; \n\\lambda_2 = 0.224 \\\\\n$$\n\n-   The two eigenvectors obtained were:\n\n$$\n\\mathbf{e}_1 = \\begin{bmatrix}0.707 \\\\ 0.707\\end{bmatrix};\n\\mathbf{e}_2 = \\begin{bmatrix}-0.707 \\\\ 0.707\\end{bmatrix}\n$$\n\n-   These terms will have much greater meaning principal components analysis\n\n## Spectral Decomposition\n\n-   Using the eigenvalues and eigenvectors, we can reconstruct the original matrix using a spectral decomposition:\n\n$$\n\\mathbf{\\Sigma =}\\sum_{i=1}^{p} \\lambda_i\\mathbf{e}_i \\mathbf{e}_i^T\n$$\n\nwhere $i$ is the index of row/column of square matrix\n\n-   For our example, we can get back to our 2\\*2 correlation matrix by combining two matrices of eigenvalues and eigenvectors:\n\n$$\n\\mathbf{R}_1 = \\lambda_1 \\mathbf{e}_i \\mathbf{e}_i^T = 1.775 \\begin{bmatrix}0.707 \\\\ 0.707\\end{bmatrix} \\begin{bmatrix}0.707 & 0.707\\end{bmatrix} = \\begin{bmatrix}0.890 & 0.890\\\\ 0.890 & 0.890\\end{bmatrix}\n$$ \n\n$$\n\\begin{align}\n\\mathbf{R}_2 &= \\mathbf{R}_1 +\\lambda_1 \\mathbf{e}_i \\mathbf{e}_i^T \\\\\n&= \\begin{bmatrix}0.890 & 0.890\\\\ 0.890 & 0.890\\end{bmatrix}\n + 0.224 \\begin{bmatrix}-0.707 \\\\ 0.707\\end{bmatrix} \\begin{bmatrix}-0.707 & 0.707\\end{bmatrix} \\\\\n&= \\begin{bmatrix}1.000 & 0.780\\\\ 0.780 & 1.000 \\end{bmatrix}\n\\end{align}\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# spectral decomposition\ncorr_rank1 = sat_eigen$values[1] * tcrossprod(sat_eigen$vectors[,1]) #<1>\ncorr_rank1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]      [,2]\n[1,] 0.8876119 0.8876119\n[2,] 0.8876119 0.8876119\n```\n\n\n:::\n:::\n\n\n\n\n1.  `tcrossprod`: $\\mathbf{e}\\mathbf{e}^T$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_rank2 = corr_rank1 + sat_eigen$values[2] * tcrossprod(sat_eigen$vectors[,2])\ncorr_rank2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]      [,2]\n[1,] 1.0000000 0.7752238\n[2,] 0.7752238 1.0000000\n```\n\n\n:::\n:::\n\n\n\n\n## Additional Eigenvalue Properties\n\n-   The matrix trace is the sum of the eigenvalues:\n\n$$\ntr(\\mathbf\\Sigma) = \\sum_{i=1}^{p}\\lambda_i\n$$\n\n::: callout-note\nThe transformation of data: In Mathematics, an **eigenvector** corresponds to the real nonzero eigenvalues which point in the direction stretched by the transformation; **eigenvalue** is considered as a factor by which it is stretched.\n:::\n\n-   In our example, the $tr(\\mathbf R) = 1.775 + 0.224 \\approx 2$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(sat_eigen$values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n-   The determinant of correlation matrix (the generalized variance) can be found by the product of the eigenvalues\n\n$$\n|\\mathbf\\Sigma| = \\prod_{i=1}^p \\lambda_i\n$$\n\n-   In our example, the $|\\mathbf R| = 1.775 * 0.224 \\approx .3976$\n\n# PRINCIPAL COMPONENTS ANALYSIS (PCA)\n\n## PCA Overview\n\n1.  **Principal Components Analysis** (PCA) is a method for re-expressing the covariance (or often correlation) between a set of variables\n\n    -   The re-expression comes from creating a set of new variables (linear combinations) of the original variables\n\n2.  PCA has two objectives:\n\n    1.  **Data reduction** - Moving from many original variables down to a few \"components\"\n\n        -   You have 100 variables, but you only need 7 composite scores that summarizes all 100 variables.\n\n    2.  **Interpretation** - Determining which original variables contribute most to the new \"components\"\n\n## Goals of PCA\n\n-   The **goal** of PCA is to find a set of [*k*]{.underline} principal components (composite variables) that:\n    -   Is much smaller in number than the original set of V variables\n    -   Accounts for nearly all of the total variance\n        -   Total variance = trace of covariance/correlation matrix\n-   If these two goals can be accomplished, then the set of [*k*]{.underline} principal components contains almost as much information as the original V variables\n    -   Meaning – the components can now replace the original variables in any subsequent analyses\n\n## Questions when using PCA\n\n-   PCA analyses proceed by seeking the answers to two questions:\n    1.  How many **components** are needed to “adequately” represent the original data?\n        -   e.g., for 10-item depression survey, we may need one composite score of \"deperssion\"\n        -   The term \"[adequately\"]{.underline} is fuzzy (and will be in the analysis)\n    2.  (once #1 has been answered): What does each component represent?\n        -   The term [“represent”]{.underline} is also fuzzy\n        -   e.g., what does the \"component\" score mean? For one component, it can be interpreted as \"general depression level\". What about two or three components?\n\n## PCA Features\n\n-   PCA often reveals relationships between variables that were not previously suspected\n    -   New interpretations of data and variables often stem from PCA\n-   PCA usually serves as more of a means to an end rather than an end it itself\n    -   Components (the new variables) are often used in other statistical techniques\n        -   Multiple regression/ANOVA\n        -   Cluster analysis\n-   Unfortunately, PCA is often intermixed with Exploratory Factor Analysis\n    -   Don’t. Please don’t. Please make it stop.\n\n## PCA Formulas\n\n-   Notation: $Z$ are our new components and $\\mathbf Y$ is our original data matrix (with N observations and V variables)\n    -   We will let p be our index for a subject\n-   The new components are linear combinations:\n    -   We can generate V number of components at most, same as number of observed variables:\n\n$$\n\\begin{array}{c}\nZ_{p 1}=\\mathbf{e}_{1}^{T} \\mathbf{Y}=e_{11} Y_{p 1}+e_{21} Y_{p 2}+\\cdots+e_{V 1} Y_{p V} \\\\\nZ_{p 2}=\\mathbf{e}_{2}^{T} \\mathbf{Y}=e_{12} Y_{p 1}+e_{22} Y_{p 2}+\\cdots+e_{V 2} Y_{p V} \\\\\n\\vdots \\\\\nZ_{p V}=\\mathbf{e}_{V}^{T} \\mathbf{Y}=e_{1 V} Y_{p 1}+e_{2 V} Y_{p 2}+\\cdots+e_{V V} Y_{p V}\n\\end{array}\n$$\n\n-   The weights of the components ($e_{jk}$) come from the eigenvectors of the covariance or correlation matrix for component k and variable j\n\n## Diagram of PCA\n\n![PC: Principal components; Item: Observed variables](images/clipboard-3451643663.png){fig-align=\"center\" width=\"800\"}\n\n## Details about the components\n\n-   The components ($Z$) are formed by the weights of the eigenvectors of the covariance or correlation matrix of the original data\n\n    -   The variance of a component is given by the eigenvalue associated with the eigenvector for the component\n\n-   Using the eigenvalue and eigenvectors means:\n\n    -   Each successive component has **lower variance**\n        -   Var(Z1) \\> Var(Z2) \\> … \\> Var(Zv)\n    -   All components are **uncorrelated**\n    -   The sum of the variances of the principal components is equal to the **total variance**:\n\n    $$\n    \\sum_{v=1}^{V} \\operatorname{Var}\\left(Z_{v}\\right)=\\operatorname{tr} \\mathbf{\\Sigma}=\\sum_{v=1}^{V} \\lambda_{v}\n    $$\n\n## PCA on our example\n\n1.  We will now conduct a PCA on the correlation matrix of our sample data\n    -   This example is given for demonstration purposes – typically we will not do PCA on small numbers of variables (\\> 20 variables?)\n\n![](images/clipboard-2518475766.png){fig-align=\"center\" width=\"670\"}\n\n## PCA in R\n\n-   The R function that does principal components is called `prcomp()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata01 <- dataSAT[, c(\"SATV\", \"SATM\")]\n# PCA of correlation matrix \nsat_pca_corr = prcomp(x = data01, scale. = TRUE)\n\n# show the results\nsat_pca_corr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStandard deviations (1, .., p=2):\n[1] 1.3323753 0.4741057\n\nRotation (n x k) = (2 x 2):\n            PC1        PC2\nSATV -0.7071068  0.7071068\nSATM -0.7071068 -0.7071068\n```\n\n\n:::\n\n```{.r .cell-code}\n# show the summary statistics\nsummary(sat_pca_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImportance of components:\n                          PC1    PC2\nStandard deviation     1.3324 0.4741\nProportion of Variance 0.8876 0.1124\nCumulative Proportion  0.8876 1.0000\n```\n\n\n:::\n:::\n\n\n\n\n## Graphical Representation\n\n-   Plotting the components and the original data side by side reveals the nature of PCA:\n    -   Shown from PCA of covariance matrix\n    -   PC I (Principal component I) is uncorrelated to PC II\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n#create same analysis but with covariance matrix (for visual) scale.=FALSE (covariance matrix) \nsat_pca_cov = prcomp(x = data01, scale. = FALSE)\n\n#create augmented data matrix for plot\ndata01a = data01\ndata01a$type = \"Raw\"\n\ndata01b = data.frame(SATV = sat_pca_cov$x[,1], SATM = sat_pca_cov$x[,2], type=\"PC\")\ndata01c = rbind(data01a, data01b)\n\nplot(x = data01c$SATV, y = data01c$SATM, ylab = \"SATM/PC2\", xlab = \"SATV/PC1\", cex.main=1.5, frame.plot=FALSE, col=ifelse(data01c$type==\"Raw\", \"red\", \"blue\"))\nlegend(0, 400, pch=1, col=c(\"red\", \"blue\"), c(\"Data\", \"PCs\"), bty=\"o\",  box.col=\"darkgreen\", cex=1.5)\n```\n\n::: {.cell-output-display}\n![](Lecture12_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=1728}\n:::\n:::\n\n\n\n\n## An empirical example: The Growth of Gambling Access\n\n-   Background:\n    -   In past 25 years, an exponential increase in the accessibility of gambling\n    -   An increased rate of with problem or pathological gambling (Volberg, 2002; Welte et al., 2009)\n-   Hence, there is a need to better:\n    -   Understand the underlying causes of the disorder\n    -   Reliably identify potential pathological gamblers\n    -   Provide effective treatment interventions\n\n## Pathological Gambling: DSM Definition\n\n-   To be diagnosed as a pathological gambler, an individual must meet **5 of 10 defined criteria**:\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Is preoccupied with gambling\n2.  Needs to gamble with increasing amounts of money in order to achieve the desired excitement\n3.  Has repeated unsuccessful efforts to control, cut back, or stop gambling\n4.  Is restless or irritable when attempting to cut down or stop gambling\n5.  Gambles as a way of escaping from problems or relieving a dysphoric mood\n:::\n\n::: {.column width=\"50%\"}\n6.  After losing money gambling, often returns another day to get even (“chasing” one’s losses)\n7.  Lies to family members, therapist, or others to conceal the extent of involvement with gambling\n8.  Has committed illegal acts such as forgery, fraud, theft, or embezzlement to finance gambling\n9.  Has jeopardized or lost a significant relationship, job, or educational or career opportunity because of gambling\n10. Relies on others to provide money to relieve a desperate financial situation caused by gambling\n:::\n:::\n\n## Research on Pathological Gambling\n\n-   In order to study the etiology of pathological gambling, more variability in responses was needed\n-   The **Gambling Research Instrument** (**GRI**; Feasel, Henson, & Jones,2002) was created with 41 Likert-type items\n    -   Items were developed to measure each criterion\n-   Example items (ratings: *Strongly Disagree* to *Strongly Agree*):\n    -   I worry that I am spending too much money on gambling (C3)\n    -   There are few things I would rather do than gamble (C1)\n-   The instrument was used on a sample of experienced gamblers from a riverboat casino in a Flat Midwestern State\n    -   Casino patrons were solicited after playing roulette\n\n## The GRI Items\n\n-   The Gambling Research Instrument (GRI) used a 6-point Likert scale:\n    -   1: Strongly Disagree\n    -   2: Disagree\n    -   3: Slightly Disagree\n    -   4: Slightly Agree\n    -   5: Agree\n    -   6: Strongly Agree\n-   To meet the assumptions of factor analysis, we will treat these responses as being continuous\n    -   This is tenuous at best, but often is the case in factor analysis\n    -   Categorical items would be better….but you’d need another course for how to do that\n        -   Hint: Item Response Models\n\n## The Sample\n\n-   Data were collected from two sources:\n    -   112 “experienced” gamblers\n        -   Many from an actual casino\n    -   1192 college students from a “rectangular” midwestern state\n        -   Many never gambled before\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata02 = read.csv(file=\"gambling_lecture12.csv\",header=TRUE)\n#listwise removal of missing data (common in PCA -- but still a problem)\ndata02a = data02[complete.cases(data02),]\ndim(data02a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1333   10\n```\n\n\n:::\n:::\n\n\n\n\n-   Today, we will combine both samples and treat them as homogenous – one sample of 1304 subjects\n\n## Final 10 items on the scale\n\n| Item  | Criterion | Question                                                                                                            |\n|-----------------|-----------------|--------------------------------------|\n| GRI1  | 3         | I would like to cut back on my gambling.                                                                            |\n| GRI3  | 6         | If I lost a lot of money gambling one day, I would be more likely to want to play again the following day.          |\n| GRI5  | 2         | I find it necessary to gamble with larger amounts of money (than when I first gambled) for gambling to be exciting. |\n| GRI9  | 4         | I feel restless when I try to cut down or stop gambling.                                                            |\n| GRI10 | 1         | It bothers me when I have no money to gamble.                                                                       |\n| GRI13 | 3         | I find it difficult to stop gambling.                                                                               |\n| GRI14 | 2         | I am drawn more by the thrill of gambling than by the money I could win.                                            |\n| GRI18 | 9         | My family, coworkers, or others who are close to me disapprove of my gambling.                                      |\n| GRI21 | 1         | It is hard to get my mind off gambling.                                                                             |\n| GRI23 | 5         | I gamble to improve my mood.                                                                                        |\n\n## Question #1: How Many Components?\n\n-   To answer the question of how many components, two methods are used:\n    -   **Scree plot** of eigenvalues (looking for the “elbow”)\n    -   **Variance** accounted for (should be \\> 70%)\n-   We will go with 4 components: (variance accounted for VAC = 75%)\n-   Variance accounted for is for the total sample variance\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#analysis of covariance matrix of gambling data items\ngambling_pca_cov = prcomp(x = data02a, scale. = FALSE) \n# gambling_pca_cov\nsummary(gambling_pca_cov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nImportance of components:\n                          PC1    PC2    PC3     PC4     PC5     PC6     PC7\nStandard deviation     2.0485 1.3229 1.0883 0.83608 0.75096 0.73365 0.68616\nProportion of Variance 0.4043 0.1686 0.1141 0.06736 0.05434 0.05186 0.04537\nCumulative Proportion  0.4043 0.5730 0.6871 0.75447 0.80881 0.86067 0.90604\n                           PC8     PC9    PC10\nStandard deviation     0.64836 0.58230 0.46438\nProportion of Variance 0.04051 0.03267 0.02078\nCumulative Proportion  0.94655 0.97922 1.00000\n```\n\n\n:::\n:::\n\n\n\n\n## Plots to Answer How Many Components\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nprop_var = t(summary(gambling_pca_cov)$importance[2:3,])\n#creating a scree plot and a proportion of variance plot\n\npar(mfrow = c(1,2))\nplot(gambling_pca_cov, type=\"l\", main = \"Scree Plot of PCA Eigenvalues\", lwd = 5)\nmatplot(prop_var, type=\"l\", main = \"Proportion of Variance Explained by Component\", lwd = 5)\nlegend(x=5, y=.5, legend = c(\"Component Variance\", \"Cumulative Variance\"), lty = 1:2, lwd=5, col=1:2)\n```\n\n::: {.cell-output-display}\n![](Lecture12_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=1536}\n:::\n:::\n\n\n\n\n## Question #2: What Does Each Component Represent?\n\n-   To answer question #2 – we look at the weights of the **eigenvectors** (here is the unrotated solution)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(gambling_pca_cov$rotation, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10\nX1  -0.313  0.105  0.166 -0.844  0.365 -0.090  0.090  0.002  0.028  0.040\nX3  -0.226  0.078  0.178 -0.134 -0.525  0.680  0.343 -0.192 -0.015  0.026\nX5  -0.320  0.094  0.229  0.026 -0.492 -0.626 -0.090 -0.395 -0.044  0.187\nX9  -0.243  0.087  0.160  0.031 -0.117 -0.062 -0.153  0.152  0.045 -0.917\nX10 -0.280  0.087  0.235  0.085 -0.195 -0.026 -0.093  0.842 -0.027  0.307\nX13 -0.329  0.156  0.186  0.220  0.326  0.295 -0.505 -0.225 -0.524  0.101\nX14 -0.449 -0.862 -0.231  0.006 -0.004  0.026 -0.037 -0.001 -0.004  0.002\nX18 -0.347  0.405 -0.834 -0.028 -0.100 -0.019  0.009  0.053 -0.074  0.002\nX21 -0.272  0.137  0.062  0.198  0.179  0.155 -0.250 -0.143  0.842  0.128\nX23 -0.326  0.098  0.139  0.416  0.386 -0.147  0.718 -0.025 -0.071 -0.033\n```\n\n\n:::\n:::\n\n\n\n\n-   Given 10-item survey, we can extract **10** components at most, but we only use first **4** principal components. They are enough to explain the total variance of data.\n\n## Final Result: Four Principal Components\n\n-   Using the weights of the eigenvectors, we can create four new variables – the four principal components\n-   **Strong assumption**: Each of these is uncorrelated with each other\n    -   The variance of each is equal to the corresponding eigenvalue\n-   We would then use these in subsequent analyses\n\n\n\n\n::: {.cell layout-align=\"center\" output-location='column'}\n\n```{.r .cell-code}\nhead(gambling_pca_cov$x[, 1:4], 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         PC1       PC2       PC3        PC4\n1 -2.5448889 1.2879590 1.5823332 -1.8230315\n2  2.1851408 0.3646125 0.1984711  0.2642768\n3 -0.6179050 0.6644431 0.2403178  0.3784284\n4  0.1443078 1.1269409 1.5393139 -0.1311429\n5  0.1443078 1.1269409 1.5393139 -0.1311429\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(density(gambling_pca_cov$x[, 1]), \n     main = \"first PC\")\n```\n\n::: {.cell-output-display}\n![](Lecture12_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n\n## PCA Summary\n\n-   PCA is a **data reduction** technique that relies on the mathematical properties of eigenvalues and eigenvectors\n    -   Used to create new variables (small number) out of the old data (lots of variables)、\n    -   The new variables are principal components (they are not factor scores)\n-   PCA appeared first in the psychometric literature\n    -   Many “factor analysis” methods used variants of PCA before likelihood-based statistics were available\n-   Currently, PCA (or variants) methods are the default option in SPSS and SAS (PROC FACTOR)\n\n## Potentially Solvable Statistical Issues in PCA\n\n-   The typical PCA analysis also has a few statistical concerns\n    -   Some of these can be solved if you know what you are doing\n    -   The typical analysis (using program defaults) does not solve these\n-   Missing data is omitted using listwise deletion – biases possible\n    -   Could use ML to estimate covariance matrix, but then would have to assume multivariate normality\n    -   Could use MI to impute data\n-   The distributions of variables can be anything…but variables with much larger variances will look like they contribute more to each component\n    -   Could standardize variables – but some can’t be standardized easily (think gender)\n-   The lack of standard errors makes the component weights (eigenvector elements) hard to interpret\n    -   Can use a resampling/bootstrap analysis to get SEs (but not easy to do)\n\n## (Unsolvable) Issues with PCA\n\n-   My issues with PCA involve the two questions in need of answers for any use of PCA:\n\n1.  The number of components needed is not based on a statistical hypothesis test and hence is subjective\n    -   Variance accounted for is a descriptive measure\n    -   No statistical test for whether an additional component significantly accounts for more variance\n2.  The relative meaning of each component is questionable at best and hence is subjective\n    -   Typical packages provide no standard errors for each eigenvector weight (can be obtained in bootstrap analyses)\n    -   No definitive answer for component composition\n\n-   In sum, I feel it is very easy to be misled (or purposefully mislead) with PCA\n\n# EXPLORATORY FACTOR ANALYSIS (EFA)\n\n## Primary Purpose of EFA\n\n-   **EFA**: “Determine nature and number of latent variables that account for observed variation and covariation among set of observed indicators (≈ items or variables)”\n    -   In other words, what causes these observed responses?\n    -   Summarize patterns of correlation among indicators\n    -   Solution is an end (i.e., is of interest) in and of itself\n-   Compared with **PCA**: “Reduce multiple observed variables into fewer components that summarize their variance”\n    -   In other words, how can I abbreviate this set of variables?\n    -   Solution is usually a means to an end\n\n## Methods for EFA\n\n-   You will see many different types of methods for “extraction” of factors in EFA\n    -   Many are PCA-based\n    -   Most were developed before computers became relevant or likelihood theory was developed\n-   You can ignore all of them and focus on one:\n    -   Only use **Maximum Likelihood** method for EFA\n-   The maximum likelihood method of EFA extraction:\n    -   Uses the same log-likelihood as confirmatory factor analyses/SEM\n        -   Default assumption: multivariate normal distribution of data\n    -   Provides consistent estimates with good statistical properties (assuming you have a large enough sample)\n    -   Missing data using all the data that was observed (MAR)\n    -   Is consistent with modern statistical practices\n\n## Questions when using EFA\n\n-   EFAs proceed by seeking the answers to two questions: (the same questions posed in PCA; but with different terms)\n    1.  How many latent factors are needed to “adequately” represent the original data?\n        -   “Adequately” = does a given EFA model fit well?\n    2.  (once #1 has been answered): What does each factor represent?\n        -   The term “represent” is fuzzy\n\n## The Syntax of Factor Analysis\n\n-   Factor analysis works by hypothesizing that a set of latent factors helps to determine a person’s response to a set of variables\n\n    -   This can be explained by a system of simultaneous linear models\n    -   Here Y = observed data, p = person, v = variable, F = factor score (Q factors)\n\n$$\n\\begin{array}{c}\nY_{p 1}=\\mu_{y_{1}}+\\lambda_{11} F_{p 1}+\\lambda_{12} F_{p 2}+\\cdots+\\lambda_{1 Q} F_{p Q}+e_{p 1} \\\\\nY_{p 2}=\\mu_{y_{2}}+\\lambda_{21} F_{p 1}+\\lambda_{22} F_{p 2}+\\cdots+\\lambda_{2 Q} F_{p Q}+e_{p 2} \\\\\n\\vdots \\\\\nY_{p V}=\\mu_{y_{V}}+\\lambda_{V 1} F_{p 1}+\\lambda_{V 2} F_{p 2}+\\cdots+\\lambda_{V Q} F_{p Q}+e_{p V}\n\\end{array}   \n$$\n\n-   $\\mu_{y_v}$ = mean for variable $v$;\n-   $\\lambda_{vq}$ = factor loading for variable v onto factor f (regression slope)\n    -   Factors are assumed distributed MVN with zero mean and (for EFA) identity covariance matrix (uncorrelated factors – to start)\n-   $e_{pv}$ = residual for person p and variable v;\n    -   Residuals are assumed distributed MVN (across items) with a zero mean and a diagonal covariance matrix $\\mathbf\\Psi$ containing the unique variances\n-   Often, this gets shortened into matrix form:\n\n$$\n\\mathbf{Y_p = \\mu_Y+\\Lambda F_p^T + e_p}\n$$\n\n## Diagram of EFA\n\n![Latent factors are common factors of observed variables](images/clipboard-2439552403.png){fig-align=\"center\" width=\"800\"}\n\n## How Maximum Likelihood EFA Works\n\n-   Maximum likelihood EFA assumes the data follow a multivariate normal distribution\n    -   The basis for the log-likelihood function (same log-likelihood we have used in every analysis to this point)\n-   The log-likelihood function depends on two sets of parameters: the mean vector and the covariance matrix\n    -   Mean vector is saturated (just uses the item means for item intercepts) – so it is often not thought of in analysis\n        -   Denoted as $\\boldsymbol\\mu_y = \\boldsymbol\\mu_I$\n    -   Covariance matrix is what gives \"factor structure\"\n        -   EFA models provide a structure for the covariance matrix\n\n## The EFA Model for the Covariance Matrix\n\n-   The covariance matrix is modeled based on how it would look if a set of hypothetical (latent) factors had caused the data\n\n-   For an analysis measuring $F$ factors, each item in the EFA:\n\n    -   Has 1 unique variance parameter\n    -   Has F factor loadings\n\n-   The initial estimation of factor loadings is conducted based on the assumption of uncorrelated factors\n\n    -   Assumption is dubious at best – yet is the cornerstone of the analysis\n\n## Model Implied Covariance Matrix\n\n-   The factor model implied covariance matrix is $\\boldsymbol{\\Sigma_Y=\\Lambda\\Phi\\Lambda^T+\\Psi}$\n    -   Where:\n        -   $\\boldsymbol{\\Sigma_Y}$ = model implied covariance matrix of the observed data (size $I \\times I$)\n        -   $\\boldsymbol{\\Lambda}$ = matrix of factor loadings (size $I \\times F$)\n            -   In EFA: all terms in $\\boldsymbol{\\Lambda}$ are estimated\n        -   $\\boldsymbol{\\Phi}$ = factor covariance matrix (size $F \\times F$) – In EFA: $\\boldsymbol{\\Phi}$ = $\\boldsymbol{I}$ (all factors have variances of 1 and covariances of 0)\n            -   In CFA: this is estimated\n        -   $\\boldsymbol{\\Psi}$ = matrix of unique (residual) variances (size $I \\times I$)\n            -   In EFA: $\\boldsymbol{\\Psi}$ is diagonal by default (no residual covariances)\n-   Therefore, the EFA model-implied covariance matrix is:\n\n$$\n\\boldsymbol{\\Sigma}_{Y}=\\boldsymbol{\\Lambda} \\mathbf{\\Lambda}^{T}+\\boldsymbol{\\Psi}\n$$\n\n## EFA Model Identifiability\n\n-   Under the ML method for EFA, the same rules of identification apply to EFA as to Path Analysis\n    -   **T-rule**: Total number of EFA model parameters must not exceed unique elements in saturated covariance matrix of data\n        -   For an analysis with a number of factors $F$ and a set number of items $I$ there are $F*I+I=I(F+1)$ EFA model parameters\n        -   As we will see, there must be $\\frac{F(F-1)}{2}$ constraints for the model to work\n        -   Therefore, $I(F+1)-\\frac{F(F-1)}{2}<\\frac{I(I+1)}{2}$\n    -   **Local identification**: each portion of the model must be locally identified\n        -   With all factor loadings estimated local identification fails\n            -   No way of differentiating factors without constraints\n\n## Constraints to Make EFA in ML Identified\n\n-   The EFA model imposes the following constraint: $$\n    \\mathbf{\\Lambda^T\\Psi\\Lambda=\\Delta}\n    $$\n\nsuch that $\\mathbf\\Delta$ is a diagonal matrix\n\n-   This puts $\\frac{F(F-1)}{2}$ constraints on the model (that many fewer parameters to estimate).\n\n-   This constraint is not well known – and how it functions is hard to describe\n\n    -   For a 1-factor model, the results of EFA and CFA will match\n\n-   Note: the other methods of EFA “extraction” avoid this constraint by not being statistical models in the first place\n\n    -   PCA-based routines rely on matrix properties to resolve identification\n\n## The Nature of the Constraints in EFA\n\n-   The EFA constraints provide some detailed assumptions about the nature of the factor model and how it pertains to the data\n\n-   For example, take a 2-factor model (one constraint):\n\n$$\n\\sum_{v=1}^{V} \\psi_{v}^{2} \\prod_{f=1}^{Q=2} \\lambda_{v f}=0\n$$\n\n-   In short, some combinations of factor loadings and unique variances (across and within items) cannot happen\n\n    -   This goes against most of our statistical constraints – which must be justifiable and understandable (therefore testable)\n    -   This constraint is not testable in CFA\n\n## Benefits and Consequences of EFA with ML\n\n-   The parameters of the EFA model under ML retain the same benefits and consequences of any model (i.e., CFA)\n\n    -   Asymptotically (large N) they are consistent, normal, and efficient\n    -   Missing data are “skipped” in the likelihood, allowing for incomplete observations to contribute (assumed MAR)\n\n-   Furthermore, the same types of model fit indices are available in EFA as are in CFA\n\n-   As with CFA, though, an EFA model must be a close approximation to the saturated model covariance matrix if the parameters are to be believed\n\n## ML-based EFA Using the `factanal()` Function\n\n-   The base R program has the `factanal()` function that conducts ML-based EFA\n\n-   Although the function use ML, you still **cannot have missing data** in the analysis based of the limitations of `factanal` function\n\n    -   Thus, we will remove cases with any missing data (listwise deletion) and proceed\n\n-   We will also not use a rotation method at first as to show how default constraints in EFA with ML are ridiculous\n\n## Step 1: Determine Number of Factors\n\n-   The EFA `factanal()` function provides a rudimentary test for model fit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#one-factor model\nEFA_1factor = factanal(x = data02a, factors = 1, rotation = \"none\")\nEFA_1factor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nfactanal(x = data02a, factors = 1, rotation = \"none\")\n\nUniquenesses:\n   X1    X3    X5    X9   X10   X13   X14   X18   X21   X23 \n0.677 0.728 0.550 0.417 0.527 0.488 0.857 0.816 0.538 0.573 \n\nLoadings:\n    Factor1\nX1  0.569  \nX3  0.521  \nX5  0.670  \nX9  0.764  \nX10 0.688  \nX13 0.715  \nX14 0.378  \nX18 0.429  \nX21 0.680  \nX23 0.653  \n\n               Factor1\nSS loadings      3.828\nProportion Var   0.383\n\nTest of the hypothesis that 1 factor is sufficient.\nThe chi square statistic is 161.14 on 35 degrees of freedom.\nThe p-value is 4.23e-18 \n```\n\n\n:::\n:::\n\n\n\n\n-   Remember the saturated model from path analysis?\n    -   All covariances estimated\n-   The model fit tests the solution from EFA vs the saturated model\n    -   EFA 1-factor model shown\n-   The goal is to find a model that fits well\n\n# A quick example using EFA\n\n## Step 1: Select Best Model: Chi-square\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nchi_sq_test <- function(mod) {\n  num_factor <- mod$factors\n  chi_stat <- round(mod$STATISTIC, 3)\n  dof <- mod$dof\n  p_value <- round(mod$PVAL, 4)\n  print(glue::glue(\"{num_factor}-factor model: The chi square statistic is {chi_stat} on {dof} degrees of freedom. The p-value is {p_value}\"))\n}\n\n#one-factor model\nEFA_1factor = factanal(x = data02a, factors = 1, rotation = \"none\")\nchi_sq_test(EFA_1factor)\n\n#two-factor model\nEFA_2factor = factanal(x = data02a, factors = 2, rotation = \"none\")\nchi_sq_test(EFA_2factor)\n\n#three-factor model\nEFA_3factor = factanal(x = data02a, factors = 3, rotation = \"none\")\nchi_sq_test(EFA_3factor)\n\n#four-factor model\nEFA_4factor = factanal(x = data02a, factors = 4, rotation = \"none\")\nchi_sq_test(EFA_4factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1-factor model: The chi square statistic is 161.138 on 35 degrees of freedom. The p-value is 0\n2-factor model: The chi square statistic is 56.428 on 26 degrees of freedom. The p-value is 5e-04\n3-factor model: The chi square statistic is 31.235 on 18 degrees of freedom. The p-value is 0.027\n4-factor model: The chi square statistic is 10.2 on 11 degrees of freedom. The p-value is 0.5125\n```\n\n\n:::\n:::\n\n\n\n\n## Step 2: Interpreting the Best Model\n\n-   As the four-factor solution fit best, we will interpret it\n\n-   Unrotated solution of factor loadings:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEFA_4factor$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n    Factor1 Factor2 Factor3 Factor4\nX1   0.356   0.457   0.127   0.346 \nX3   0.322   0.403                 \nX5   0.452   0.480   0.174         \nX9   0.468   0.630   0.196  -0.144 \nX10  0.458   0.502   0.186         \nX13  0.509   0.494                 \nX14  0.292   0.227                 \nX18  0.316   0.294  -0.141   0.128 \nX21  0.491   0.548  -0.408         \nX23  0.997                         \n\n               Factor1 Factor2 Factor3 Factor4\nSS loadings      2.542   1.933   0.327   0.183\nProportion Var   0.254   0.193   0.033   0.018\nCumulative Var   0.254   0.447   0.480   0.499\n```\n\n\n:::\n:::\n\n\n\n\n-   F1 has the most number of relationships with all items of gambling (general gambling level?), followed by F2 (special type of gambling?), F3, and F4. It is very difficult to know what each factor really means.\n\n## Step 3: Rotations of Factor Loadings in EFA\n\n-   Transformations of the factor loadings are possible as the matrix of factor loadings is only unique up to an orthogonal transformation\n\n-   Historically, rotations use the properties of matrix algebra to adjust the factor loadings to more interpretable numbers\n\n-   Modern versions of rotations/transformations rely on “target functions” that specify what a “good” solution should look like\n\n## Step 3: Types of Classical Rotated Solutions\n\n-   Multiple types of rotations exist but two broad categories seem to dominate how they are discussed:\n\n-   Orthogonal rotations: rotations that force the factor correlation to zero (orthogonal factors). The name orthogonal relates to the angle between axes of factor solutions being 90 degrees. The most prevalent is the varimax rotation.\n\n-   Oblique rotations: rotations that allow for non-zero factor correlations. The name orthogonal relates to the angle between axes of factor solutions not being 90 degrees. The most prevalent is the promax rotation.\n\n    -   These rotations provide an estimate of “factor correlation”\n\n## Step 3: How Classical Orthogonal Rotation Works\n\n-   Classical orthogonal rotation algorithms work by defining a new rotated set of factor loadings 𝚲∗ as a function of the original (non-rotated) loadings $\\mathbf\\Lambda$ and an orthogonal rotation matrix $\\mathbf T$\n\n$$\n\\mathbf{\\Lambda}^{*}=\\boldsymbol{\\Lambda} \\mathbf{T}\n$$\n\nwhere: $\\mathbf {TT^T=T^TT = I}$\n\n$$\n\\begin{array}{l}\n\\boldsymbol{\\Sigma}_{Y}=\\boldsymbol{\\Lambda}^{*} \\boldsymbol{\\Lambda}^{* T}+\\boldsymbol{\\Psi}=\\boldsymbol{\\Lambda} \\mathbf{T}(\\boldsymbol{\\Lambda} \\mathbf{T})^{T}+\\boldsymbol{\\Psi}=\\boldsymbol{\\Lambda} \\mathbf{T T}^{T} \\boldsymbol{\\Lambda}^{T}+\\boldsymbol{\\Psi} \\\\\n=\\boldsymbol{\\Lambda} \\boldsymbol{\\Lambda}^{T}+\\boldsymbol{\\Psi}\n\\end{array}\n$$\n\n## Rotation Algorithms\n\n-   Given a target function, rotation algorithms seek to find a rotated solution that simultaneously:\n\n    -   Minimizes the distance between the rotated solution and the original factor loadings\n    -   Fits best to the target function\n    \n    \n## Example: Orthogonal Rotation via Varimax\n\n-   no factor correlation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#varimax rotation\nEFA_4factor_varimax = factanal(x = data02a, factors = 4, rotation = \"varimax\")\nEFA_4factor_varimax$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n    Factor1 Factor2 Factor3 Factor4\nX1  0.301   0.209   0.114   0.569  \nX3  0.360   0.213   0.113   0.307  \nX5  0.532   0.224   0.202   0.301  \nX9  0.714   0.291   0.157   0.239  \nX10 0.597   0.231   0.202   0.234  \nX13 0.414   0.461   0.236   0.268  \nX14 0.224   0.129   0.162   0.242  \nX18 0.147   0.346   0.144   0.246  \nX21 0.300   0.746   0.184   0.166  \nX23 0.266   0.270   0.904   0.188  \n\n               Factor1 Factor2 Factor3 Factor4\nSS loadings      1.772   1.255   1.086   0.873\nProportion Var   0.177   0.125   0.109   0.087\nCumulative Var   0.177   0.303   0.411   0.499\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Example: Oblique Rotation via Promax\n\n-   It also brought about the following factor correlations:\n\n-   Each factor explain different sets of items\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#promax rotation\nEFA_4factor_varimax = factanal(x = data02a, factors = 4, rotation = \"promax\")\nEFA_4factor_varimax$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n    Factor1 Factor2 Factor3 Factor4\nX1                  -0.104   0.861 \nX3   0.249                   0.308 \nX5   0.530                   0.171 \nX9   0.885                         \nX10  0.699                         \nX13  0.254           0.368   0.101 \nX14                          0.274 \nX18 -0.126           0.314   0.269 \nX21                  0.906  -0.106 \nX23          1.037                 \n\n               Factor1 Factor2 Factor3 Factor4\nSS loadings      1.712   1.102   1.072   1.040\nProportion Var   0.171   0.110   0.107   0.104\nCumulative Var   0.171   0.281   0.389   0.493\n```\n\n\n:::\n:::\n\n\n\n\n## Wrapping Up\n\n-   Today we discussed the world of exploratory factor analysis and found the following:\n\n    1. PCA is what people typically run before they found EFA\n    2. ML EFA is a better option to pick (likelihood based)\n    3. Constraints of EFA employed are hidden!\n    4. Rotations can break without you realizing they do (cannot interpret the factors)\n",
    "supporting": [
      "Lecture12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}