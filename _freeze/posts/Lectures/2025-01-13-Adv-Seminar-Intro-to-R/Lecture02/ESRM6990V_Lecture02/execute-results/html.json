{
  "hash": "552e23388ae4213c1159d17a9db0d96d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 01: Basics of R\"\nsubtitle: \"Getting Started\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-10-09\"\ndate-modified: \"2024-10-11\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\n  eval: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 08: Multivariate Analysis\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n\n## Today's Class\n\n1.  R objects and prebuilt function\n2.  Data types\n3.  Vectors\n4.  Coercion\n5.  Not available (NA)\n6.  Sorting\n7.  Vector arithmetics\n8.  Indexing\n9.  Basic Plot\n\n# R Object and Pre-built function\n\n## Objects\n\n-   To do data clean, data analysis, or statistics, we need to store some information and manipulate it in R. The information that we can create/change/remove is called R **object**.\n\n-   Suppose we want to solve several quadratic equations of the form $x^2 + x - 1 = 0$. We know that the quadratic formula gives us the solutions:\n\n    $$\n    \\frac{-b\\pm\\sqrt{b^2 -4ac}}{2a}\n    $$\n\n-   The solution depend on the values of a, b, and c. One advantage of programming languages is that we can **define** variables and **write** expressions with these variables\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    coef_a <- 1\n    coef_b <- 1\n    coef_c <- -1\n    ```\n    :::\n\n\n\n\n-   We use `<-` to **assign** values to the variables. We can also assign values using `=` instead of `<-`, but we recommend against using `=` to avoid confusion.\n\n-   To **see** the value stored in a variable, we simply ask R to evaluate `coef_a` and it shows the stored value:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    coef_a\n    #> [1] 1\n    ```\n    :::\n\n\n\n\n    -   A more explicit way to ask R to show us the value stored in `coef_a` is using `print` function like this (`print` is a prebuilt function in R, we will explain later):\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    print(coef_a)\n    #> [1] 1\n    ```\n    :::\n\n\n\n\n## Workspace\n\n-   So we have object, then where they are stored in R. The workspace is the place storing the objects we can use:\n\n-   You can see all the variables saved in your workspace by typing:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ls()\n    ```\n    :::\n\n\n\n\n-   In RStudio, the *Environment* tab shows the values:\n\n    ![](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/rstudio-environment.png)\n\n-   We should see `coef_a`, `coef_b`, and `coef_c`. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type `x` you will receive the following message: `Error: object 'x' not found`.\n\n-   Now since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    (-coef_b + sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)\n    #> [1] 0.618\n    (-coef_b - sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)\n    #> [1] -1.62\n    ```\n    :::\n\n\n\n\n## Prebuilt functions\n\n-   **Function**: Once we defined the objects, the data analysis process can usually be described as a series of *functions* applied to the data.\n\n    -   R includes several **predefined functions** and most of the analysis pipelines we construct make extensive use of these.\n\n    -   We already used or discussed the `install.packages`, `library`, and `ls` functions. We also used the function `sqrt` to solve the quadratic equation above.\n\n-   **Evaluation**: In general, we need to use parentheses followed by a function name to evaluate a function.\n\n    -   If you type `ls`, the function is not evaluated and instead R shows you the code that defines the function. If you type [`ls()`](https://rdrr.io/r/base/ls.html) the function is evaluated and, as seen above, we see objects in the workspace.\n\n-   **Function Arguments:** Unlike `ls`, most functions require one or more *arguments* to specify the settings of the function.\n\n    -   For example, we assign different object to the argument of the function `log`. Remember that we earlier defined `coef_a` to be 1:\n\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        log(8)\n        #> [1] 2.08\n        log(coef_a) \n        #> [1] 0\n        ```\n        :::\n\n\n\n\n------------------------------------------------------------------------\n\n-   **Help**: You can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the `help` function like this:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    help(\"log\")\n    ?log\n    ```\n    :::\n\n\n\n\n    -   The help page will show you what arguments the function is expecting. For example, `log` needs `x` and `base` to run.\n\n    -   The base of the function `log` defaults to `base = exp(1)` making `log` the natural log by default.\n\n        ![](images/clipboard-1863636552.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}