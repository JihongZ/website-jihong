{
  "hash": "082fca23d86dc5dcf20f96904d9af9cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example 01: Basics of R\"\nsubtitle: \"Getting Started\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-01-15\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\n  eval: true\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n# Example 01: Math/Comments/Functions\n\n## Coding Basics\n\n-   Use R for basic math, like `1 / 200 * 30`.\n-   Create objects using the assignment operator `<-`, for example, `x <- 3 * 4`.\n-   Vectors can be formed using `c()`, like `primes <- c(2, 3, 5, 7, 11, 13)`.\n-   Utilize keyboard shortcuts in RStudio for efficiency.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 / 200 * 30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.15\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1] 0.15\n(59 + 73 + 2) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 44.66667\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1] 44.66667\nsin(pi / 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1] 1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprimes <- c(2, 3, 5, 7, 11, 13)\nprimes * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  6 10 14 22 26\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1]  4  6 10 14 22 26\nprimes - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  4  6 10 12\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1]  1  2  4  6 10 12\n```\n:::\n\n\n\n## Comments\n\n-   R ignores text after `#`, which allows for inline documentation.\n-   Comments should explain the purpose and rationale behind code sections.\n-   Avoid over-commenting straightforward code; focus on complex logic.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create vector of primes\nprimes <- c(2, 3, 5, 7, 11, 13)\n\n# multiply primes by 2\nprimes * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  6 10 14 22 26\n```\n\n\n:::\n\n```{.r .cell-code}\n#> [1]  4  6 10 14 22 26\n```\n:::\n\n\n\n## Name of R object\n\n-   R Object names should start with a letter and can include numbers, `_`, and `.`.\n-   Use snake_case for clarity in names involving multiple words.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthis_is_a_really_long_name <- 2.5\nr_rocks <- 2^3\n```\n:::\n\n\n\n## Calling Functions\n\n-   Built-in functions are called by specifying arguments, like `function_name(value1, value2)`.\n-   Use RStudio’s auto-completion and tooltips to assist in function usage.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(argument1 = value1, argument2 = value2, ...)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n## Install R Package\n\n-   You can install external package to use more functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\n\n-   Both `ggplot()` and `geom_point()` are functions included in the package `ggplot2`\n-   To use them, you need to load the package `ggplot2` using `library()` function\n-   `mapping`, `color`, and `size` are called arguments of `geom_point()` for detailed settings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot() +\n  geom_point(mapping = aes(x = 1:100, y = 100:1), \n             color = \"tomato\", \n             size = 2)\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Example01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n# Exercises\n\n## Exercise 01: Edit R script\n\nLet's try the following steps:\n\n1.  Opening a new script as we just did\n\n2.  Give the script a name by saving the current new unnamed script (`ctrl + S` for Win and `Cmd + S` for Mac)\n\n3.  A good convention is to use a descriptive name, with lower case letters, no spaces, only hyphens to separate words, and then followed by the suffix `.R`. We will call this script `my-first-script.R`.\n\n4.  Now we are ready to start editing our first script.\n\n5.  We install a R package called `tidyverse` in **Console**.\n\n6.  We add the code to load the `tidyverse` package in the script\n\n7.  We add the following code in the script. Run the whole script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\") # install one package called \"remotes\"\nlibrary(\"remotes\") # load the package into your R session\ninstall_github(repo = \"JihongZ/ESRM6990V\") # install one GitHub package from my GitHub repository\nlibrary(ESRM6990V) # load the package into your R session\njihong(details = TRUE) # call one function called \"jihong\" from the package\n\n# Left\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_smooth()\n\n# Middle\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_smooth(aes(group = drv))\n\n# Right\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_smooth(aes(color = drv), show.legend = FALSE)\n```\n:::\n\n\n\n8.  Finally, we save the script.\n\n::: callout-note\n## Dataset `mpg`\n\n-   `displ`: A car’s engine size, in liters. A numerical variable.\n\n-   `hwy`: A car’s fuel efficiency on the highway, in miles per gallon (mpg). A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance. A numerical variable.\n\n-   `class`: Type of car. A categorical variable.\n:::\n",
    "supporting": [
      "ESRM6990V_Example01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}