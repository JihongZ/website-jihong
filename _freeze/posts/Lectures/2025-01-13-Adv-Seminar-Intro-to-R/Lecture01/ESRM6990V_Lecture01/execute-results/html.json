{
  "hash": "9a08634e22bc076b5a5ff95cdcc25e30",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 01: Basics of R\"\nsubtitle: \"Getting Started\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-10-09\"\ndate-modified: \"2024-10-11\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\n  eval: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 01: Introduction to R\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n## Today's Class\n\n1.  Why using R?\n    1.  Brief history of R\n    2.  Main features of R\n2.  Installation of R\n3.  How to use RStudio\n\n# Why R?\n\n## Brief History\n\n-   **1975-1976**: S (Book: [*A Brief History of S*](https://sas.uwaterloo.ca/~rwoldfor/software/R-code/historyOfS.pdf)) grew up in the statistics research departments (John Chambers and others) at Bell Laboratories\n\n    -   To bring interactive computing to bear on statistics and data analysis problem\n\n-   **1993**: Prof. [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka \"Ross Ihaka\") and [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)) from University of Auckland posted first binary file of R to teach introductory statistics\n\n-   **1995**: Martin Mächler made an important contribution by convincing Ross and Robert to use the [GNU General Public License](http://www.gnu.org/licenses/gpl-2.0.html) to make R free software\n\n-   **1997**: The [Comprehensive R Archive Network](https://en.wikipedia.org/wiki/R_package#Comprehensive_R_Archive_Network_(CRAN) \"R package\") (**CRAN**) was founded by Kurt Hornik and [Friedrich Leisch](https://en.wikipedia.org/wiki/Friedrich_Leisch \"Friedrich Leisch\") to host R's [source code](https://en.wikipedia.org/wiki/Source_code \"Source code\"), executable files, documentation, and user-created packages\n\n-   **2000**: the first official 1.0 version of R was released\n\n-   **2024**: R ver. 4.2.1\n\n## Example of S Language\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nX = 1:5 # A vector of numbers from 1 to 5\nX[c(TRUE, TRUE, TRUE, FALSE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nX[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nX[-1:3]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in X[-1:3]: only 0's may be mixed with negative subscripts\n```\n\n\n:::\n\n```{.r .cell-code}\nX[-(1:3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nX[NULL]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninteger(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nX[NA]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\nX[]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n## Main Feature of R\n\n1.  it was developed by statisticians as an interactive environment for data analysis rather than C or Java that created by software development.\n2.  The interactivity of R is an indispensable feature in data science\n3.  However, like in other programming languages, you can save your work in R as scripts that can be easily executed at any moment.\n4.  If you are an expert programmer, you should not expect R to follow the conventions you are used to since you will be disappointed.\n\n## Attractive Features of R\n\n-   R is free and open source.\n-   It runs on all major platforms: Windows, MacOS, UNIX/Linux.\n-   Scripts and data objects can be shared seamlessly across platforms.\n-   There is a large, growing, and active community of R users and, as a result, there are numerous resources for learning and asking questions.\n    -   [stackoverflow](https://stats.stackexchange.com/questions/138/free-resources-for-learning-r)\n    -   [r-project.com](https://www.r-project.org/help.html)\n-   It is easy for others to contribute add-ons which enables developers to share software implementations of new data science methodologies. This gives R users early access to the latest methods and to tools which are developed for a wide variety of disciplines, including ecology, molecular biology, social sciences, and geography, just to name a few example\n\n# Get started\n\n## R console\n\n-   One way of using R is to simply start R console on your computer (PC).\n\n    -   In Mac, after installing R, simply type in \"R\" in terminal to get started\n\n::: panel-tabset\n## Windows\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/R_console.png){fig-align=\"center\"}\n\n## Mac/Linux\n\n![](terminal_R.png){fig-align=\"center\"}\n:::\n\nAs a quick example, try using the console to calculate a 15% tip on a meal that cost \\$19.71:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0.15 * 19.71\n```\n:::\n\n\n\n# Rstudio (now called Posit)\n\n## Introduce Rstudio\n\n-   RStudio will be our launching pad for data science projects. It not only provides an editor for us to create and edit our scripts but also provides many other useful tools.\n\n-   When you start RStudio for the first time, you will see three panes:\n\n    -   The left pane shows the Code editor (will show when you create a new file) and R console.\n\n    -   On the right, the top pane includes tabs such as *Environment* and *History*, while the bottom pane shows five tabs: *File*, *Plots*, *Packages*, *Help*, and *Viewer* .\n\n-   To start a new script in Code editor, you can click on `File` \\> `New File` \\> `R Script`.\n\n::: panel-tabset\n## Screenshot of Rstudio\n\n![Screenshot of Rstudio](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/rstudio.png){fig-align=\"center\"}\n\n## Start a new script\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_21_42.png){fig-align=\"center\"}\n\n## Start writing your script\n\n![New panel](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_21_49.png){fig-align=\"center\"}\n:::\n\n## Key Binding\n\n-   For the efficient coding, **we highly recommend that you memorize key bindings for the operations you use most**.\n\n-   RStudio provides a useful cheat sheet with the most widely used commands\n\n-   To open the cheat sheet, `Help` \\> `Cheat Sheets` \\> `Rstudio IDE Cheat Sheets`\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_22_20.png){fig-align=\"center\"}\n\n## Global Option\n\n-   You can change the look and functionality of RStudio quite a bit.\n\n-   To change the global options you click on *`Tools`* then *`Global Options`…*.\n\n-   As an example we show how to make a change that we **highly recommend**:\n\n    -   `General` \\> `Basic` \\> `Workspace`: Change the [*Save workspace to .RData*]{.underline} *on exit* to [*Never*]{.underline} .\n\n    -   `General` \\> `Basic` \\> `Workspace`: Uncheck the [*Restore .RData into workspace at startup*]{.underline}to [*Never*]{.underline}\n\n    -   `Code` \\> `Editing`: check [*use the native piper operator, \\|\\>*]{.underline}\n\n::: callout-note\n## .RData file\n\n-   By default, when you exit R saves all the objects you have created into a file called .RData.\n\n-   This is done so that when you restart the session in the same folder, it will load these objects.\n\n-   We find that this causes confusion especially when we share code with colleagues and assume they have this .RData file.\n:::\n\n## Installing R Packages\n\n-   The functionality provided by a fresh install of R is only **a small fraction** of what is possible.\n\n-   We refer to what you get after your first install as *base R*.\n\n    -   You can check base R packages when you type `loadedNamespaces()`\n\n-   The extra functionality comes from add-ons available from developers. We called those add-on functionality as `packages` (similar to python modules)\n\n    -   Currently hundreds of these packages available from CRAN and many others shared via other repositories such as GitHub\n\n## Installing R Packages: Code\n\n-   For example, to install the **`dslabs`** package, you would type the following in your console:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"dslabs\") # DON'T FORGET DOUBLE QUOTE\n    ```\n    :::\n\n\n\n-   We can then load the package into our R sessions using the `library` function in your rscript file:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(dslabs) # DOUBLE QUOTE IS NOT NEEDED HERE\n    ```\n    :::\n\n\n\n-   As you go through this class, you will see that we load packages without installing them. This is because once you install a package, it remains installed and only needs to be loaded with `library`.\n\n-   We can install more than one package at once by feeding a character vector to this function:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(c(\"dplyr\", \"dslabs\"))\n    ```\n    :::\n\n\n\n-   You can see all the packages you have installed using the following function:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    installed.packages()\n    ```\n    :::\n\n\n\n## Let's Practice\n\n1.  Exercise 1\n\n# R Package Structure\n\n## Basic Information\n\n1.  **What**: An R package is a structured collection of R functions, data, and compiled code that is bundled together according to a specific format.\n    -   They can be thought of as libraries or modules in other programming languages.\n2.  **Why**: R Packages are designed to add functionality to R, allowing users to perform specific tasks or analyses that are not covered by the basic installation of R.\n3.  **How:** You can install/uninstall, create, load, and use R packages.\n    -   If you want to build or publish your own package, the Comprehensive R Archive Network (CRAN), Bioconductor, and GitHub are popular repositories where R packages are commonly published and maintained.\n\n## What R package include\n\n-   **Functions**: A set of R functions that perform specific tasks, which are not available in the default R environment.\n\n-   **Data**: Some packages include datasets that are useful for demonstrating functions within the package or for use in specific types of analysis.\n\n-   **Documentation**: Every package comes with documentation that explains how the functions work, the data included (if any), and examples of how to use the package. This is often accessible via R help pages.\n\n-   **Vignettes**: Many packages include vignettes, which are long-form documentation that shows how to use the package functions in a more detailed and contextual way, often in the form of tutorials.\n\n-   **Namespace**: A namespace file that manages how functions from the package are imported and exported, helping avoid naming conflicts between different packages.\n\n-   **Meta-information**: A DESCRIPTION file containing metadata about the package, such as its name, version, dependencies (other packages it requires to function), author, and license information.\n\n## R Package states\n\n1.  When you create or modify a package, you work on its “source code” or “source files”. You interact with the in-development package in its **source** form.\n2.  To better understand package, we need to know the five states of R package:\n    1.  source\n    2.  bundled\n    3.  binary\n    4.  installed\n    5.  in-memory\n3.  We already know two functions:\n    1.  `install.packages()` can move a package from **source/bundled/binary** into **installed** state.\n    2.  `library` can load a package from installed state into memory (**in-memory** state)\n4.  What are source/bundled/binary states then? Why they differ?\n\n## Source package\n\n1.  A source package is just a directory of files with specific structure including:\n    1.  **DESCRIPTION** file\n    2.  `R/` folder containing all `.r` files\n2.  Many R packages on GitHub are in source state\n    1.  `networkscore`: <https://github.com/JihongZ/networkscore>\n    2.  `esrm64503`: <https://github.com/JihongZ/ESRM64503>\n3.  You may also find some `tar.gz` file on packages' CRAN landing page via the “Package source” field (this is the bundled state of the package). Decompressing the `tar.gz` file will have the source directory including `R/` and `DESCRIPTION`\n    1.  forcats: <https://cran.r-project.org/web/packages/forcats/index.html>\n    2.  You can depress using commands in terminal like:\n\n``` bash\ntar xvf forcats_0.4.0.tar.gz\n```\n\n## Bundled package\n\n1.  A bundled package is a package that's been compressed into a single file (this process is called `build` the package). Bundled state is a compressed form of package with only single file.\n\n2.  By convention, package bundles in R use the extension `.tar.gz` and are sometimes referred to as \"source tarballs\". In computer science, it is called gzipped tar file format.\n\n3.  A \"source tarballs\" file is not simply compressed file of source directory. When build source directory into bundled (.tar.gz), a few diagnostic checks and cleanups are performed. See more details [here](https://cran.r-project.org/doc/manuals/R-exts.html#Building-package-tarballs).\n\n## Binary package\n\n1.  If you want to distribute your package to an R user who doesn’t have package development tools, you’ll need to provide a **binary** package. The main distributor of **binary** package is CRAN.\n\n2.  Like a package bundle, a binary package is a single file. Unlike a bundled package, a binary package is platform specific and there are two basic flavors: Windows and macOS.\n\n3.  CRAN packages are usually available in binary form:\n\n    -   forcats for macOS: forcats_0.4.0.tgz\n    -   readxl for Windows: readxl_1.3.1.zip\n\n4.  This is, indeed, part of what’s usually going on behind the scenes when you call `install.packages()`.\n\n5.  Uncompressing binary file will give you totally difference file structure than source/bundled package.\n\n    -   There are no .R files in the R/ directory - instead there are three files that store the parsed functions in an efficient file format.\n\n![](images/clipboard-1257891007.png)\n\n## Installed package\n\n1.  An installed package is a binary package that's been decompressed into a package library\n\n2.  In practice, you don't need to care about stats if you install popular package, unless you have issues installing R package via `install.packages()` or you install in-development packages .\n\n![](images/clipboard-400935868.png)\n\n## In-memory package\n\n1.  When we use `library()` function, we load installed package into the memory of R.\n2.  This is the last step of using the package in our R task.\n3.  When you call `library(somepackage)`, R looks through the current libraries for an installed package named “somepackage” and, if successful, it makes somepackage available for use.\n\n# Next Week\n\n## Preparation: Make Contribute to Github R Package\n\n1.  Make sure you have set up a [GitHub account](https://github.com/)\n2.  Make sure you download the [GitHub Desktop](https://desktop.github.com/download/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}