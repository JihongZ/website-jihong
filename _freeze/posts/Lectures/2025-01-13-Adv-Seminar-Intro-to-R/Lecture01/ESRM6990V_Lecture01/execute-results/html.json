{
  "hash": "1523c06b3206754d68c636c17f18b3e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 01: Basics of R\"\nsubtitle: \"Getting Started\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-10-09\"\ndate-modified: \"2024-10-11\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\n  eval: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 08: Multivariate Analysis\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n  html: \n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-expand: true\n    lightbox: true\n    code-fold: false\n    fig-align: center\nfilters:\n  - quarto\n  - line-highlight\n---\n\n\n\n\n# Why R?\n\n## Brief History\n\n-   **1975-1976**: S (Book: [*A Brief History of S*](https://sas.uwaterloo.ca/~rwoldfor/software/R-code/historyOfS.pdf)) grew up in the statistics research departments (John Chambers and others) at Bell Laboratories\n\n    -   To bring interactive computing to bear on statistics and data analysis problem\n\n-   **1993**: Prof. [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka \"Ross Ihaka\") and [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)) from University of Auckland posted first binary file of R to teach introductory statistics\n\n-   **1995**: Martin Mächler made an important contribution by convincing Ross and Robert to use the [GNU General Public License](http://www.gnu.org/licenses/gpl-2.0.html) to make R free software\n\n-   **1997**: The [Comprehensive R Archive Network](https://en.wikipedia.org/wiki/R_package#Comprehensive_R_Archive_Network_(CRAN) \"R package\") (**CRAN**) was founded by Kurt Hornik and [Friedrich Leisch](https://en.wikipedia.org/wiki/Friedrich_Leisch \"Friedrich Leisch\") to host R's [source code](https://en.wikipedia.org/wiki/Source_code \"Source code\"), executable files, documentation, and user-created packages\n\n-   **2000**: the first official 1.0 version of R was released\n\n## Example of S Language: the Subscripting Operator / Indexing\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nX = 1:5 # A vector of numbers from 1 to 5\nX[c(TRUE, TRUE, TRUE, FALSE, FALSE)]\nX[1:3]\nX[-1:3]\nX[-(1:3)]\nX[NULL]\nX[NA]\nX[]\n```\n:::\n\n\n\n\n## Main Feature of R\n\n1.  it was developed by statisticians as an interactive environment for data analysis rather than C or Java that created by software development.\n2.  The interactivity of R is an indispensable feature in data science\n3.  However, like in other programming languages, you can save your work in R as scripts that can be easily executed at any moment.\n4.  If you are an expert programmer, you should not expect R to follow the conventions you are used to since you will be disappointed.\n\n## Attractive Features of R\n\n-   R is free and open source.\n-   It runs on all major platforms: Windows, MacOS, UNIX/Linux.\n-   Scripts and data objects can be shared seamlessly across platforms.\n-   There is a large, growing, and active community of R users and, as a result, there are numerous resources for learning and asking questions.\n    -   [stackoverflow](https://stats.stackexchange.com/questions/138/free-resources-for-learning-r)\n    -   [r-project.com](https://www.r-project.org/help.html)\n-   It is easy for others to contribute add-ons which enables developers to share software implementations of new data science methodologies. This gives R users early access to the latest methods and to tools which are developed for a wide variety of disciplines, including ecology, molecular biology, social sciences, and geography, just to name a few example\n\n# Get started\n\n## R console\n\n-   One way of using R is to simply start R console on your computer (PC).\n\n    -   In Mac, after installing R, simply type in \"R\" in terminal to get started\n\n::: panel-tabset\n## Windows\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/R_console.png){fig-align=\"center\"}\n\n## Mac/Linux\n\n![](terminal_R.png){fig-align=\"center\"}\n:::\n\nAs a quick example, try using the console to calculate a 15% tip on a meal that cost \\$19.71:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0.15 * 19.71\n```\n:::\n\n\n\n\n# Rstudio (now called Posit)\n\n## Introduce Rstudio \n\n-   RStudio will be our launching pad for data science projects. It not only provides an editor for us to create and edit our scripts but also provides many other useful tools.\n\n-   When you start RStudio for the first time, you will see three panes:\n\n    -   The left pane shows the Code editor (will show when you create a new file) and R console.\n\n    -   On the right, the top pane includes tabs such as *Environment* and *History*, while the bottom pane shows five tabs: *File*, *Plots*, *Packages*, *Help*, and *Viewer* .\n\n-   To start a new script in Code editor, you can click on `File` \\> `New File` \\> `R Script`.\n\n::: panel-tabset\n## Screenshot of Rstudio\n\n![Screenshot of Rstudio](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/rstudio.png){fig-align=\"center\"}\n\n## Start a new script\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_21_42.png){fig-align=\"center\"}\n\n## Start writing your script\n\n![New panel](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_21_49.png){fig-align=\"center\"}\n:::\n\n## Key Binding\n\n-   For the efficient coding, **we highly recommend that you memorize key bindings for the operations you use most**.\n\n-   RStudio provides a useful cheat sheet with the most widely used commands\n\n-   To open the cheat sheet, `Help` \\> `Cheat Sheets` \\> `Rstudio IDE Cheat Sheets`\n\n![](https://rafalab.dfci.harvard.edu/dsbook-part-1/productivity/img/windows-screenshots/VirtualBox_Windows-7-Enterprise_22_03_2018_16_22_20.png){fig-align=\"center\"}\n\n## Global Option\n\n-   You can change the look and functionality of RStudio quite a bit.\n\n-   To change the global options you click on *`Tools`* then *`Global Options`…*.\n\n-   As an example we show how to make a change that we **highly recommend**:\n\n    -   `General` \\> `Basic` \\> `Workspace`: Change the [*Save workspace to .RData*]{.underline} *on exit* to [*Never*]{.underline} .\n\n    -   `General` \\> `Basic` \\> `Workspace`: Uncheck the [*Restore .RData into workspace at startup*]{.underline}to *[Never]{.underline}*\n\n    -   `Code` \\> `Editing`: check [*use the native piper operator, \\|\\>*]{.underline}\n\n::: callout-note\n## .RData file\n\n-   By default, when you exit R saves all the objects you have created into a file called .RData.\n\n-   This is done so that when you restart the session in the same folder, it will load these objects.\n\n-   We find that this causes confusion especially when we share code with colleagues and assume they have this .RData file.\n:::\n\n## Installing R Packages\n\n-   The functionality provided by a fresh install of R is only **a small fraction** of what is possible.\n\n-   We refer to what you get after your first install as *base R*.\n\n    -   You can check base R packages when you type `loadedNamespaces()`\n\n-   The extra functionality comes from add-ons available from developers. We called those add-on functionality as `packages` (similar to python modules)\n\n    -   Currently hundreds of these packages available from CRAN and many others shared via other repositories such as GitHub\n\n## Installing R Packages: Code\n\n-   For example, to install the **dslabs** package, you would type the following in your console:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"dslabs\") # DON'T FORGET DOUBLE QUOTE\n    ```\n    :::\n\n\n\n\n-   We can then load the package into our R sessions using the `library` function in your Rscript:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(dslabs) # DOUBLE QUOTE IS NOT NEEDED HERE\n    ```\n    :::\n\n\n\n\n-   As you go through this class, you will see that we load packages without installing them. This is because once you install a package, it remains installed and only needs to be loaded with `library`.\n\n-   We can install more than one package at once by feeding a character vector to this function:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(c(\"dplyr\", \"dslabs\"))\n    ```\n    :::\n\n\n\n\n-   You can see all the packages you have installed using the following function:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    installed.packages()\n    ```\n    :::\n\n\n\n\n## Ex01: Edit R script\n\nLet's try the following steps:\n\n1.  Opening a new script as we did before\n2.  Give the script a name by saving the current new unnamed script (`ctrl + S` for Win and `Cmd + S` for Mac)\n3.  A good convention is to use a descriptive name, with lower case letters, no spaces, only hyphens to separate words, and then followed by the suffix `.R`. We will call this script `my-first-script.R`.\n4.  Now we are ready to start editing our first script.\n5.  We install a R package called `tidyverse` in **Console**.\n6.  We add the code to load the tidyverse package in the script\n7.  Finally, we save the script.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}