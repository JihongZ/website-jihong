{
  "hash": "8b615a095c8b895046c248f092a0e157",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 04: Data Import and Data Tidying\"\nsubtitle: \"R Function\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-02-05\"\nsidebar: false\nexecute: \n  eval: true\n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    number-offset: 0\n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 03: Object/Function/Package\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n---\n\n\n\n\n# Nested Function\n\n## Function Scope\n\n-   **Local Scope (Environment)**: Variables defined inside a function are local to that function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = 5\nprint_x <- function(x) {x = 3; return(x)}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n-   **Global Scope (Environment)**: Variables defined outside a function are accessible throughout the script.\n\n------------------------------------------------------------------------\n\n### Example: Local Scope\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  result <- x + y\n  return(result)\n}\n\nadd(2, 3)   # Output: 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nresult      # Error: object 'result' not found\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'result' not found\n```\n\n\n:::\n:::\n\n\n\n\n-   We can use `<<-` to copy the object `result` to the global enviroment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  result <<- x + y\n  return(result)\n}\nadd(2, 3)   # Output: 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nresult \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n## Practical Example of Function Scoping\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\nm2 <- lm(prestige ~ education, data=carData::Prestige)\ncar::ncvTest(m2, ~ income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNon-constant Variance Score Test \nVariance formula: ~ income \nChisquare = 1.520711, Df = 1, p = 0.21751\n```\n\n\n:::\n:::\n\n\n\n\nThis fits variable `prestige` as a linear function of predictor `education`, and tests for nonconstant variance as a function of `income`, another regressor in the data set `Prestige.`\n\n------------------------------------------------------------------------\n\n### Issue of `lm` when call it in the function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf3 <- function(meanmod, dta, varmod) {\n  m3 <- lm(meanmod, dta)\n  car::ncvTest(m3, varmod)\n}\nf3(meanmod=prestige ~ education, dta=carData::Prestige, varmod = varmod ~ income)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(data, envir = environment(formula(model))): object 'dta' not found\n```\n\n\n:::\n:::\n\n\n\n\nThe arguments `dta` and `meanmod` are defined in the environment of the function, but the call to `lm` looks for them in the **global environment**, and they are therefore invisible when `lm` is called.\n\n------------------------------------------------------------------------\n\n### Solution: copy to global environment\n\nThe assign function copies the `dta` and `meanmod` arguments to the global environment and rename them as `.dta` and `.meanmod` where ncvTest will be evaluated, and the remove function removes them before exiting the function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf4 <- function(meanmod, dta, varmod) {\n  assign(\".dta\", dta, envir=.GlobalEnv)\n  assign(\".meanmod\", meanmod, envir=.GlobalEnv)\n  m1 <- lm(.meanmod, .dta)\n  ans <- car::ncvTest(m1, varmod)\n  remove(\".dta\", envir=.GlobalEnv)\n  remove(\".meanmod\", envir=.GlobalEnv)\n  ans\n}\nf4(prestige ~ education, carData::Prestige, ~income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNon-constant Variance Score Test \nVariance formula: ~ income \nChisquare = 1.520711, Df = 1, p = 0.21751\n```\n\n\n:::\n:::\n\n\n\n\n# Data Import\n\n## Introduction to Data Import\n\nIn this presentation, we will learn how to import data into R and tidy it for analysis. Data is often messy, but understanding how to manipulate it is a critical skill for any data scientist.\n\n------------------------------------------------------------------------\n\n## Working with Your Own Data\n\n- While R packages provide a great way to work with sample data, at some point, you'll need to apply what you've learned to your own data. \n\n- In today's lecture, we'll focus on importing rectangular data, especially CSV files.\n\n------------------------------------------------------------------------\n\n## Prerequisites for Reading Data\n\nTo read data in R, we’ll use the `readr` package, which is part of the `tidyverse`. Before you start, make sure to load the package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# or\nlibrary(readr)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Reading Data from a CSV File\n\nLet’s start with a common file format: CSV. Here’s a simple example:\n\n``` csv\nStudent ID,Full Name,favourite.food,mealPlan,AGE\n1,Sunil Huffmann,Strawberry yoghurt,Lunch only,4\n2,Barclay Lynn,French fries,Lunch only,5\n3,Jayendra Lyne,N/A,Breakfast and lunch,7\n4,Leon Rossini,Anchovies,Lunch only,\n5,Chidiegwu Dunkel,Pizza,Breakfast and lunch,five\n6,Güvenç Attila,Ice cream,Lunch only,6\n```\n\nYou can read this CSV file into R using the `read_csv()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- read_csv(\"data/students.csv\")\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Practical Tips for Data Import\n\nAfter loading your data, you'll typically need to transform it for easier analysis. For instance, handling missing values is essential.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_fixedNA <- read_csv(\"data/students.csv\", na = c(\"N/A\", \"\"))\nstudents_fixedNA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  `Student ID` `Full Name`      favourite.food     mealPlan            AGE  \n         <dbl> <chr>            <chr>              <chr>               <chr>\n1            1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2            2 Barclay Lynn     French fries       Lunch only          5    \n3            3 Jayendra Lyne    <NA>               Breakfast and lunch 7    \n4            4 Leon Rossini     Anchovies          Lunch only          <NA> \n5            5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6            6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Handling Non-Syntactic Column Names\n\nIn some cases, column names may contain spaces, making them non-syntactic in R. You can handle this by renaming columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_fixedColNames <- students |> \n  rename(\n    student_id = `Student ID`,\n    full_name = `Full Name`,\n    favourite_food = `favourite.food`,\n    meal_plan = `mealPlan`\n  )\nstudents_fixedColNames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           AGE  \n       <dbl> <chr>            <chr>              <chr>               <chr>\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n:::\n\n\n\n\n-   Alternatively, use the `janitor::clean_names()` function for quick renaming. `clean_names()` use some heuristics to turn them all into snake case at once1.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |> janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           age  \n       <dbl> <chr>            <chr>              <chr>               <chr>\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Fixing Data Types\n\nEnsure that the variables are of the correct type. For example, the `meal_plan` column is categorical and should be a factor:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_fixedDataType <- students_fixedColNames |> \n  mutate(meal_plan = factor(meal_plan))\nstudents_fixedDataType\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  student_id full_name        favourite_food     meal_plan           AGE  \n       <dbl> <chr>            <chr>              <fct>               <chr>\n1          1 Sunil Huffmann   Strawberry yoghurt Lunch only          4    \n2          2 Barclay Lynn     French fries       Lunch only          5    \n3          3 Jayendra Lyne    N/A                Breakfast and lunch 7    \n4          4 Leon Rossini     Anchovies          Lunch only          <NA> \n5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch five \n6          6 Güvenç Attila    Ice cream          Lunch only          6    \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(students_fixedDataType)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [6 × 5] (S3: tbl_df/tbl/data.frame)\n $ student_id    : num [1:6] 1 2 3 4 5 6\n $ full_name     : chr [1:6] \"Sunil Huffmann\" \"Barclay Lynn\" \"Jayendra Lyne\" \"Leon Rossini\" ...\n $ favourite_food: chr [1:6] \"Strawberry yoghurt\" \"French fries\" \"N/A\" \"Anchovies\" ...\n $ meal_plan     : Factor w/ 2 levels \"Breakfast and lunch\",..: 2 2 1 2 1 2\n $ AGE           : chr [1:6] \"4\" \"5\" \"7\" NA ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(students_fixedDataType$meal_plan)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nBreakfast and lunch          Lunch only \n                  2                   4 \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Reading Data from Multiple Files\n\nSometimes, your data is split across multiple files. You can read them all at once and combine them into a single data frame:\n\n```csv\n#| code-summary: \"01-sales.csv\"\n#| code-fold: true\nmonth,year,brand,item,n\nJanuary,2019,1,1234,3\nJanuary,2019,1,8721,9\nJanuary,2019,1,1822,2\nJanuary,2019,2,3333,1\nJanuary,2019,2,2156,9\nJanuary,2019,2,3987,6\nJanuary,2019,2,3827,6\n```\n\n```csv\n#| code-summary: \"02-sales.csv\"\n#| code-fold: true\nmonth,year,brand,item,n\nFebruary,2019,1,1234,8\nFebruary,2019,1,8721,2\nFebruary,2019,1,1822,3\nFebruary,2019,2,3333,1\nFebruary,2019,2,2156,3\nFebruary,2019,2,3987,6\n```\n\n```csv\n#| code-summary: \"03-sales.csv\"\n#| code-fold: true\nmonth,year,brand,item,n\nMarch,2019,1,1234,3\nMarch,2019,1,3627,1\nMarch,2019,1,8820,3\nMarch,2019,2,7253,1\nMarch,2019,2,8766,3\nMarch,2019,2,8288,6\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_files <- c(\"data/01-sales.csv\", \"data/02-sales.csv\", \"data/03-sales.csv\")\nsales_data <- read_csv(sales_files, id = \"file\")\nsales_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 6\n   file              month     year brand  item     n\n   <chr>             <chr>    <dbl> <dbl> <dbl> <dbl>\n 1 data/01-sales.csv January   2019     1  1234     3\n 2 data/01-sales.csv January   2019     1  8721     9\n 3 data/01-sales.csv January   2019     1  1822     2\n 4 data/01-sales.csv January   2019     2  3333     1\n 5 data/01-sales.csv January   2019     2  2156     9\n 6 data/01-sales.csv January   2019     2  3987     6\n 7 data/01-sales.csv January   2019     2  3827     6\n 8 data/02-sales.csv February  2019     1  1234     8\n 9 data/02-sales.csv February  2019     1  8721     2\n10 data/02-sales.csv February  2019     1  1822     3\n11 data/02-sales.csv February  2019     2  3333     1\n12 data/02-sales.csv February  2019     2  2156     3\n13 data/02-sales.csv February  2019     2  3987     6\n14 data/03-sales.csv March     2019     1  1234     3\n15 data/03-sales.csv March     2019     1  3627     1\n16 data/03-sales.csv March     2019     1  8820     3\n17 data/03-sales.csv March     2019     2  7253     1\n18 data/03-sales.csv March     2019     2  8766     3\n19 data/03-sales.csv March     2019     2  8288     6\n```\n\n\n:::\n:::\n\n\n\n\nThis will add a new column identifying which file the data came from.\n\n------------------------------------------------------------------------\n\n## Writing Data to a File\n\nYou can also write data back to a file. For example, save the `students` data frame as a CSV:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(students_fixedDataType, \"data/students_final.csv\")\n```\n:::\n\n\n\n\nFor more complex objects, consider using `write_rds()` for saving R-specific objects.\n\n## Other file types\n\n-   Once you’ve mastered read_csv(), using readr’s other functions is straightforward; it’s just a matter of knowing which function to reach for:\n\n    -   `read_csv2()` reads semicolon-separated files. These use ; instead of , to separate fields and are common in countries that use , as the decimal marker.\n\n    -   `read_tsv()` reads tab-delimited files.\n\n    -   `read_delim()` reads in files with any delimiter, attempting to automatically guess the delimiter if you don’t specify it.\n\n    -   `read_fwf()` reads fixed-width files. You can specify fields by their widths with fwf_widths() or by their positions with fwf_positions().\n\n    -   `read_table()` reads a common variation of fixed-width files where columns are separated by white space.\n\n    -   `read_log()` reads Apache-style log files.\n\n## Other Importing Packages\n\n### readxl\n\n-   The `readxl` package provides functions to read-in Microsoft Excel formats.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n# Specify sheet either by position or by name\nread_excel(datasets, 2)\nread_excel(datasets, \"mtcars\")\n```\n:::\n\n\n\n\nThe main functions are:\n\n| Function   | Format                 | Typical suffix |\n|------------|------------------------|----------------|\n| read_excel | auto detect the format | xls, xlsx      |\n| read_xls   | original format        | xls            |\n| read_xlsx  | new format             | xlsx           |\n\nThe Microsoft Excel formats permit you to have more than one spreadsheet in one file. These are referred to as sheets. The functions listed above read the first sheet by default, but we can also read the others. The excel_sheets function gives us the names of all the sheets in an Excel file. These names can then be passed to the sheet argument in the three functions above to read sheets other than the first.\n\n## Data Entry\n\n-   Sometimes you’ll need to assemble a tibble “by hand” doing a little data entry in your R script.\n\n-   You can use `tibble` and `tribble` to create a new data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6 \n```\n\n\n:::\n:::\n\n\n\n\n-   `tribble()` is customized for data entry in code: column headings start with \\~ and entries are separated by commas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6 \n```\n\n\n:::\n:::\n\n\n\n\n# Data Tidying\n\n## Introduction to Data Tidying\n\nOnce you’ve loaded your data, the next step is often to tidy it for analysis. In this section, we’ll focus on transforming messy datasets into tidy ones.\n\n------------------------------------------------------------------------\n\n## What is Tidy Data?\n\nTidy data has three key rules:\n\n-   Each variable is a column.\n-   Each observation is a row.\n-   Each value is a cell.\n\nTidy data is easy to work with in R and other data analysis tools.\n\n------------------------------------------------------------------------\n\n## Why Ensure Your Data is Tidy?\n\nTidy data allows for consistent use of tools like `dplyr` and `ggplot2`. The vectorized nature of R works best with tidy data because most functions expect each variable to be in its own column.\n\n------------------------------------------------------------------------\n\n## Pivoting Data: An Overview\n\n-   To tidy messy data, we often need to pivot it. Pivoting allows us to transform the structure of data without changing the underlying values.\n\n-   The `billboard` dataset records the billboard rank of songs in the year 2000:\n\n-   In this dataset, each observation is a song. The first three columns (artist, track and date.entered) are variables that describe the song.\n\n-   Then we have 76 columns (wk1-wk76) that describe the rank of the song in each week1.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   <chr>      <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Pivoting Data Longer\n\nWe use the `pivot_longer()` function to convert wide data into a longer format. This is helpful when multiple pieces of data are spread across columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), # pecifies which columns need to be pivoted\n    names_to = \"week\",  # names the variable stored in the column names, we named that variable week\n    values_to = \"rank\" # names the variable stored in the cell values, we named that variable rank.\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24,092 × 5\n   artist track                   date.entered week   rank\n   <chr>  <chr>                   <date>       <chr> <dbl>\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8      NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9      NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10     NA\n# ℹ 24,082 more rows\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Dropping NA Values While Pivoting\n\nWhen pivoting data, you might encounter missing values. You can remove them using the `values_drop_na` argument.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   <chr>   <chr>                   <date>       <chr> <dbl>\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Converting Columns to More Useful Data Types\n\nAfter tidying your data, you might need to convert data types. For instance, convert `week` from a character string to a number:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_longer <- billboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) |> \n  mutate(\n    week = parse_number(week)\n  )\nbillboard_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   <chr>   <chr>                   <date>       <dbl> <dbl>\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## How it works: I\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf <- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  id      bp1   bp2\n  <chr> <dbl> <dbl>\n1 A       100   120\n2 B       140   115\n3 C       120   125\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndf |> \n  pivot_longer(\n    cols = bp1:bp2,\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  id    measurement value\n  <chr> <chr>       <dbl>\n1 A     bp1           100\n2 A     bp2           120\n3 B     bp1           140\n4 B     bp2           115\n5 C     bp1           120\n6 C     bp2           125\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## How it works: II\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(\n    cols = bp1:bp2,\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n```\n:::\n\n\n\n\n![](images/clipboard-3820106916.png)\n\n## Widening Data: Pivoting in the Other Direction\n\nSometimes, you need to make your data wider. The `pivot_wider()` function is used when you have one observation spread across multiple rows.\n\n------------------------------------------------------------------------\n\n## Pivoting with Multiple Variables in Column Names\n\nIf your column names contain multiple pieces of information, you can split them into separate variables during the pivot process:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwho2 |> \n  pivot_longer(\n    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_sep = \"_\",\n    values_to = \"count\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   <chr>       <dbl> <chr>     <chr>  <chr> <dbl>\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## When Data Contains Both Variable and Value Names\n\nIf a dataset has both variable names and values in its columns, you can use `.value` in `pivot_longer()` to separate these:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousehold |> \n  pivot_longer(\n    cols = !family, \n    names_to = c(\".value\", \"child\"), \n    names_sep = \"_\", \n    values_drop_na = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  family child  dob        name  \n   <int> <chr>  <date>     <chr> \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Summary of Data Tidying\n\nIn this chapter, you’ve learned how to transform your data into a tidy format using `pivot_longer()` and `pivot_wider()`. These tools are fundamental for cleaning messy data and making it ready for analysis.\n\n------------------------------------------------------------------------\n\n## Exercise: Practicing pivot_longer() and pivot_wider()\n\n### Scenario 1: Using pivot_longer()\n\nImagine you have a dataset that tracks the number of visitors to a museum for each day of the week. The data is stored in wide format, where each day of the week is a separate column:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisitors_wide <- tibble(\n  museum = c(\"Museum A\", \"Museum B\", \"Museum C\"),\n  monday = c(120, 150, 110),\n  tuesday = c(130, 160, 120),\n  wednesday = c(140, 170, 130),\n  thursday = c(110, 140, 100),\n  friday = c(160, 180, 150)\n)\nvisitors_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  museum   monday tuesday wednesday thursday friday\n  <chr>     <dbl>   <dbl>     <dbl>    <dbl>  <dbl>\n1 Museum A    120     130       140      110    160\n2 Museum B    150     160       170      140    180\n3 Museum C    110     120       130      100    150\n```\n\n\n:::\n:::\n\n\n\n\n**Task 1**: Use pivot_longer() to convert this data into a long format where each row represents a single observation of a visitor count for a specific day.\n\n**Hint**: The `names_to` argument should be set to \"day\" to create a column for the days of the week, and the `values_to` argument should be set to \"visitors\" to store the number of visitors.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n### Scenario 2: Using pivot_wider()\n\nNow, imagine you have a dataset in long format that tracks the average test scores of students in different subjects over several terms. The data is structured like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_long <- tibble(\n  student = c(\"Alice\", \"Alice\", \"Bob\", \"Bob\", \"Charlie\", \"Charlie\"),\n  term = c(\"Term 1\", \"Term 2\", \"Term 1\", \"Term 2\", \"Term 1\", \"Term 2\"),\n  subject = c(\"Math\", \"Math\", \"Math\", \"Math\", \"Math\", \"Math\"),\n  score = c(85, 90, 78, 80, 92, 95)\n)\nscores_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  student term   subject score\n  <chr>   <chr>  <chr>   <dbl>\n1 Alice   Term 1 Math       85\n2 Alice   Term 2 Math       90\n3 Bob     Term 1 Math       78\n4 Bob     Term 2 Math       80\n5 Charlie Term 1 Math       92\n6 Charlie Term 2 Math       95\n```\n\n\n:::\n:::\n\n\n\n\n**Task 2**: Use pivot_wider() to convert this data into a wide format, where each term is a separate column, and the values represent the student scores.\n\n**Hint**: The names_from argument should be set to \"term\" to create columns for each term, and the values_from argument should be set to \"score\" to get the student scores.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Bonus Task: Combining pivot_longer() and pivot_wider()\n\nImagine you have a dataset that tracks the number of calls received by a customer service center over three months for various departments. The dataset is in wide format like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalls_wide <- tibble(\n  department = c(\"Sales\", \"Support\", \"Billing\"),\n  jan = c(200, 150, 180),\n  feb = c(210, 160, 190),\n  mar = c(220, 170, 200)\n)\ncalls_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  department   jan   feb   mar\n  <chr>      <dbl> <dbl> <dbl>\n1 Sales        200   210   220\n2 Support      150   160   170\n3 Billing      180   190   200\n```\n\n\n:::\n:::\n\n\n\n\n**Task 3**:\n\n-   First, use `pivot_longer()` to convert this dataset into a long format.\n\n-   Then, use `pivot_wider()` to convert the data back into a wide format, but with the months as columns and the number of calls as the values.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Next Steps\n\nNow that you understand data tidying, you can begin organizing your analysis in R scripts. In the next chapter, we’ll explore how to use projects and organize your code into files and directories.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}