{
  "hash": "b6bb7464c8a92f408d68a9b0f416b803",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 04: Data Manipulation and Function Scope Exercises\"\nsubtitle: \"\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-08-18\"\nsidebar: false\nexecute: \n  warning: false\n  message: false\n  eval: false\n  echo: true\nformat: \n  html: \n    page-layout: full\ntoc: true\ntoc-depth: 2\nlightbox: true\ncode-fold: show\n---\n\n\n\n\n# Data Import Exercises\n\n## Exercise 1: Importing Data from CSV\n\nYou are working with the following CSV file containing employee information:\n\n```\nEmployee ID,Full Name,Department,Salary,Years of Experience\n1,John Doe,HR,50000,5\n2,Jane Smith,Engineering,N/A,8\n3,Michael Johnson,Marketing,55000,6\n4,Susan Lee,HR,52000,4\n5,David Kim,Engineering,65000,7\n6,Amy Brown,Marketing,57000,5\n```\n\n1. Use the `read_csv()` function to import this data into R.\n  - For illustration, you can use literal data for importing.\n\n\n\n::: {.cell}\n\n:::\n\n\n  \n2. Clean the data by replacing any missing salary values with NA.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n3. Rename the columns to use snake case (employee_id, full_name, department, salary, years_of_experience).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n## Exercise 2: Importing Data Using Custom Delimiters\n\nYou have another dataset where the values are separated by semicolons (;) instead of commas:\n\n```\nEmployee ID;Full Name;Department;Salary;Years of Experience\n1;John Doe;HR;50000;5\n2;Jane Smith;Engineering;60000;8\n3;Michael Johnson;Marketing;55000;6\n4;Susan Lee;HR;52000;4\n5;David Kim;Engineering;65000;7\n6;Amy Brown;Marketing;57000;5\n```\n\n- Use `read_delim()` to import this dataset with the semicolon delimiter (`;`).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n# Data Tidying Exercises\n\n## Exercise 3: Pivoting Data Longer\n\nYou have a dataset that tracks the number of customers visiting different stores each week:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstore_visits <- tibble(\n  store = c(\"Store A\", \"Store B\", \"Store C\"),\n  week_1 = c(120, 150, 110),\n  week_2 = c(130, 160, 120),\n  week_3 = c(140, 170, 130),\n  week_4 = c(110, 140, 100),\n  week_5 = c(160, 180, 150)\n)\n```\n:::\n\n\n\n- Use `pivot_longer()` to convert this dataset into a long format, where each row represents a single observation for a specific week.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Exercise 4: Pivoting Data Wider\n\nYou have a long-format dataset that tracks the average test scores of students in different subjects over several terms:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_long <- tibble(\n  student = c(\"Alice\", \"Alice\", \"Bob\", \"Bob\", \"Charlie\", \"Charlie\"),\n  term = c(\"Term 1\", \"Term 2\", \"Term 1\", \"Term 2\", \"Term 1\", \"Term 2\"),\n  subject = c(\"Math\", \"Math\", \"Math\", \"Math\", \"Math\", \"Math\"),\n  score = c(85, 90, 78, 80, 92, 95)\n)\n```\n:::\n\n\n\n\n- Use `pivot_wider()` to convert this dataset into a wide format, where each term (e.g., \"Term 1\", \"Term 2\") is a column, and the scores are the values.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Exercise 5: Combining pivot_longer() and pivot_wider()\n\nYou have a dataset tracking the number of calls received by a customer service center, split by department and month:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalls_wide <- tibble(\n  department = c(\"Sales\", \"Support\", \"Billing\"),\n  january = c(200, 150, 180),\n  february = c(210, 160, 190),\n  march = c(220, 170, 200)\n)\n```\n:::\n\n\n\n\n- First, use `pivot_longer()` to convert this dataset into a long format, where each row corresponds to a specific department and month.\n- Then, use `pivot_wider()` to convert the long dataset back into a wide format, where the months are columns and the values represent the number of calls.\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}