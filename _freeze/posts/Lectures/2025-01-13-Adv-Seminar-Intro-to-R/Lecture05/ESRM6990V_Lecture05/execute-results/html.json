{
  "hash": "38faf71ba6f263ead544bda5c4dc381f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 05: Other Formats of Data\"\nsubtitle: \"R Function\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-02-05\"\nsidebar: false\nexecute: \n  eval: true\n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    number-offset: 0\n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 03: Object/Function/Package\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n---\n\n\n\n\n## Class Outline\n\n1.  String and Text Data\n2.  Image Data\n3.  Audio Data\n4.  Video Data\n\n# String and Text Data\n\n## Special characters\n\n-   Quotation marks can be used in strings. Note that a single quote can only be used within a double quote or the other way around.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"I'm a student\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I'm a student\"\n```\n\n\n:::\n\n```{.r .cell-code}\n'He says \"it is ok!\"'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"He says \\\"it is ok!\\\"\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"I'm a student. He says \\\"it is ok\\\"!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I'm a student. He says \\\"it is ok\\\"!\"\n```\n\n\n:::\n:::\n\n\n\n\n-   It is generally a good idea to “escape” the quotation marks using the backslash `\\`.\n    -   If it is needed in a string, one needs to use two of them `\\\\`. For example,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"To show \\\\ , we need to use two of them.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTo show \\ , we need to use two of them.\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-tip\n`cat()`: Print the objects.\n:::\n\n------------------------------------------------------------------------\n\n### Other special characters\n\n-   [`\\t` and `\\n`]{.redcolor}: Special characters for changing lines and tab.\n\n-   `\\u` for escaping special characters in Unicode other than alphabetical letters. https://unicode-table.com/en/\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- \"This is the first line. \\nThis the \\t second line with a tab.\"\ncat(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis is the first line. \nThis the \t second line with a tab.\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\u03BC \\u03A3 \\u03B1 \\u03B2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nμ Σ α β\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"❤ ♫\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n❤ ♫\n```\n\n\n:::\n:::\n\n\n\n\n## Basic string operations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# or \nlibrary(stringr) # install.packages(\"stringr\")\n```\n:::\n\n\n\n\n-   A vector of strings\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet1 <- \"MAKE AMERICA GREAT AGAIN!\" \ntweet2 <- \"Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n\n(tweet <- c(tweet1, tweet2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN!\"                          \n[2] \"Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n-   Change the lower/upper case of strings\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntolower(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"make america great again!\"                          \n[2] \"congratulations @clemsonfb! https://t.co/w8viax0owy\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntoupper(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN!\"                          \n[2] \"CONGRATULATIONS @CLEMSONFB! HTTPS://T.CO/W8VIAX0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n[Basic string operations (Cont.)]{.bluecolor .bigger}\n\n-   Caclulate length of a string\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnchar(tweet1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_length(tweet) # function of package stringr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 51\n```\n\n\n:::\n:::\n\n\n\n\n-   Split strings based on a [pattern]{.redcolor}.\n    1.  pattern tells how to split a string.\n    2.  the output is a list.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(tweet, pattern = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"MAKE\"    \"AMERICA\" \"GREAT\"   \"AGAIN!\" \n\n[[2]]\n[1] \"Congratulations\"         \"@ClemsonFB!\"            \n[3] \"https://t.co/w8viax0OWY\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## Use str_split_1 to return one vector rather than list\nstr_split_1(tweet2, pattern = \" https://\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Congratulations @ClemsonFB!\" \"t.co/w8viax0OWY\"            \n```\n\n\n:::\n:::\n\n\n\n- Check regular expresssion for more pattern detection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvignette(\"regular-expressions\")\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n[Basic string operations (Cont.)]{.bluecolor .bigger}\n\n- Combine string vectors into one\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(tweet.words <- unlist(str_split(tweet, pattern = \" \")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE\"                    \"AMERICA\"                \n[3] \"GREAT\"                   \"AGAIN!\"                 \n[5] \"Congratulations\"         \"@ClemsonFB!\"            \n[7] \"https://t.co/w8viax0OWY\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_c(tweet.words, collapse=\" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN! Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n# Project: Analysis of Trump Tweets\n\n## Download of Trump Tweets\n\n- For demonstration, we will analyze the tweets from President Donald Trump from 2009 to 2017. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs) # install.packages(\"dslabs\")\nlibrary(tidyverse) \nglimpse(dslabs::trump_tweets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 20,761\nColumns: 8\n$ source                  <chr> \"Twitter Web Client\", \"Twitter Web Client\", \"T…\n$ id_str                  <chr> \"6971079756\", \"6312794445\", \"6090839867\", \"577…\n$ text                    <chr> \"From Donald Trump: Wishing everyone a wonderf…\n$ created_at              <dttm> 2009-12-23 12:38:18, 2009-12-03 14:39:09, 200…\n$ retweet_count           <int> 28, 33, 13, 5, 7, 4, 2, 4, 1, 22, 7, 5, 1, 1, …\n$ in_reply_to_user_id_str <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ favorite_count          <int> 12, 6, 11, 3, 6, 5, 2, 10, 4, 30, 6, 3, 4, 3, …\n$ is_retweet              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n```\n\n\n:::\n:::\n\n\n\n\n:::callout-note\n- `source`. Device or service used to compose tweet.\n- `id_str`. Tweet ID.\n- `text`. Tweet.\n- `created_at`. Data and time tweet was tweeted.\n- `retweet_count`. How many times tweet had been retweeted at time dataset was created.\n- `in_reply_to_user_id_str`. If a reply, the user id of person being replied to.\n- `favorite_count`. Number of times tweet had been favored at time dataset was created.\n- `is_retweet`. A logical telling us if it is a retweet or not.\n:::\n\n---\n\n###  Basic analysis of Trump tweets\n\n- Where the tweets were sent from\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntable(trump_tweets$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n                Facebook                Instagram             Media Studio \n                     104                      133                      114 \n         Mobile Web (M5) Neatly For BlackBerry 10                Periscope \n                      54                        4                        7 \n               TweetDeck               Twitlonger          TwitLonger Beta \n                     468                       22                      288 \n             Twitter Ads      Twitter for Android   Twitter for BlackBerry \n                      96                     4652                       78 \n        Twitter for iPad       Twitter for iPhone     Twitter for Websites \n                      39                     3962                        1 \n Twitter Mirror for iPad            Twitter QandA       Twitter Web Client \n                       1                       10                    10718 \n     Vine - Make a Scene \n                      10 \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nn_distinct(trump_tweets$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nn_source_tbl <- trump_tweets |> \n  group_by(source) |> \n  summarise(\n    N = n()\n  )\nggplot(data = n_source_tbl) +\n  geom_col(aes(x = fct_reorder(source, N), y = N)) +\n  geom_label(aes(x = fct_reorder(source, N), y = N, label = N), nudge_y = 500) +\n  labs(x = \"\", y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n\n---\n\n- The length of each tweet\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(str_length(trump_tweets$text))\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n\nMost tweets have the length from 100 to 150 characters.\n\n---\n\n- Word counts in the tweet\n  - `lengths`: Get the length of each element of a list or atomic vector (is.atomic) as an integer or numeric vector.\n\n\n\n\n::: {.cell fig-output='column'}\n\n```{.r .cell-code}\ntrump.split <- str_split(trump_tweets$text, pattern = \" \")\nlengths(trump.split) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 20 10 14 18 20\n```\n\n\n:::\n\n```{.r .cell-code}\nhist(lengths(trump.split))\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n\nMost tweets has less than 30 words.\n\n---\n\n- Top 20 most frequently used words\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntrump.split <- unlist(str_split(trump_tweets$text, pattern = \" \"))\n\nword.freq <- as.data.frame(sort(table(word = tolower(trump.split)), decreasing = T))\nword.freq |> \n  mutate(word = trimws(word)) |> \n  filter(\n    word != \"\",\n    !(word %in% stopwords::stopwords(\"en\")),\n    !(word %in% c(\"I\", \"&amp;\", \"The\", \"-\", \"just\"))\n  ) -> word_freq_tbl\n\nggplot(data = word_freq_tbl[1:20, ]) +\n  geom_col(aes(x = fct_reorder(word, Freq), y = Freq)) +\n  geom_label(aes(x = fct_reorder(word, Freq), y = Freq, label = Freq)) +\n  labs(x = \"\", y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n\n# Image Data\n\n## Read Image Data Into R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install package\n# install.packages(\"magick\")\n# install.packages(\"tesseract\")\n# load package\nlibrary(magick)\nlibrary(tesseract)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimg1 <- image_read(\"https://ggplot2.tidyverse.org/logo.png\")\n#show the image\nprint(img1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n1 PNG      240    277 sRGB       TRUE     24183 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-18-1.png){width=120}\n:::\n:::\n\n\n\n\n---\n\n- Extract text from the image\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMAGAImg <- image_read(\"https://shop.trumpwinery.com/assets/images/products/pictures/WineDirectMERCHphotos3.png\")\nprint(MAGAImg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n1 PNG      350    450 sRGB       TRUE    230960 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-revealjs/unnamed-chunk-19-1.png){width=175}\n:::\n:::\n\n\n\n\n## Reference\n\n1. [Tidyverse Skills for Data Science](https://jhudatascience.org/tidyversecourse/get-data.html#images) \n2. [Practical Data Processing for Social and Behavioral Research Using R](https://books.psychstat.org/rdata/image-data.html)\n",
    "supporting": [
      "ESRM6990V_Lecture05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}