{
  "hash": "b95034f5edf787a05224924a0e302f54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 03: R Functions\"\nsubtitle: \"\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-08-18\"\nsidebar: false\nexecute: \n  warning: false\n  message: false\n  eval: false\n  echo: true\nformat: \n  html: \n    page-layout: full\ntoc: true\ntoc-depth: 2\nlightbox: true\ncode-fold: show\n---\n\n\n\n## Creating Custom Functions\n\n1.  Write a function called `fahrenheit_to_celsius` that converts a temperature from Fahrenheit to Celsius.\n\n-   Formula: $C = \\frac{(F - 32) \\times 5}{9}$\n-   Test your function with $F = 98.6$.\n\n2.  Create a function called `circle_area` that calculates the area of a circle given its radius.\n\n-   Formula: $A = \\pi \\times r^2$\n-   Use the built-in constant `pi` in R and test the function with $r = 5$.\n\n------------------------------------------------------------------------\n\n## Piping\n\n1.  Transform the following code into a pipe-based version:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- filter(mtcars, hp > 100)\nresult <- arrange(result, desc(mpg))\nresult <- select(result, hp, mpg)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Debugging Functions\n\n1.  Identify and correct the mistake in the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> mutate(\n  a = (a - mean(a, na.rm = TRUE)) / sd(a),\n  b = (b - mean(a, na.rm = TRUE)) / sd(b)\n)\n```\n:::\n\n\n\n2.  Rewrite the code by creating a custom function `standardized()` to avoid code repetition.\n\n------------------------------------------------------------------------\n\n## Arguments in Functions\n\n1.  Create a function `greet` that takes two arguments, `name` (default = \"World\") and `punctuation` (default = \"!\"). The function should return a greeting message.\n\n-   Example: `greet(\"Alice\", \"?\")` should return `\"Hello, Alice?\"`.\n\n2.  Test the `sum()` function by passing named arguments (`x = 3, y = 5`) and explain how the function handles them.\n\n------------------------------------------------------------------------\n\n## Function Scope\n\n1.  Explain why the following code throws an error:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  result <- x + y\n  return(result)\n}\nadd(5, 3)\nresult  # Error\n```\n:::\n\n\n\n2.  Modify the code to make the variable `result` accessible outside the function.\n\n------------------------------------------------------------------------\n\n## Flexible Arguments\n\n1.  Write a function `multiply_all()` that accepts a variable number of arguments and multiplies all the numbers together. Test your function with `multiply_all(2, 3, 4)`.\n\n2.  Investigate the `mean()` function by using the help page. Explain why it can accept additional arguments like `y` in the code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = c(1, 2, 3), y = 3)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Nested Functions\n\n1.  Write a function `rect_prism_volume()` that calculates the volume of a rectangular prism given its length, width, and height. Inside this function, create another function `rect_area()` to calculate the base area.\n\n    -   The **formula for the volume of a rectangular prism** is:\n\n        $V =  A_b \\times h$\n\n        $A_b = l \\times w$\n\n        where:\n\n        -   V = Volume of the rectangular prism,\n\n        -   $A_b$ = base area\n\n            -   l = Length,\n\n            -   w = Width,\n\n        -   h = Height.\n\n2.  Test your function with length = 5, width = 3, height = 4.\n\n------------------------------------------------------------------------\n\n## Rescale Function\n\n1.  Create a custom function `rescale()` that rescales a numeric vector to the range 0 to 1.\n\n-   Formula: $x_{\\text{scaled}} = \\frac{x - \\min(x)}{\\max(x) - \\min(x)}$\n\n2.  Use your `rescale()` function to rescale the columns of the following data frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n a = rnorm(5),\n b = rnorm(5),\n c = rnorm(5)\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}