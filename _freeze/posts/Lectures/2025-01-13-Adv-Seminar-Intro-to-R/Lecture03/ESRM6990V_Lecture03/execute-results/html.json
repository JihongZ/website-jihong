{
  "hash": "eef6f47b11cde0b4dc7ba11b628f8e1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 03: R Functions and Packages\"\nsubtitle: \"Getting Started\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2024-10-09\"\ndate-modified: \"2024-10-11\"\nsidebar: false\nexecute: \n  echo: true\n  warning: false\n  eval: true\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 03: Object/Function/Package\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n---\n\n\n\n# R Function\n\n## Prebuilt functions\n\n-   **Functions**: Once we defined the objects, the data analysis process can usually be described as [a series of *functions*]{.underline} applied to the data.\n\n    -   In other words, we considered \"function\" as a set of pre-specified operations (e.g., macro in SAS)\n\n    -   R includes several **predefined functions** and most of the analysis pipelines we construct make extensive use of these.\n\n    -   We already used or discussed the `install.packages`, `library`, and `ls` functions. We also used the function `sqrt` to solve the quadratic equation above.\n\n-   **Evaluation**: In general, we need to use parentheses followed by a function name to evaluate a function.\n\n    -   If you type `ls`, the function is not evaluated and instead R shows you the code that defines the function. If you type [`ls()`](https://rdrr.io/r/base/ls.html) the function is evaluated and, as seen above, we see objects in the workspace.\n\n-   **Function Arguments:** Unlike `ls`, most functions require one or more *arguments* to specify the settings of the function.\n\n    -   For example, we assign different object to the argument of the function `log`. Remember that we earlier defined `coef_a` to be 1:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.079442\n```\n\n\n:::\n:::\n\n\n\n## Play sounds\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(\"say ESRM6 9 9 0 Vi is exciting \")\nsystem(\"say Professor Jihong Zhang can play the R code all day\")\nfor (i in 1:10) {\n  system(\"say hate you\")\n}\n```\n:::\n\n\n\n## Want to watch firework in R?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('robservable')\nlibrary(robservable)\nrobservable(\"@rstata/happynewyear\", hide = c(1:2, 4:20))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}