{
  "hash": "3d9b2f1ac052bdb726a435bf83febd12",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 06: Date, Time, and Locales\"\nsubtitle: \"`dplyr` package\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-02-05\"\nsidebar: false\nexecute: \n  eval: true\n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nhighlight-style: \"nord\"\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    number-offset: 0\n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 03: Object/Function/Package\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n---\n\n\n\n\n[Class Outline]{.redcolor .bigger}\n\n# Introduction to Date-Time Parsing\n\n## Importance of Date-Time Data\n- Dates and times are critical for tracking temporal data in analysis.\n- Proper handling ensures accurate filtering, summarization, and visualization.\n- R provides the `Date` and `POSIXct` types to manage date-time information.\n\n## The `Date` Data Type in R\n\n- Dates are stored as the number of days since January 1, 1970 (epoch reference).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(as.Date(\"1970-01-01\"))  # Returns 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n- Convert character strings into `Date` format:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2025-02-13\")  # Convert string to Date type\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-13\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Using `lubridate` for Date-Time Parsing\n\n[Loading the Package][.bluecolor .bigger]\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\n\n\n## Parsing Various Date Formats\n\n- `lubridate` provides functions to interpret and standardize date formats.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"2009-01-01\", \"09/01/02\", \"January 2, 2009\")\nymd(x)  # Interprets different formats correctly\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2009-01-01\" \"2009-01-02\" NA          \n```\n\n\n:::\n:::\n\n\n\n\n## Handling Different Date Orders\n\n- Formats can be ambiguous, `lubridate` helps with appropriate parsing:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"09/01/02\"\nymd(x)  # Assumes year-month-day\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2009-01-02\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy(x)  # Assumes month-day-year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2002-09-01\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndmy(x)  # Assumes day-month-year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2002-01-09\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extracting Date Components\n\n- Once parsed, individual components can be extracted for further analysis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- as.Date(c(\"2016-05-31\", \"2016-08-08\", \"2016-08-19\"))\n\nyear(dates)  # Extract year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2016 2016 2016\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(dates)  # Extract month\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 8 8\n```\n\n\n:::\n\n```{.r .cell-code}\nday(dates)  # Extract day\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31  8 19\n```\n\n\n:::\n:::\n\n\n\n\n\n## Handling Date-Time with `POSIXct`\n\n- The `POSIXct` class stores timestamps as seconds since epoch.\n- Use `ymd_hms()` to parse full date-time values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatetime_str <- \"2025-02-12 14:30:00\"\ndatetime <- ymd_hms(datetime_str)\nprint(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-12 14:30:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Working with Time Zones\n\n- Time zones are crucial when working with global data.\n- `with_tz()` converts a time to a different zone without altering the actual time:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnow()  # Current system time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-13 01:00:25 CST\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwith_tz(now(), \"America/New_York\")  # Convert to Eastern Time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-13 02:00:25 EST\"\n```\n\n\n:::\n:::\n\n\n\n\n- `force_tz()` forces a time to be interpreted in a different time zone:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforce_tz(now(), \"America/New_York\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-13 01:00:25 EST\"\n```\n\n\n:::\n:::\n\n\n\n\n# Locales\n\n## Understanding Locales in R\n\n[What are Locales?]{.redcolor .bigger}\n\n- Locales define how dates, times, numbers, and character encodings are interpreted.\n- Key aspects include:\n  - Date and time formats\n  - Time zones\n  - Character encoding\n  - Decimal and grouping symbols\n\n## Checking and Setting Locales\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.getlocale()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\"\n```\n\n\n:::\n\n```{.r .cell-code}\nSys.setlocale(\"LC_ALL\", \"en_US.UTF-8\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\"\n```\n\n\n:::\n:::\n\n\n\n\n- `LC_TIME`: Controls date-time formatting.\n- `LC_NUMERIC`: Determines the decimal and grouping symbols.\n\n\n## Handling Different Locales\n\n- Using `readr::locale()`\n- The `readr` package allows setting locales while reading data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlocale()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<locale>\nNumbers:  123,456.78\nFormats:  %AD / %AT\nTimezone: UTC\nEncoding: UTF-8\n<date_names>\nDays:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), Thursday\n        (Thu), Friday (Fri), Saturday (Sat)\nMonths: January (Jan), February (Feb), March (Mar), April (Apr), May (May),\n        June (Jun), July (Jul), August (Aug), September (Sep), October\n        (Oct), November (Nov), December (Dec)\nAM/PM:  AM/PM\n```\n\n\n:::\n:::\n\n\n\n\n- Specifying a locale allows you to parse dates in other languages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_date(\"1 janvier 2015\", \"%d %B %Y\", locale = locale(\"fr\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-01-01\"\n```\n\n\n:::\n\n```{.r .cell-code}\nparse_date(\"14 oct. 1979\", \"%d %b %Y\", locale = locale(\"fr\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1979-10-14\"\n```\n\n\n:::\n\n```{.r .cell-code}\nparse_date(\"1994年10月01日\", \"%Y年%m月%d日\", locale = locale(\"zh\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1994-10-01\"\n```\n\n\n:::\n:::\n\n\n\n\nSee `vignette(\"locales\")` for more details\n\n## Timezones\n\nYou can see a complete list of time zones with `OlsonNames()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_datetime(\"2001-10-10 20:10\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2001-10-10 20:10:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nparse_datetime(\"2001-10-10 20:10\", locale = locale(tz = \"Pacific/Auckland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2001-10-10 20:10:00 NZDT\"\n```\n\n\n:::\n\n```{.r .cell-code}\nparse_datetime(\"2001-10-10 20:10\", locale = locale(tz = \"Europe/Dublin\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2001-10-10 20:10:00 IST\"\n```\n\n\n:::\n\n```{.r .cell-code}\nparse_datetime(\"2001-10-10 20:10\", locale = locale(tz = \"Asia/Hong_Kong\" ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2001-10-10 20:10:00 HKT\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_time <- Sys.Date()\ncurrent_time\ndifftime(\n  parse_datetime(current_time, locale = locale(tz = \"US/Central\")),\n  parse_datetime(current_time, locale = locale(tz = \"Asia/Hong_Kong\"))\n)\n```\n:::\n\n\n\n\n- Note that “EST” is a Canadian time zone that does not have DST. It’s not Eastern Standard Time! Instead use:\n\n  - PST/PDT = “US/Pacific”\n  - CST/CDT = “US/Central”\n  - MST/MDT = “US/Mountain”\n  - EST/EDT = “US/Eastern”\n\n## Summary\n\n- `lubridate` simplifies parsing and manipulating date-time data.\n- Converting text-based dates into structured `Date` and `POSIXct` formats enables powerful analysis.\n- Handling time zones correctly ensures accurate comparisons across regions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}