{
  "hash": "debd72f69a075471eb3dc40d383eab5f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization Using `survey` Package: Survey Data\"\ndescription: \"Many tutorials online are about general data visualization. This post aims to showcase some tricks for survey data\"\ndate: \"2023-07-04\"\ndraft: false\ncategories: \n  - survey\n  - ggplot2\nimage: index_files/figure-html/survey-1.png\nexecute: \n  eval: true\nformat:\n  html:\n    toc: true\n    code-fold: show\n    code-line-numbers: false\n    number-sections: true\n    number-offset: 1\n---\n\n\n\n::: objective\n## Overview {.unnumbered}\n\nI am looking for R package than can analyze big data of survey.\n:::\n\n## R package - survey\n\nThe `survey` package in R is designed specifically for analysis of data from complex surveys. It provides functions for descriptive statistics and general regression models for survey data that includes design features such as clustering, stratification, and weighting.\n\nHere are some of the core features of the `survey` package:\n\n1.  **Descriptive Statistics:** The package provides functions for computing descriptive statistics on survey data, including mean, total, and quantiles.\n\n2.  **Regression Models:** The package provides a variety of model fitting functions for binary and multi-category response, count data, survival data, and continuous response.\n\n3.  **Design Effects:** It allows calculation of design effects for complex survey designs.\n\n4.  **Post-stratification and Raking:** The package allows for adjusting the sampling weights to match known population margins.\n\n5.  **Subpopulation Analysis:** It includes functions for correctly handling analyses that are limited to a subset of the population (a subpopulation).\n\n6.  **Variance Estimation:** The `survey` package supports multiple methods of variance estimation, including Taylor series linearization, replication weights, and subbootstrap.\n\nRemember that before you can use these functions, you will need to define a survey design object that specifies the features of your survey's design (like the sampling method, strata, clustering, and weights).\n\nHere's an example of how you might use it to calculate the mean of a variable from a survey:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the necessary package\nlibrary(survey)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: grid\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: survival\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'survey'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    dotchart\n```\n\n\n:::\n\n```{.r .cell-code}\nmydata <- iris\n\n# Define the survey design\ndes <- svydesign(ids = ~1, data = mydata, weights = ~Sepal.Length)\n\n# Calculate the mean of a variable\nmean <- svymean(~Species, design = des)\n\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mean     SE\nSpeciessetosa     0.28557 0.0356\nSpeciesversicolor 0.33862 0.0392\nSpeciesvirginica  0.37581 0.0410\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Note\n\n|  |  |\n|-------------------|-----------------------------------------------------|\n| `variables` | Formula or data frame specifying the variables measured in the survey. If `NULL`, the `data` argument is used. |\n| `ids` | Formula or data frame specifying cluster ids from largest level to smallest level, `~0` or `~1` is a formula for no clusters. |\n| `probs` | Formula or data frame specifying cluster sampling probabilities |\n:::\n\nPlease replace `mydata`, `weight`, and `variable` with your actual data frame, weight column, and the variable you're interested in, respectively.\n\nRemember, working with survey data can be complex due to the design features of surveys. The `survey` package in R provides a robust set of tools for dealing with this complexity.\n\n## An empirical example\n\nThe example I used here is a tody data exacted from a real data about eating disorders. The sample size is 500.\n\nThe measurement data contains 12 items, each ranging from 0 to 3. The demographic data contains 6 variables: age, gender, race, birthplace, height, weight. The very first thing is to visualize the characteristics of the samples to have a big picture of respondents.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nknitr::opts_chunk$set(echo = TRUE, message=FALSE, warnings=FALSE, include = TRUE)\nlibrary(here)\nlibrary(glue)\nlibrary(readr)\nlibrary(bruceR)\nlibrary(xtable)\nlibrary(survey)\nlibrary(formattable) # format styles of table \nlibrary(reshape2)\nlibrary(tidyverse)\nlibrary(ggtext) \nlibrary(kableExtra)\noptions(knitr.kable.NA = '')\nmycolors = c(\"#4682B4\", \"#B4464B\", \"#B4AF46\", \n             \"#1B9E77\", \"#D95F02\", \"#7570B3\",\n             \"#E7298A\", \"#66A61E\", \"#B4F60A\")\nsoftcolors = c(\"#B4464B\", \"#F3DCD4\", \"#ECC9C7\", \n               \"#D9E3DA\", \"#D1CFC0\", \"#C2C2B4\")\nmykbl <- function(x, ...){\n  kbl(x, digits = 2, ...) |> kable_styling(bootstrap_options = c(\"striped\", \"condensed\")) }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndataDemo <- read.csv(\"~/Documents/Projects/website-jihong/posts/2023/2023-07-04-data-visualization-for-survey-data/DataDemo.csv\")\ndataT4 <- read.csv(\"~/Documents/Projects/website-jihong/posts/2023/2023-07-04-data-visualization-for-survey-data/DataT4.csv\")\ndatList <- cbind(dataDemo, dataT4)\ndatList <- datList |> \n  select(colnames(dataDemo), starts_with(\"EDEQS\") & ends_with(\"T1\")) |> \n  select(-EDEQS_T1)\nglimpse(datList)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 500\nColumns: 17\n$ Age_baseline       <int> 15, 15, 16, 15, 15, 16, 16, 15, 15, 15, 15, 16, 16,…\n$ Sex                <chr> \"boys\", \"girls\", \"boys\", \"boys\", \"boys\", \"boys\", \"b…\n$ Ethnicity_baseline <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Origin_baseline    <int> 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, …\n$ BMI_avg            <dbl> 15.58863, 25.35745, 34.67057, 30.76086, 26.52223, 2…\n$ EDEQS1_T1          <int> 0, 3, 2, 2, 0, 1, 0, 2, 1, 3, 1, 1, 0, 0, 3, 2, 3, …\n$ EDEQS2_T1          <int> 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 1, 0, 0, 0, 0, 1, 1, …\n$ EDEQS3_T1          <int> 1, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, …\n$ EDEQS4_T1          <int> 2, 0, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, …\n$ EDEQS5_T1          <int> 3, 3, 0, 3, 0, 1, 0, 3, 3, 3, 3, 2, 0, 2, 2, 3, 3, …\n$ EDEQS6_T1          <int> NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ EDEQS7_T1          <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ EDEQS8_T1          <int> 1, 2, 2, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 3, 3, 2, 0, …\n$ EDEQS9_T1          <int> 1, 0, 3, 3, 1, 0, 0, 0, 1, 2, 2, 1, 0, 0, 1, 1, 1, …\n$ EDEQS10_T1         <int> 2, 0, 1, 2, 1, 0, 2, 0, 1, 3, 2, 0, 0, 0, 1, 2, 1, …\n$ EDEQS11_T1         <int> 0, 2, 3, 0, 2, 1, 1, NA, 1, 1, 1, 0, 3, 0, 2, 2, 1,…\n$ EDEQS12_T1         <int> 0, 2, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 2, 3, 3, …\n```\n\n\n:::\n:::\n\n\n\n### Descriptive statistics\n\nWe can use multiple R tools for descriptive statistics. `bruceR` is one of them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatList |> \n  bruceR::Freq(varname = \"Sex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFrequency Statistics:\n───────────────\n         N    %\n───────────────\nboys   150 30.0\ngirls  350 70.0\n───────────────\nTotal N = 500\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfreqTblVars = c(\"Sex\", \"Ethnicity_baseline\", \"Origin_baseline\")\nfreqTable <- function(tbl, var) {\n  tbl |> as.data.frame() |> \n    tibble::rownames_to_column(\"Levels\") |> \n    dplyr::mutate(Variable = var)\n}\nfreqTableComb = NULL\nfor (var in freqTblVars) {\n  tbl = bruceR::Freq(datList, varname = var)\n  freqTableComb = rbind(freqTableComb, freqTable(tbl = tbl, var = var))\n  freqTableComb <- freqTableComb |> \n    relocate(\"Variable\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFrequency Statistics:\n───────────────\n         N    %\n───────────────\nboys   150 30.0\ngirls  350 70.0\n───────────────\nTotal N = 500\nFrequency Statistics:\n───────────\n     N    %\n───────────\n1  499 99.8\n2    1  0.2\n───────────\nTotal N = 500\nFrequency Statistics:\n───────────\n     N    %\n───────────\n1  204 40.8\n2  296 59.2\n───────────\nTotal N = 500\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmykbl(freqTableComb)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Variable </th>\n   <th style=\"text-align:left;\"> Levels </th>\n   <th style=\"text-align:right;\"> N </th>\n   <th style=\"text-align:right;\"> % </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Sex </td>\n   <td style=\"text-align:left;\"> boys </td>\n   <td style=\"text-align:right;\"> 150 </td>\n   <td style=\"text-align:right;\"> 30.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sex </td>\n   <td style=\"text-align:left;\"> girls </td>\n   <td style=\"text-align:right;\"> 350 </td>\n   <td style=\"text-align:right;\"> 70.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ethnicity_baseline </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:right;\"> 499 </td>\n   <td style=\"text-align:right;\"> 99.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ethnicity_baseline </td>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Origin_baseline </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:right;\"> 204 </td>\n   <td style=\"text-align:right;\"> 40.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Origin_baseline </td>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:right;\"> 296 </td>\n   <td style=\"text-align:right;\"> 59.2 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nOr we can use `survey` package for descriptive analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\nMeasuremnt <- datList |> \n  select(starts_with(\"EDEQS\")) |> \n  mutate(across(everything(), as.numeric))\ndexample = svydesign(ids = ~1,\n                     data = Measuremnt)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in svydesign.default(ids = ~1, data = Measuremnt): No weights or\nprobabilities supplied, assuming equal probability\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(dexample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndependent Sampling design (with replacement)\nsvydesign(ids = ~1, data = Measuremnt)\nProbabilities:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \nData variables:\n [1] \"EDEQS1_T1\"  \"EDEQS2_T1\"  \"EDEQS3_T1\"  \"EDEQS4_T1\"  \"EDEQS5_T1\" \n [6] \"EDEQS6_T1\"  \"EDEQS7_T1\"  \"EDEQS8_T1\"  \"EDEQS9_T1\"  \"EDEQS10_T1\"\n[11] \"EDEQS11_T1\" \"EDEQS12_T1\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## summay statistics for all measurement indicators\nvars <- colnames(Measuremnt)\nsvymean(make.formula(vars), design = dexample, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               mean     SE\nEDEQS1_T1  1.117155 0.0437\nEDEQS2_T1  0.320084 0.0302\nEDEQS3_T1  0.508368 0.0328\nEDEQS4_T1  0.612971 0.0361\nEDEQS5_T1  1.508368 0.0449\nEDEQS6_T1  1.782427 0.0387\nEDEQS7_T1  0.079498 0.0171\nEDEQS8_T1  0.767782 0.0432\nEDEQS9_T1  0.667364 0.0394\nEDEQS10_T1 0.715481 0.0388\nEDEQS11_T1 1.020921 0.0408\nEDEQS12_T1 1.684100 0.0380\n```\n\n\n:::\n\n```{.r .cell-code}\nsvytotal(make.formula(vars), design = dexample, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           total      SE\nEDEQS1_T1    534 21.5084\nEDEQS2_T1    153 14.5122\nEDEQS3_T1    243 15.8558\nEDEQS4_T1    293 17.4904\nEDEQS5_T1    721 22.5463\nEDEQS6_T1    852 20.2240\nEDEQS7_T1     38  8.2004\nEDEQS8_T1    367 20.9404\nEDEQS9_T1    319 19.0842\nEDEQS10_T1   342 18.8356\nEDEQS11_T1   488 20.0628\nEDEQS12_T1   805 19.7416\n```\n\n\n:::\n:::\n\n\n\n### Stacked barplot for survey data responses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey = Measuremnt\nsurvey <- survey |> \n  mutate(ID = 1:nrow(survey)) |> \n  mutate(across(starts_with(\"EDEQS\"), \\(x) factor(x, levels = 0:3))) |> \n  pivot_longer(starts_with(\"EDEQS\"), names_to = \"items\", values_to = \"values\") |> \n  group_by(items) |> \n  dplyr::count(values) |> \n  dplyr::mutate(perc = n/sum(n) * 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey) +\n  geom_col(aes(y = factor(items, levels = paste0(\"EDEQS\", 12:1, \"_T1\")),\n               x = perc,\n               fill = values), \n           position = position_stack(reverse = TRUE)) +\n  labs(y = \"\", x = \"Proportion (%)\", title = \"N and proportion of responses for items\") + \n  geom_text(aes(y = factor(items, levels = paste0(\"EDEQS\", 12:1, \"_T1\")),\n                  x = perc, group = items,\n                  label = ifelse(n >= 50, paste0(n, \"(\", round(perc, 1), \"%)\"), \"\")), \n              size = 3, color = \"white\",\n              position = position_stack(reverse = TRUE, vjust = 0.5)) +\n  scale_fill_manual(values = mycolors)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1.png){width=960}\n:::\n:::\n\n\n\nWe can clearly identify item 7 has highest proportion of level 0, and needed to be theoretically justified.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}