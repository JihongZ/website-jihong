{
  "hash": "8050a24d336c50db645bb8657904f2ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 11: R Package\"\nsubtitle: \"`devtools` package\"\ndate: \"2025-03-19\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  message: false\noutput-location: default\ncode-annotations: below\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    number-offset: 0\n    fig-align: center\n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n    out.width: \"100%\"\nfilters: \n  - webr\n---\n\n\n\n\n::: rmdnote\n[Learning objectives]{.redcolor}\n\n-   Recognize the basic structure and purpose of an R package\n-   Create a simple R package skeleton using the devtools package\n-   Recognize the key directives in a NAMESPACE file\n-   Create R function documentation using roxygen2\n-   Create vignettes using knitr and R Markdown\n-   Create an R package that contains data (and associated documentation)\n-   Create unit tests for an R package using the testthat package\n-   Categorize errors in the R CMD check process\n-   Recall the principles of open source software\n-   Recall two open source licenses\n-   Create create a GitHub repository for an R package\n-   Create an R package that is tested and deployed on Travis\n-   Create an R package that is tested and deployed on Appveyor\n-   Recognize characteristics of R packages that are not cross-platform\n:::\n\n## Prerequisite\n\n-   Before you start...\n    1.  If you are developing packages that contain only R code, then the tools you need come with R and RStudio.\n    2.  If you want to build packages with compiled C, C++, or Fortran code (or which to build other people’s packages with such code), then you will need to install additional tools.\n\n::: panel-tabset\n### MacOS\n\n1.  the Xcode development environment, which comes with the C compiler (`clang`)\n2.  you need a Fortran compiler for older packages containing Fortran code. You can download the GNU Fortran Compiler from the R for Mac tools page.\n\n### Windows\n\n1.  Rtools is a package to build R packages. The [Rtools](https://cran.r-project.org/bin/windows/Rtools/) package comes in different versions, depending on the version of R that you are using.\n\n### Unix/Linux\n\n1.  No other tools needed for developing R package on Linux/Unix.\n:::\n\n# R Package\n\n::: rmdnote\n[The objectives of this section]{.redcolor}\n\n1.  Recognize the basic structure and purpose of an R package\n2.  Recognize the key directives in a NAMESPACE file\n:::\n\n## Basic Structure of R Package\n\n-   The two required sub-directories are:\n    -   `R`, which contains all of your R code files\n    -   `man`, which contains your documentation files.\n-   At the top level of your package directory, you will have\n    1.  `DESCRIPTION` file\n    2.  `NAMESPACE` file\n-   As an example, this is the file structure of the package `ESRM6990V`:\n\n``` bash\n.\n├── DESCRIPTION\n├── ESRM6990V.Rproj\n├── NAMESPACE\n├── R\n│   └── jihong.R\n├── README.md\n└── man\n    └── jihong.Rd\n```\n\n## `DESCRIPTION` file\n\n1.  The DESCRIPTION file contains key metadata for the package that is used by repositories like CRAN and by R itself.\n\n2.  In particular, this file contains the package name, the version number, the author and maintainer contact information, the license information, as well as any dependencies on other packages.\n\nAs an example, you can check ggplot2's `DESCRIPTION` file on their [github page](https://github.com/tidyverse/ggplot2/blob/main/DESCRIPTION).\n\n``` yaml\nPackage: ggplot2\nTitle: Create Elegant Data Visualisations Using the Grammar of Graphics\nVersion: 3.5.1.9000\nAuthors@R: c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = \"aut\",\n           comment = c(ORCID = \"0000-0003-4757-117X\")),\n    person(\"Winston\", \"Chang\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-1576-2126\")),\n    person(\"Lionel\", \"Henry\", role = \"aut\"),\n    person(\"Thomas Lin\", \"Pedersen\", , \"thomas.pedersen@posit.co\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0002-5147-4711\")),\n    person(\"Kohske\", \"Takahashi\", role = \"aut\"),\n    person(\"Claus\", \"Wilke\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-7470-9261\")),\n    person(\"Kara\", \"Woo\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-5125-4188\")),\n    person(\"Hiroaki\", \"Yutani\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-3385-7233\")),\n    person(\"Dewey\", \"Dunnington\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-9415-4582\")),\n    person(\"Teun\", \"van den Brand\", role = \"aut\",\n           comment = c(ORCID = \"0000-0002-9335-7468\")),\n    person(\"Posit, PBC\", role = c(\"cph\", \"fnd\"))\n  )\nDescription: A system for 'declaratively' creating graphics, based on \"The\n    Grammar of Graphics\". You provide the data, tell 'ggplot2' how to map\n    variables to aesthetics, what graphical primitives to use, and it\n    takes care of the details.\nLicense: MIT + file LICENSE\nURL: https://ggplot2.tidyverse.org, https://github.com/tidyverse/ggplot2\nBugReports: https://github.com/tidyverse/ggplot2/issues\nDepends:\n    R (>= 4.0)\nImports: \n    cli,\n```\n\n## `NAMESPACE` file\n\n-   The NAMESPACE file specifies:\n    1.  Exported function that is presented to the user. Functions that are not exported cannot be called directly by the user (although see below).\n    2.  What functions or packages are imported by the package.\n\n::: rmdnote\nIn building R package, you don't need to edit NAMESPACE file manually. You just write up your function by specifying which external functions you imported. `document()` function will automatically create/update NAMESPACE for you.\n:::\n\nAs an example, this is the `NAMESPACE` file for ESRM6990V (see [GitHub](https://github.com/JihongZ/ESRM6990V/blob/main/NAMESPACE)). There is only one function `jihong()` existing that users can call in this package.\n\n``` r\n# Generated by roxygen2: do not edit by hand\n\nexport(jihong)\n```\n\n------------------------------------------------------------------------\n\n### An example of `mvtsplot` package\n\n``` r\nexport(\"mvtsplot\")\n\nimport(splines)\nimport(RColorBrewer)\nimportFrom(\"grDevices\", \"colorRampPalette\", \"gray\")\nimportFrom(\"graphics\", \"abline\", \"axis\", \"box\", \"image\", \"layout\",\n           \"lines\", \"par\", \"plot\", \"points\", \"segments\", \"strwidth\",\n           \"text\", \"Axis\")\nimportFrom(\"stats\", \"complete.cases\", \"lm\", \"na.exclude\", \"predict\",\n           \"quantile\")\n```\n\nIn this `NAMESPACE` file:\n\n-   `import()`, simply takes a package name as an argument, and the interpretation is that all exported functions from that external package will be accessible to your package\n\n-   `importFrom()`, takes a package and a series of function names as arguments. This directive allows you to specify exactly which function you need from an external package. For example, this package imports the `colorRampPalette()` and `gray()` functions from the `grDevices` package.\n\n------------------------------------------------------------------------\n\n### Example of same function name from different packages\n\n1.  You may find two R functions from different packages have same names.\n\nFor example, the commonly used dplyr package has a function named filter(), which is also the name of a function in the stats package.\n\n-   In R, every function has a full name, which includes the package namespace as part of the name. This format is along the lines of\n\n``` yaml\n<package name>::<exported function name>\n```\n\nWe can use the following format to call these two functions to avoid confusion\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter()\nstats::filter()\n```\n:::\n\n\n\n\n## `R` folder\n\n-   The R sub-directory contains all of your R code, either in a single file, or in multiple files.\n\n-   For larger packages it’s usually best to split code up into multiple files that logically group functions together.\n\n-   The names of the R code files do not matter, but generally it’s not a good idea to have spaces in the file names.\n\nAs an example, I put the function `jihong()` inside of `R/jihong.R` code file.\n\n\n\n\n::: {.cell filename='jihong.R'}\n\n```{.r .cell-code}\n#' This is the function for Jihong Zhang\n#'\n#' @param details Want to know more\n#' @returns describe some basic information about Jihong Zhang\n#' @examples\n#' jihong(details = TRUE)\n#' @export\n\njihong <- function(details = FALSE){\n  TEXT <- \"Jihong Zhang is an Assistant Professor at University of Arkansas\"\n  if (details == TRUE) {\n    TEXT <- \"Jihong Zhang currently hold the position of Assistant Professor of Educational Statistics and Research Methods (ESRM) at the department of Counseling, Leadership, and Research Methods (CLRM), University of Arkansas. Previously, He served as a postdoctoral fellow at the Chinese University of Hong Kong in the department of Social Work. His academic journey in psychometrics starts with a doctoral training with Dr. Jonathan Templin in the Educational Measurement and Statistics (EMS) program at the University of Iowa. His primary research recently focuses on reliability and validation of psychological/psychometric network, Bayesian latent variable modeling, Item Response Theory modeling, and other advanced psychometric modeling. His expertise lies in the application of advanced statistical modeling in the fields of psychology and education, including multilevel modeling and structural equation modeling. His work is characterized by a commitment to enhancing the methodological understanding and application of statistics in educational research and beyond.\"\n  }\n  message(TEXT)\n}\n```\n:::\n\n\n\n\n## `man` folder\n\n-   The man sub-directory contains the documentation files for all of the exported objects of a package (e.g., help package).\n\n-   With the development of the `roxygen2` package, we no longer need to do that and can write the documentation directly into the R code files.\n\n::::: columns\nLeft is starting with `#'` will be used to generate `.Rd` files that are part of help pages of function. Right is the help page of the function.\n\n::: column\n\n\n\n::: {.cell filename='jihong.R'}\n\n```{.r .cell-code}\n#' This is the function for Jihong Zhang\n#'\n#' @param details Want to know more\n#' @returns describe some basic information about Jihong Zhang\n#' @examples\n#' jihong(details = TRUE)\n#' @export\n#' \n```\n:::\n\n\n\n:::\n\n::: column\n![](images/clipboard-2175508218.png)\n:::\n:::::\n\n## `devtools` package\n\nThere are two ways of creating a new package\n\n1.  You can also initialize an R package in RStudio by selecting “File” -\\> “New Project” -\\> “New Directory” -\\> “R Package”.\n\n2.  Or you can use `create()` function in `devtools` package\n\n:::::: panel-tabset\n### Your turn\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::create(\"~/Downloads/[PackageName]\")\n```\n:::\n\n\n\n\n### Result\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n> devtools::create(\"~/Downloads/jeremy\")\n✔ Creating /Users/jihong/Downloads/jeremy/.\n✔ Setting active project to \"/Users/jihong/Downloads/jeremy\".\n✔ Creating R/.\n✔ Writing DESCRIPTION.\nPackage: jeremy\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to\n    pick a license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.3.2.9000\n✔ Writing NAMESPACE.\n✔ Writing jeremy.Rproj.\n✔ Adding \"^jeremy\\\\.Rproj$\" to .Rbuildignore.\n✔ Adding \".Rproj.user\" to .gitignore.\n✔ Adding \"^\\\\.Rproj\\\\.user$\" to .Rbuildignore.\n✔ Setting active project to \"<no active project>\".\n```\n:::\n\n\n\n\n### File Structure\n\nBelow figure gives an example of what the new package directory will look like after you create an initial package structure with `create` or via the RStudio “New Project” interface.\n\n::::: columns\n::: column\n1.  an R project file (`.Rproj` extension) that saves some project options for the directory\n2.  `DESCRIPTION` and `NAMESPACE` files are automatically generated\n3.  `.gitignore` used to exclude some files in the directory by git\n4.  `.Rbuildignore` used to exclude some files when the package is built\n:::\n\n::: column\n![](images/clipboard-2693642010.png)\n:::\n:::::\n::::::\n\n## Exp1: Build your first R file in your first package\n\nOpen the `.Rproj` file will open Rstudio with your package directory as root path.\n\nIn your `R` folder, create a new R file named `hello.R`:\n\n![](images/clipboard-548549187.png)\n\n--- \n\n### Exp1: Your first function --- hello.R\n\n::: panel-tabset\n#### Step 1: create the R file\nCopy-and-paste the following starting template code into your `hello.R` file and save.\n\n\n\n\n::: {.cell filename='hello.R'}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n#' This is the function for showing the information of XXX\n#'\n#' @param details Want to know more\n#' @returns describe some basic information about XXX\n#' @examples\n#' hello()\n#' @export\n\nhello <- function(){\n  message(\"I am a PhD student from ...\")\n}\n```\n:::\n\n\n\n\n#### Step 2: document and load\nThen, in `Build` panel, click `More` -\\> `Document` -\\> `Load All`.\n\n![](images/clipboard-255122707.png)\n\n#### Step 3: Test the function\nFinally, in R console, type in `hello()`. Do you see the results?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhello()\nI am a PhD student from ...\n```\n:::\n\n\n\n\nAlso, try adding question mark `?` before the function to see the help page. Do you see your roxygen information works?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?hello()\n```\n:::\n\n\n\n\nFinally, try to load your package. Did you see your package can be successfully loaded?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jeremy)\n```\n:::\n\n\n\n\n:::\n\n\n## Reference\n\n1.  [Mastering Software Development in R --- Chapter 3 Building R Packages](https://bookdown.org/rdpeng/RProgDA/building-r-packages.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}