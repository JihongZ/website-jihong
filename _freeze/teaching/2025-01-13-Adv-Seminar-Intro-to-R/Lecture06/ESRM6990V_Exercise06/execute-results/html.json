{
  "hash": "b605588e5d435f5be762e05b62caeb4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 06: Date and Time\"\nsubtitle: \"\"\ndate: \"2025-08-18\"\nexecute: \n  warning: false\n  message: false\n  eval: false\n  echo: true\nformat: \n  html: \n    page-layout: full\n    number-sections: false\n    code-fold: true\n    code-summary: \"❖ Answer ❖\"\ntoc: true\ntoc-depth: 2\nlightbox: true\n---\n\n\n\n\n### **Question 1: Basic Date-Time Functions**\n\n1.  Load the `lubridate` package and print the current date and time using R functions.\n2.  Convert the following character strings into `Date` objects:\n    -   `\"2024-07-01\"`\n    -   `\"15/08/2023\"` (Use the correct format for parsing.)\n3.  Convert the following character strings into `POSIXct` date-time objects:\n    -   `\"2023-12-25 18:30:00\"`\n    -   `\"07-13-2024 14:45\"` (Use the correct format for parsing.)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nymd(\"2024-07-01\")\ndmy(\"15/08/2023\")\n\nymd_hms(\"2024-01-15 14:30:45\")\nmdy_hm(\"07-13-2024 14:45\") # correct\n```\n:::\n\n\n\n\n### **Question 2: Importing and Parsing Dates**\n\n1.  Create a CSV file (or use an inline string) with the following data:\n\n``` {.markdown filename=\"csv_data.csv\"}\ndate, datetime\n01-15-2024, 2024/01/15 14:20:00\n02-28-2023, 2023-02-28 23:59:59\n```\n\n```         \n-   Read this CSV into R using `read_csv()`.\n-   Ensure that the `date` column is parsed as a `Date` and the `datetime` column is parsed as a `POSIXct` object.\n```\n\n2.  Modify the import function to parse the `date` column correctly, assuming it follows the `\"MM-DD-YYYY\"` format.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv_data <- \"\n  date, datetime\n  01-15-2024, 2024/01/15 14:20:00\n  02-28-2023, 2023-02-28 23:59:59\n\"\nlibrary(readr)\nlibrary(lubridate)\n\ndf <- read_csv(csv_data)\ndf\n\ndf2 <- read_csv(csv_data, col_types = cols(date = col_date(\"%m-%d-%Y\")))\ndf2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- df2 |> mutate(datetime = ymd_hms(datetime))\ndf3\n```\n:::\n\n\n\n\n### **Question 3: Extracting Components from Dates**\n\n1.  Given the date vector:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dates <- as.Date(c(\"2023-07-15\", \"2024-01-01\", \"2025-12-31\"))\n    ```\n    :::\n\n\n\n\n    -   Extract the **year**, **month**, and **day** components.\n    -   Extract the **day of the week** in both numeric and abbreviated name formats.\n    -   Extract the **day of the year**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- as.Date(c(\"2023-07-15\", \"2024-01-01\", \"2025-12-31\"))\nyear(dates)  \nmonth(dates) \nday(dates)\nwday(dates)\nyday(dates)\n```\n:::\n\n\n\n\n### **Question 4: Rounding and Formatting Dates**\n\n1.  Given the date-time `\"2024-07-12 15:47:23\"`, apply:\n    -   `floor_date()` to round it down to the nearest hour.\n    -   `ceiling_date()` to round it up to the nearest day.\n    -   `round_date()` to round it to the nearest 10-minute interval.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\ndt <- ymd_hms(\"2024-07-12 15:47:23\")\n\n# Round down to the nearest hour\nfloor_dt <- floor_date(dt, unit = \"hour\")\n\n# Round up to the nearest day\nceiling_dt <- ceiling_date(dt, unit = \"day\")\n\n# Round to the nearest 10-minute interval\nround_dt <- round_date(dt, unit = \"10 minutes\")\n\n# Print results\nfloor_dt    # \"2024-07-12 15:00:00\"\nceiling_dt  # \"2024-07-13 00:00:00\"\nround_dt    # \"2024-07-12 15:50:00\"\n```\n:::\n\n\n\n\n2.  Convert `\"2025-02-15\"` into the following formats using `format()`:\n    -   `\"YYYY/MM/DD\"`\n    -   `\"Month Day, Year\"` (e.g., `\"February 15, 2025\"`)\n    -   `\"Day-Month-Year\"` (e.g., `\"15-February-2025\"`)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate <- as.Date(\"2025-02-15\")\n\n# Format as \"YYYY/MM/DD\"\nformat_1 <- format(date, \"%Y/%m/%d\") \n\n# Format as \"Month Day, Year\"\nformat_2 <- format(date, \"%B %d, %Y\") \n\n# Format as \"Day-Month-Year\"\nformat_3 <- format(date, \"%d-%B-%Y\") \n\n# Print results\nformat_1  # \"2025/02/15\"\nformat_2  # \"February 15, 2025\"\nformat_3  # \"15-February-2025\"\n```\n:::\n\n\n\n\n### **Question 5: Working with Time Zones**\n\n1.  Retrieve the system’s current time zone and display all available time zones containing `\"America\"`.\n2.  Convert `\"2024-08-01 12:00:00\"` from `\"UTC\"` to:\n    -   `\"America/New_York\"`\n    -   `\"Europe/London\"`\n    -   `\"Asia/Tokyo\"`\n3.  Calculate the time difference (in hours) between `\"US/Central\"` and `\"Asia/Hong_Kong\"` on **January 1, 2025**.\n    -   Hint: use `difftime(units = \"hours\")` to return time difference between two time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the system's current time zone\ncurrent_tz <- Sys.timezone()\n\n# List all available time zones containing \"America\"\namerica_tzs <- OlsonNames()[grep(\"America\", OlsonNames())]\n\n# Print results\ncurrent_tz     # Example: \"America/Chicago\" (varies by system)\namerica_tzs    # Displays all time zones containing \"America\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\n# Define the UTC datetime\nutc_time <- ymd_hms(\"2024-08-01 12:00:00\", tz = \"UTC\")\n\n# Convert to different time zones\nny_time <- with_tz(utc_time, \"America/New_York\")\nlondon_time <- with_tz(utc_time, \"Europe/London\")\ntokyo_time <- with_tz(utc_time, \"Asia/Tokyo\")\n\n# Print results\nny_time      # \"2024-08-01 08:00:00 EDT\"\nlondon_time  # \"2024-08-01 13:00:00 BST\"\ntokyo_time   # \"2024-08-01 21:00:00 JST\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the datetime in \"US/Central\"\ncentral_time <- ymd_hms(\"2025-01-01 00:00:00\", tz = \"US/Central\")\n\n# Convert to \"Asia/Hong_Kong\"\nhk_time <- ymd_hms(\"2025-01-01 00:00:00\", tz = \"Asia/Hong_Kong\")\n\n# Compute time difference in hours\ntime_difference <- as.numeric(difftime(hk_time, central_time, units = \"hours\"))\n\n# Print result\ntime_difference  # 14 (hours)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}