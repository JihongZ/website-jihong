{
  "hash": "f28aa5c1263f18569224d2e65f4aa1e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 05: Data Transformation and Summary\"\nsubtitle: \"Using `dplyr` package\"\ndate: \"2025-02-05\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    number-offset: 0\n  uark-revealjs:\n    scrollable: true\n    chalkboard: true\n    embed-resources: false\n    code-fold: false\n    number-sections: false\n    footer: \"ESRM 64503 - Lecture 05: Text Data Analysis\"\n    slide-number: c/t\n    tbl-colwidths: auto\n    output-file: slides-index.html\n---\n\n\n\n\n\n\n::: objectives\n## Overview\n\n1.  String and Text Data\n2.  Basic Data Summary Using `dplyr`\n3.  Case Study of Trump Tweets\n4.  AI + Text Analysis?\n:::\n\n# String and Text Data\n\n## Special Characters\n\n-   Strings (character-type variable) can be enclosed in either single or double quotes.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    class(\"some text\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"character\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n-   If using both within a string, escape necessary quotes using `\\`.\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    cat(\"I'm a student\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    I'm a student\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    cat('He says \"it is ok!\"')\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    He says \"it is ok!\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    cat(\"I'm a student. He says \\\"it is ok\\\"!\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    I'm a student. He says \"it is ok\"!\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n::: callout-tip\n`cat()`: Prints the string output directly and escape special symbols.\n:::\n\n-   Use `\\` to escape special characters such as `\\n` (new line) and `\\t` (tab).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"To show \\\\ , we need to use two of them.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTo show \\ , we need to use two of them.\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"You are my student\\nI am your teacher/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYou are my student\nI am your teacher/\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n## Unicode and Other Special Characters\n\n-   `\\n` and `\\t`: Represent new line and tab space.\n-   `\\u` followed by Unicode code points allows special character insertion.\n-   This [Unicode Website](https://c.r74n.com/unicode/bullets) can copy and paste freely\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- \"This is the first line. \\nThis the \\t second line with a tab.\"\ncat(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis is the first line. \nThis the \t second line with a tab.\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\u03BC \\u03A3 \\u03B1 \\u03B2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nμ Σ α β\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"❤ ♫ ⦿\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n❤ ♫ ⦿\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n## Basic String Operations\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # Or use stringr: install.packages(\"stringr\")\n```\n:::\n\n\n\n\n\n\n### Creating and Manipulating Strings\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet1 <- \"MAKE AMERICA GREAT AGAIN!\"\ntweet2 <- \"Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n\n(tweet <- c(tweet1, tweet2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN!\"                          \n[2] \"Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Change Case\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntolower(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"make america great again!\"                          \n[2] \"congratulations @clemsonfb! https://t.co/w8viax0owy\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntoupper(tweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN!\"                          \n[2] \"CONGRATULATIONS @CLEMSONFB! HTTPS://T.CO/W8VIAX0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Calculate String Length\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnchar(tweet1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_length(tweet)  # `stringr` alternative\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 51\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### Splitting and Combining Strings\n\n#### Splitting Strings by Pattern\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(tweet, pattern = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"MAKE\"    \"AMERICA\" \"GREAT\"   \"AGAIN!\" \n\n[[2]]\n[1] \"Congratulations\"         \"@ClemsonFB!\"            \n[3] \"https://t.co/w8viax0OWY\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_split_1(tweet2, pattern = \" https://\")  # Returns a vector instead of a list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Congratulations @ClemsonFB!\" \"t.co/w8viax0OWY\"            \n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### Combining Strings\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet.words <- unlist(str_split(tweet, pattern = \" \"))\nstr_c(tweet.words, collapse=\" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MAKE AMERICA GREAT AGAIN! Congratulations @ClemsonFB! https://t.co/w8viax0OWY\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Data Transformation\n\n## Overview\n\n-   Data often needs transformation to fit the desired analysis or visualization.\n-   Learn to use the `dplyr` package for data transformation.\n-   Explore the `nycflights13` dataset.\n\n[Required Libraries]{.redcolor}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13) # `nycflights13` for the dataset flights.\nlibrary(tidyverse)\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   `glimpse()` for the quick screening of the data.\n\n## `dplyr` Core Functions\n\n-   `filter()`: Subset rows based on conditions.\n-   `arrange()`: Reorder rows.\n-   `select()`: Choose columns by name.\n-   `mutate()`: Create new columns.\n-   `summarize()`: Aggregate data.\n-   `group_by()`: group data for summarization.\n\n------------------------------------------------------------------------\n\n::: callout-important\n## Operators\n-   All following operators will return `TRUE` or `FALSE`:\n    -   Comparison operators: `==`, `!=`, `<`, `<=`, `>`, `>=`.\n    -   Logical operators: `&`, `|`, `!`.\n    -   Inclusion operator: `%in%`, i.e., `3 %in% c(1,2,3)` will return `TRUE`\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> filter(month != 1) # Months other than January\n    flights |> filter(month %in% 1:10) # Months other than Nov. and Dec.\n    ```\n    :::\n\n\n\n\n\n:::\n\n### `filter()`: select cases based on condtions\n\n-   Use `|>` (Preferred, a vertical line symbol `|` plus a greater symbol `>`) or `%>%` to chain multiple functions/operations (shortcut: {{< kbd mac=Command+Shift+M win=Ctrl+Shift+M >}}).\n-   **Aim**: Select flights on January 1st:\n    -   Compare whether month,day equal to \"1\" (Januarary) and \"1\" (1<sup>st</sup> day), respectively\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    jan1 <- flights |> filter(month == 1, day == 1)\n    jan1\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 842 × 19\n        year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n       <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n     1  2013     1     1      517            515         2      830            819\n     2  2013     1     1      533            529         4      850            830\n     3  2013     1     1      542            540         2      923            850\n     4  2013     1     1      544            545        -1     1004           1022\n     5  2013     1     1      554            600        -6      812            837\n     6  2013     1     1      554            558        -4      740            728\n     7  2013     1     1      555            600        -5      913            854\n     8  2013     1     1      557            600        -3      709            723\n     9  2013     1     1      557            600        -3      838            846\n    10  2013     1     1      558            600        -2      753            745\n    # ℹ 832 more rows\n    # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n    #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n    #   hour <dbl>, minute <dbl>, time_hour <dttm>\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `arrange()`: Arranging Rows\n\n-   Sort flights by departure delay:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights[, c(\"year\", \"month\", \"day\", \"dep_delay\")] |> arrange(dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n    year month   day dep_delay\n   <int> <int> <int>     <dbl>\n 1  2013    12     7       -43\n 2  2013     2     3       -33\n 3  2013    11    10       -32\n 4  2013     1    11       -30\n 5  2013     1    29       -27\n 6  2013     8     9       -26\n 7  2013    10    23       -25\n 8  2013     3    30       -25\n 9  2013     3     2       -24\n10  2013     5     5       -24\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Descending order:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights[, c(\"year\", \"month\", \"day\", \"dep_delay\")] |> arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n    year month   day dep_delay\n   <int> <int> <int>     <dbl>\n 1  2013     1     9      1301\n 2  2013     6    15      1137\n 3  2013     1    10      1126\n 4  2013     9    20      1014\n 5  2013     7    22      1005\n 6  2013     4    10       960\n 7  2013     3    17       911\n 8  2013     6    27       899\n 9  2013     7    22       898\n10  2013    12     5       896\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `select()`: Selecting Columns\n\n-   Choose specific columns:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(year, month, day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n## is equivalent to \n# flights[, c(\"year\", \"month\", \"day\")]\n```\n:::\n\n\n\n\n\n\n-   Helper functions for selecting the variables: `starts_with()`, `ends_with()`, `contains()`, `matches()`, `num_range()`.\n\n------------------------------------------------------------------------\n\n### `mutate()`: Adding New Variables\n\n-   Create new columns:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sml <- flights |> select(\n  year:day,\n  ends_with(\"delay\"),\n  distance,\n  air_time\n)\n\nflights_sml |> mutate(\n  gain = dep_delay - arr_delay,\n  speed = distance / air_time * 60\n) |> \n  select(year:day, gain, speed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 5\n    year month   day  gain speed\n   <int> <int> <int> <dbl> <dbl>\n 1  2013     1     1    -9  370.\n 2  2013     1     1   -16  374.\n 3  2013     1     1   -31  408.\n 4  2013     1     1    17  517.\n 5  2013     1     1    19  394.\n 6  2013     1     1   -16  288.\n 7  2013     1     1   -24  404.\n 8  2013     1     1    11  259.\n 9  2013     1     1     5  405.\n10  2013     1     1   -10  319.\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Use `transmute()` to keep only the new variables.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_sml |> transmute(\n  gain = dep_delay - arr_delay,\n  speed = distance / air_time * 60\n) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n    gain speed\n   <dbl> <dbl>\n 1    -9  370.\n 2   -16  374.\n 3   -31  408.\n 4    17  517.\n 5    19  394.\n 6   -16  288.\n 7   -24  404.\n 8    11  259.\n 9     5  405.\n10   -10  319.\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n#### `mutate()` and `case_when`: Create new categories\n\n-   `case_when`: The left hand side (LHS) determines which values match this case. The right hand side (RHS) provides the replacement value.\n    -   The LHS inputs must evaluate to logical vectors.\n    -   The RHS inputs will be coerced to their common type. In following case, it is character type\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1:10, NA)\ncategorized_x <- case_when(\n  x %in% 1:3 ~ \"low\",\n  x %in% 4:7 ~ \"med\",\n  x %in% 7:10 ~ \"high\",\n  is.na(x) ~ \"Missing\"\n)\ncategorized_x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"low\"     \"low\"     \"low\"     \"med\"     \"med\"     \"med\"     \"med\"    \n [8] \"high\"    \"high\"    \"high\"    \"Missing\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Combine `mutate()` and `case_when()` to create a new categorical variable\n    -   `na.rm = TRUE` to ignore the NA values when calculating the mean\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    Half_year = case_when(\n      month %in% 1:6 ~ 1,\n      month %in% 6:12 ~ 2,\n      is.na(month) ~ 999\n    )\n  ) |> \n  group_by(year, Half_year) |> \n  summarise(\n    Mean_dep_delay = mean(dep_delay, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n# Groups:   year [1]\n   year Half_year Mean_dep_delay\n  <int>     <dbl>          <dbl>\n1  2013         1           13.7\n2  2013         2           11.6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `summarize()` with `group_by()`: Summarizing Data\n\n-   Calculate average delay by destination:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_dest <- flights |> group_by(dest)\ndelay <- summarize(by_dest,\n  count = n(),\n  dist = mean(distance, na.rm = TRUE),\n  delay = mean(arr_delay, na.rm = TRUE)\n)\n```\n:::\n\n\n\n\n\n\n-   Visualize the results:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = delay, mapping = aes(x = dist, y = delay)) +\n  geom_point(aes(size = count), alpha = 1/3) +\n  geom_smooth(se = FALSE)\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `group_by()` and `ungroup()`: Grouping and Ungrouping\n\n-   Group data by multiple variables:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_day <- flights |> group_by(year, month, day)\nby_day |> \n  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day avg_dep_delay\n   <int> <int> <int>         <dbl>\n 1  2013     1     1         11.5 \n 2  2013     1     2         13.9 \n 3  2013     1     3         11.0 \n 4  2013     1     4          8.95\n 5  2013     1     5          5.73\n 6  2013     1     6          7.15\n 7  2013     1     7          5.42\n 8  2013     1     8          2.55\n 9  2013     1     9          2.28\n10  2013     1    10          2.84\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Ungroup data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_day <- ungroup(by_day)\n```\n:::\n\n\n\n\n\n\n## More dplyr Functions\n\n-   `rename()`: Renaming Columns.\n-   `relocate()`: Reorder column position.\n-   `distinct()`: Choose distinct/unique cases.\n-   `count()`: Create group size.\n-   `slice()`: Select cases or random sampling.\n-   `rowwise()`: Perform calculations for each row.\n\n------------------------------------------------------------------------\n\n### `rename()`: Renaming Columns\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename columns\ndf <- flights |> rename(\n  departure_time = dep_time,\n  arrival_time = arr_time,\n  departure_delay = dep_delay,\n  arrival_delay = arr_delay\n)\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year            <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, …\n$ month           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ day             <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ departure_time  <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558,…\n$ sched_dep_time  <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600,…\n$ departure_delay <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -…\n$ arrival_time    <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849…\n$ sched_arr_time  <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851…\n$ arrival_delay   <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -…\n$ carrier         <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", …\n$ flight          <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, …\n$ tailnum         <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39…\n$ origin          <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\"…\n$ dest            <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\"…\n$ air_time        <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, …\n$ distance        <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733,…\n$ hour            <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, …\n$ minute          <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, …\n$ time_hour       <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 …\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `relocate()`: Changing Column Order\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Move the \"year\" column after \"carrier\" column\ndf |> \n  select(carrier, departure_time, arrival_time, year) |> \n  relocate(year, .after = carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   carrier  year departure_time arrival_time\n   <chr>   <int>          <int>        <int>\n 1 UA       2013            517          830\n 2 UA       2013            533          850\n 3 AA       2013            542          923\n 4 B6       2013            544         1004\n 5 DL       2013            554          812\n 6 UA       2013            554          740\n 7 B6       2013            555          913\n 8 EV       2013            557          709\n 9 B6       2013            557          838\n10 AA       2013            558          753\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `distinct()`: Remove Duplicates\n\n-   `unique()` function outputs unique [values]{.redcolor} from a vector.\n-   `distinct()` function outputs unique [cases]{.redcolor} from a dataset\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(c(1, 2, 3, 4, 4, 5, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# flights with unique carrier-destination pairs\ndf |> \n  distinct(carrier, dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 314 × 2\n   carrier dest \n   <chr>   <chr>\n 1 UA      IAH  \n 2 AA      MIA  \n 3 B6      BQN  \n 4 DL      ATL  \n 5 UA      ORD  \n 6 B6      FLL  \n 7 EV      IAD  \n 8 B6      MCO  \n 9 AA      ORD  \n10 B6      PBI  \n# ℹ 304 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `count()`: Quick Grouping & Summarization\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count number of flights per carrier\ndf |> count(carrier, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 2\n   carrier     n\n   <chr>   <int>\n 1 UA      58665\n 2 B6      54635\n 3 EV      54173\n 4 DL      48110\n 5 AA      32729\n 6 MQ      26397\n 7 US      20536\n 8 9E      18460\n 9 WN      12275\n10 VX       5162\n11 FL       3260\n12 AS        714\n13 F9        685\n14 YV        601\n15 HA        342\n16 OO         32\n```\n\n\n:::\n\n```{.r .cell-code}\n# equivalent to\nif (0) {\ndf |> \n  group_by(carrier) |> \n  summarise(\n    n = n()\n  )\n}\n```\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `slice()`: Selecting Specific Rows\n\n`slice_*()` family allows you to choose rows based on their positions\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the first 10 flights\ndf |> slice(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 19\n    year month   day departure_time sched_dep_time departure_delay arrival_time\n   <int> <int> <int>          <int>          <int>           <dbl>        <int>\n 1  2013     1     1            517            515               2          830\n 2  2013     1     1            533            529               4          850\n 3  2013     1     1            542            540               2          923\n 4  2013     1     1            544            545              -1         1004\n 5  2013     1     1            554            600              -6          812\n 6  2013     1     1            554            558              -4          740\n 7  2013     1     1            555            600              -5          913\n 8  2013     1     1            557            600              -3          709\n 9  2013     1     1            557            600              -3          838\n10  2013     1     1            558            600              -2          753\n# ℹ 12 more variables: sched_arr_time <int>, arrival_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the top 5 flights with the highest departure delay\ndf |> slice_max(departure_delay, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day departure_time sched_dep_time departure_delay arrival_time\n  <int> <int> <int>          <int>          <int>           <dbl>        <int>\n1  2013     1     9            641            900            1301         1242\n2  2013     6    15           1432           1935            1137         1607\n3  2013     1    10           1121           1635            1126         1239\n4  2013     9    20           1139           1845            1014         1457\n5  2013     7    22            845           1600            1005         1044\n# ℹ 12 more variables: sched_arr_time <int>, arrival_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the 5 flights with the lowest arrival delay\ndf |> slice_min(arrival_delay, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day departure_time sched_dep_time departure_delay arrival_time\n  <int> <int> <int>          <int>          <int>           <dbl>        <int>\n1  2013     5     7           1715           1729             -14         1944\n2  2013     5    20            719            735             -16          951\n3  2013     5     2           1947           1949              -2         2209\n4  2013     5     6           1826           1830              -4         2045\n5  2013     5     4           1816           1820              -4         2017\n# ℹ 12 more variables: sched_arr_time <int>, arrival_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `slice_sample()`: Random Sampling\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Randomly select 5 flights\ndf |> slice_sample(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day departure_time sched_dep_time departure_delay arrival_time\n  <int> <int> <int>          <int>          <int>           <dbl>        <int>\n1  2013     2    11           2209           1900             189         2349\n2  2013     8     2           1824           1830              -6         2126\n3  2013     3    29           1811           1810               1         2059\n4  2013     8    22           1525           1330             115         1723\n5  2013     9    16           1158           1159              -1         1310\n# ℹ 12 more variables: sched_arr_time <int>, arrival_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select 1% random sample\ndf |> slice_sample(prop = 0.01)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,367 × 19\n    year month   day departure_time sched_dep_time departure_delay arrival_time\n   <int> <int> <int>          <int>          <int>           <dbl>        <int>\n 1  2013     6    15             NA            600              NA           NA\n 2  2013     3    29            811            815              -4          936\n 3  2013     3    25            944            915              29         1321\n 4  2013     6    20            850            849               1         1152\n 5  2013     9     9            822            825              -3         1009\n 6  2013    12     2           1027           1030              -3         1240\n 7  2013    10    13            655            700              -5          859\n 8  2013     2    18           1518           1516               2         1827\n 9  2013     5    14           1834           1740              54         2020\n10  2013     3    15           1328           1330              -2         1559\n# ℹ 3,357 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arrival_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### `rowwise()`: Row-Wise Grouping Operations\n\n-   Similar to `group_by`, but each row/case will be considered as one group\n\n-   When you're working with a rowwise tibble, then dplyr will use `[[` instead of `[` to make your life a little easier.\n\n-   [Assume you want to calculate the mean of variables x, y and c: $\\frac{x + y + z}{3}$]{.redcolor}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nxyz <- tibble(x = runif(6), y = runif(6), z = runif(6))\nrowMeans(xyz[, c(\"x\", \"y\", \"z\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1353109 0.5927611 0.5225581 0.6583087 0.6135767 0.4840354\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute the mean of x, y, z in each row\nxyz |> \n  rowwise() |> \n  mutate(m = mean(c(x, y, z)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n# Rowwise: \n      x       y     z     m\n  <dbl>   <dbl> <dbl> <dbl>\n1 0.114 0.00950 0.283 0.135\n2 0.622 0.233   0.923 0.593\n3 0.609 0.666   0.292 0.523\n4 0.623 0.514   0.837 0.658\n5 0.861 0.694   0.286 0.614\n6 0.640 0.545   0.267 0.484\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the total delay per flight\ndf |> \n  rowwise() |> \n  mutate(avg_delay_time_perMile = sum(departure_delay, arrival_delay, na.rm = TRUE) / distance,\n         .keep = \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n# Rowwise: \n   departure_delay arrival_delay distance avg_delay_time_perMile\n             <dbl>         <dbl>    <dbl>                  <dbl>\n 1               2            11     1400                0.00929\n 2               4            20     1416                0.0169 \n 3               2            33     1089                0.0321 \n 4              -1           -18     1576               -0.0121 \n 5              -6           -25      762               -0.0407 \n 6              -4            12      719                0.0111 \n 7              -5            19     1065                0.0131 \n 8              -3           -14      229               -0.0742 \n 9              -3            -8      944               -0.0117 \n10              -2             8      733                0.00819\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-tip\n`.keep = \"used\"` retains only the columns used in `...` to create new columns. This is useful for checking your work, as it displays inputs and outputs side-by-side.\n:::\n\n## Summary & Takeaways\n\n-   `dplyr` provides powerful tools for data transformation.\n-   Combining functions allows for efficient data manipulation.\n-   `group_by()` and `summarize()` are key for data aggregation.\n-   Functions like `rename()`, `slice()`, `relocate()`, and `case_when()` enhance usability.\n\n# Motivating Example: AI + Text Analysis\n\n## Extract Structural Information from Text\n\n-   Make use of language models to extract key information from a unstructral text file\n\n-   This is not a step-by-step guide of using LLMs, but a motivating example so that you may want to explore more usage of LLMs in data analysis.\n\n    -   The details of techniques can be found in this [link](https://ellmer.tidyverse.org/articles/structured-data.html).\n\n-   Note that the following code cannot be successfully executed in your local device without ChatGPT account and access to API keys.\n\n    -   Here is a video [tutorial](https://www.youtube.com/watch?v=B_Fbd_vxZyE) for using ChatGPT in R.\n\n## Programming LLMs in R\n\n-   Rather than using ChatBot on the OpenAI website, to programming LLMs for text analysis, I suggested using `ellmer` package (the [manual](https://ellmer.tidyverse.org/)) which was developed by the same person who developed `tidyverse` package.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ellmer)\nchat <- chat_openai(echo = FALSE, model = \"gpt-4o-mini\")\n\nchat$extract_data(\n  tweet2,\n  type = type_object(\n    URL = type_string(\"URL address starting with 'http'\")\n  )  \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$URL\n[1] \"https://t.co/w8viax0OWY\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchat$extract_data(\n  \"My name is Susan and I'm 13 years old. I like traveling and hiking.\",\n  type = type_object(\n    age = type_number(\"Age, in years.\"), # extract the numeric information as \"age\" from the provided text\n    name = type_string(\"Name, Uppercase\"), # extract the character information as \"name\" from the provided text\n    hobbies = type_array(\n      description = \"List of hobbies. Uppercase\",\n      items = type_string()\n    )\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$age\n[1] 13\n\n$name\n[1] \"SUSAN\"\n\n$hobbies\n[1] \"TRAVELING\" \"HIKING\"   \n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Here, `type_*()` specify object types in a way that LLMs can understand and are used for structured data extraction.\n\n## Article Summarisation\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pdftools)\npaper_text <- paste0(pdf_text(\"example_paper.pdf\"), collapse = \"\\n\")\n\ntype_summary <- type_object(\n  \"Summary of the article.\",\n  author = type_string(\"Name of the article author\"),\n  topics = type_array(\n    'Array of topics, e.g. [\"tech\", \"politics\"]. Should be as specific as possible, and can overlap.',\n    type_string(),\n  ),\n  design = type_string(\"Summary of research design of the article. One or two paragraphs max\"),\n  measures = type_string(\"Key indices in results\"),\n  finding = type_string(\"Summary of key findings. One paragraph max\")\n)\n\nchat <- chat_openai(model = \"gpt-4o-mini\")\ndata <- chat$extract_data(paper_text, type = type_summary)\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ author  : chr \"Yunting Liu, Shreya Bhandari, Zachary A. Pardos\"\n $ topics  : chr [1:4] \"Large Language Models\" \"Psychometric Analysis\" \"Educational Measurement\" \"Item Response Theory\"\n $ design  : chr \"This study investigates the ability of various Large Language Models (LLMs) to produce responses to College Alg\"| __truncated__\n $ measures: chr \"Key indices include Pearson and Spearman correlation coefficients comparing item parameters calibrated from AI \"| __truncated__\n $ finding : chr \"The findings demonstrate that while certain LLMs, particularly GPT-3.5 and GPT-4, can achieve performance level\"| __truncated__\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(data$author)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYunting Liu, Shreya Bhandari, Zachary A. Pardos\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data$topics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Large Language Models\"   \"Psychometric Analysis\"  \n[3] \"Educational Measurement\" \"Item Response Theory\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data$design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This study investigates the ability of various Large Language Models (LLMs) to produce responses to College Algebra assessment items that are psychometrically similar to human responses. Six models (GPT-3.5, GPT-4, Llama 2, Llama 3, Gemini-Pro, and Cohere Command R Plus) were utilized to generate responses based on items sourced from an OpenStax textbook. A total of 150 responses were generated per model and compared against a human response set obtained from undergraduate students. Item Response Theory (IRT) was employed to compare the psychometric properties of these AI-generated responses to those from human participants. Data augmentation strategies were tested to enhance item parameter calibration by combining human and AI-generated responses.\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data$measures)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Key indices include Pearson and Spearman correlation coefficients comparing item parameters calibrated from AI responses to those derived from human responses, with results showing Spearman correlations as high as 0.93 in augmented scenarios.\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data$finding)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The findings demonstrate that while certain LLMs, particularly GPT-3.5 and GPT-4, can achieve performance levels comparable to or exceeding average college students in College Algebra, they do not sufficiently replicate the variability of human responses. The most effective augmentation strategy combined human responses with a 1:1 ratio of resampled LLM responses, yielding improvements in correlation metrics. Although reliance solely on LLMs is inadequate for simulating human response variability, their integration offers a cost-effective means for educational measurement item calibration.\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Open Sourced Local Distilled Models\n\n-   You can freely download the open source LLM - Llama developed by Meta on this [link](https://ollama.com/).\n\n-   Teaching how to set up the LLMs is out of scope of this class. There are a lot of tutorials that you can use. For example, this [medium post](https://medium.com/@arunpatidar26/run-llm-locally-ollama-8ea296747505).\n\n-   Just showcase how you can extract key information. Llama needs more guide information to extract certain key words than ChatGPT.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchat <- chat_ollama(model = \"llama3.2\")\n\nchat$extract_data(\n  \"My name is Jihong and I'm an assistant professor. I like reading and hiking.\",\n  type = type_object(\n    job = type_string(\"Job\"), # extract the numeric information as \"age\" from the provided text\n    name = type_string(\"Name of the person, uppercase\"), # extract the character information as \"name\" from the provided text\n    hobbies = type_array(\n      description = \"List of hobbies. transform to Uppercase\",\n      items = type_string()\n    )\n  )\n)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$job\n[1] \"assistant professor\"\n\n$name\n[1] \"Jihong\"\n\n$hobbies\n[1] \"reading\" \"hiking\" \n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### Deepseek distilled model\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchat <- chat_ollama(model = \"deepseek-r1:8b\")\n\nText_to_summarize <- \"Results of Paper: Researchers have devised an ecological momentary assessment study following 80 students (mean age = 20.38 years, standard deviation = 3.68, range = 18–48 years; n = 60 female, n = 19 male, n = 1 other) from Leiden University for 2 weeks in their daily lives.\"\n\ntype_summarize_results = type_object(\n    N = type_number(\"Total sample size the study used\"),\n    Age = type_number(\"Average age in years\"),\n    Method = type_string(\"Assessment for data collection\"),\n    Participants = type_string(\"source of data collection\"),\n    Days = type_string(\"Duration of data collection\")\n)\nchat$extract_data(\n  Text_to_summarize,\n  type = type_summarize_results\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$N\n[1] 40\n\n$Age\n[1] 20.38\n\n$Method\n[1] \"Ecological momentary assessment study\"\n\n$Participants\n[1] \"n=40 students\"\n\n$Days\n[1] \"2 weeks\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Case Study: Analysis of Trump Tweets\n\n## Download of Trump Tweets\n\n-   For demonstration, we will analyze the tweets from President Donald Trump from 2009 to 2017.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs) # install.packages(\"dslabs\")\nlibrary(tidyverse) \nglimpse(dslabs::trump_tweets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 20,761\nColumns: 8\n$ source                  <chr> \"Twitter Web Client\", \"Twitter Web Client\", \"T…\n$ id_str                  <chr> \"6971079756\", \"6312794445\", \"6090839867\", \"577…\n$ text                    <chr> \"From Donald Trump: Wishing everyone a wonderf…\n$ created_at              <dttm> 2009-12-23 12:38:18, 2009-12-03 14:39:09, 200…\n$ retweet_count           <int> 28, 33, 13, 5, 7, 4, 2, 4, 1, 22, 7, 5, 1, 1, …\n$ in_reply_to_user_id_str <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ favorite_count          <int> 12, 6, 11, 3, 6, 5, 2, 10, 4, 30, 6, 3, 4, 3, …\n$ is_retweet              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-note\n-   `source`. Device or service used to compose tweet.\n-   `id_str`. Tweet ID.\n-   `text`. Tweet.\n-   `created_at`. Data and time tweet was tweeted.\n-   `retweet_count`. How many times tweet had been retweeted at time dataset was created.\n-   `in_reply_to_user_id_str`. If a reply, the user id of person being replied to.\n-   `favorite_count`. Number of times tweet had been favored at time dataset was created.\n-   `is_retweet`. A logical telling us if it is a retweet or not.\n:::\n\n## Basic summary of Trump tweets\n\n-   Where the tweets were sent from\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntrump_tweets |> \n  group_by(\n    source\n  ) |> \n  summarise(N = n()) |> \n  arrange(desc(N))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 2\n   source                       N\n   <chr>                    <int>\n 1 Twitter Web Client       10718\n 2 Twitter for Android       4652\n 3 Twitter for iPhone        3962\n 4 TweetDeck                  468\n 5 TwitLonger Beta            288\n 6 Instagram                  133\n 7 Media Studio               114\n 8 Facebook                   104\n 9 Twitter Ads                 96\n10 Twitter for BlackBerry      78\n11 Mobile Web (M5)             54\n12 Twitter for iPad            39\n13 Twitlonger                  22\n14 Twitter QandA               10\n15 Vine - Make a Scene         10\n16 Periscope                    7\n17 Neatly For BlackBerry 10     4\n18 Twitter Mirror for iPad      1\n19 Twitter for Websites         1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### Histogram of tweet sources\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nn_source_tbl <- trump_tweets |> \n  group_by(source) |> \n  summarise(\n    N = n()\n  )\nggplot(data = n_source_tbl) +\n  geom_col(aes(x = fct_reorder(source, N), y = N)) +\n  geom_label(aes(x = fct_reorder(source, N), y = N, label = N), nudge_y = 500) +\n  labs(x = \"\", y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n### The length of each tweet\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(str_length(trump_tweets$text))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    2.0    81.0   119.0   106.4   137.0   320.0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Most tweets have the length from 100 to 150 characters.\n\n-   Filter the tweet less than 20 characters\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_short_tweets <- trump_tweets |> \n  mutate(\n    N_characters = str_length(text)\n  ) |> \n  filter(N_characters <= 20)\n```\n:::\n\n\n\n\n\n\n## Extract Frequent Words from the Short Tweets\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_short_clean_tweets <- trump_short_tweets |> \n  mutate(\n    clean_text = str_remove(text, \"@\\\\S+ \")\n  ) |> \n  mutate(\n    clean_text2 = str_remove_all(clean_text, \"[[:punct:]]\") # Remove punctuation\n  ) |> \n  select(text, clean_text, clean_text2)\nslice_sample(trump_short_clean_tweets, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  text  clean_text clean_text2\n1    @maggiedubh  Yes.        Yes.         Yes\n2    @jrkirk22 Thanks.     Thanks.      Thanks\n3 @tkeller316  Thanks!     Thanks!      Thanks\n4      @CRLindke True!       True!        True\n5 @Corte74  It helped!  It helped!   It helped\n```\n\n\n:::\n:::\n\n\n\n\n\n\nExplanation of the Regular Expression:\n\n-   `@` matches the \\@ symbol.\n-   `\\\\S+` matches one or more non-whitespace characters (i.e., the username).\n-   `str_remove()` removes the matched pattern.\n\n------------------------------------------------------------------------\n\n-   Top 20 most frequently used words\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntrump.split <- unlist(str_split(trump_short_clean_tweets$clean_text2, \n                                pattern = \" \"))\n\nword.freq <- as.data.frame(sort(table(word = tolower(trump.split)), decreasing = T))\n\nword_freq_tbl <- word.freq |> \n  mutate(word = trimws(word)) |> \n  filter(\n    word != \"\",\n    !(word %in% stopwords::stopwords(\"en\")),\n    !(word %in% c(\"I\", \"&amp;\", \"The\", \"-\", \"just\"))\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = word_freq_tbl[1:20, ]) +\n  geom_col(aes(x = fct_reorder(word, Freq), y = Freq)) +\n  geom_label(aes(x = fct_reorder(word, Freq), y = Freq, label = Freq)) +\n  labs(x = \"\", y = \"\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ESRM6990V_Lecture05_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Reference\n\n1.  [Tidyverse Skills for Data Science](https://jhudatascience.org/tidyversecourse/get-data.html#images)\n2.  [Practical Data Processing for Social and Behavioral Research Using R](https://books.psychstat.org/rdata/image-data.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}