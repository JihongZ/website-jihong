{
  "hash": "3b758fa6acf7dd5a98c8a29543952efc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 12: Introduction to Git and GitHub\"\ndate: \"2025-02-05\"\nexecute: \n  eval: false\n  echo: true\n  warning: false\noutput-location: default\ncode-annotations: below\nformat: \n  html:\n    code-tools: true\n    code-line-numbers: false\n    code-fold: false\n    toc-location: left\n    number-offset: 0\n    grid:\n      sidebar-width: 250px\n      body-width: 1300px\n      margin-width: 50px\n---\n\n\n\n\n# Introduction to Git and GitHub\n\n## What is Git?\n\n-   A distributed version control system\n-   Tracks changes in files\n-   Allows multiple users to work on the same project\n\n------------------------------------------------------------------------\n\n## Why Use Git?\n\n-   **Version Control**: Keep track of changes made to code or documents\n-   **Collaboration**: Allow multiple developers to work on the same codebase\n-   **Backup**: Keep a backup of previous versions of your project\n\n------------------------------------------------------------------------\n\n## What is GitHub?\n\n-   A platform for hosting Git repositories\n-   Enables collaboration with others on code-based projects\n-   Provides cloud storage for your code\n\n------------------------------------------------------------------------\n\n## Git vs. GitHub\n\n-   **Git**: A tool for managing versions of your code locally\n-   **GitHub**: A web-based service for hosting Git repositories and collaboration\n\n------------------------------------------------------------------------\n\n## Setting Up Git\n\n1.  Install Git on your computer\n    -   [Git Downloads](https://git-scm.com/downloads)\n2.  Configure Git\n\n``` bash\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@example.com\"\n```\n\n------------------------------------------------------------------------\n\n## Basic Git Commands\n\n-   `git init`: Initialize a new Git repository\n-   `git add <file>`: Stage changes for commit\n-   `git commit -m \"message\"`: Save changes with a commit message\n-   `git status`: Check the status of your files\n-   `git log`: View commit history\n\n------------------------------------------------------------------------\n\n## A More user-friendly method - GitHub Desktop\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"https://www.youtube.com/embed/CAwStH0ay-M?si=Iie97MNxKGD1NhsR\" scrolling=\"no\" seamless=\"seamless\" frameborder=\"0\" width=\"100%\" height=\"769\"></iframe>\n```\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## GitHub Desktop: Commit Existing Folder\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"https://www.youtube.com/embed/unoUc1LNFtY?si=8Ck-8dMeVCujo_l-\" scrolling=\"no\" seamless=\"seamless\" frameborder=\"0\" width=\"100%\" height=\"769\"></iframe>\n```\n\n:::\n:::\n\n\n\n\n# Git Terminal\n\n## Creating a GitHub Repository\n\n1.  Go to [GitHub](https://github.com).\n2.  Click on the **+** icon at the top right corner and select **New repository**.\n3.  Name your repository and choose whether it will be **public** or **private**.\n4.  Click **Create repository**.\n\n------------------------------------------------------------------------\n\n## Cloning the Repository to Your Local Machine\n\nOnce the repository is created on GitHub, follow these steps to clone it to your local machine.\n\n1.  Copy the repository URL from GitHub.\n\n2.  In your terminal, type:\n\n    ``` bash\n    git clone https://github.com/yourusername/yourrepository.git\n    ```\n\n3.  Navigate into the repository:\n\n    ``` bash\n    cd yourrepository\n    ```\n\n------------------------------------------------------------------------\n\n## Modify Files Locally\n\n1.  Create a new file or modify an existing one. Example: Create a file `hello.txt` with the content:\n\n    ``` txt\n    Hello, GitHub! This is my first file.\n    ```\n\n2.  Check the status of the changes:\n\n    ``` bash\n    git status\n    ```\n\n------------------------------------------------------------------------\n\n## Staging Changes\n\nAfter modifying the files, you need to stage the changes before committing them.\n\n1.  Stage the file using the `git add` command:\n\n    ``` bash\n    git add hello.txt\n    ```\n\n2.  Check the status again to confirm the file is staged:\n\n    ``` bash\n    git status\n    ```\n\n------------------------------------------------------------------------\n\n## Committing Changes\n\n1.  Commit the staged changes with a descriptive message:\n\n``` bash\ngit commit -m \"Add hello.txt with initial content\"\n```\n\n2.  View the commit history:\n\n``` bash\ngit log\n```\n\n------------------------------------------------------------------------\n\n## Pushing Changes to GitHub\n\nNow that the changes are committed locally, you can push them to GitHub.\n\n1.  Push the changes to the GitHub repository:\n\n    ``` bash\n    git push origin main\n    ```\n\n2.  Check the repository on GitHub, and you should see the file `hello.txt` uploaded.\n\n------------------------------------------------------------------------\n\n## Modifying Existing Files\n\n1.  Modify an existing file (e.g., `hello.txt`).\n\n2.  Stage the changes:\n\n    ``` bash\n    git add hello.txt\n    ```\n\n3.  Commit the changes with a message:\n\n    ``` bash\n    git commit -m \"Update hello.txt with a new message\"\n    ```\n\n4.  Push the changes to GitHub:\n\n    ``` bash\n    git push origin main\n    ```\n\n------------------------------------------------------------------------\n\n## Branching and Merging\n\n1.  Create a new branch:\n\n    ``` bash\n    git branch new-feature\n    git checkout new-feature\n    ```\n\n2.  Make some changes in a file (e.g., update `hello.txt`).\n\n3.  Stage and commit those changes:\n\n    ``` bash\n    git add hello.txt\n    git commit -m \"Add a new feature\"\n    ```\n\n4.  Merge the `new-feature` branch back to `main`:\n\n    ``` bash\n    git checkout main\n    git merge new-feature\n    ```\n\n5.  Push the merged changes to GitHub:\n\n    ``` bash\n    git push origin main\n    ```\n\n------------------------------------------------------------------------\n\n## Collaborative Workflow on GitHub\n\n1.  Fork a repository on GitHub.\n\n2.  Clone the forked repository to your local machine:\n\n    ``` bash\n    git clone https://github.com/yourusername/forked-repository.git\n    ```\n\n3.  Create a new branch:\n\n    ``` bash\n    git branch my-branch\n    git checkout my-branch\n    ```\n\n4.  Make changes, commit them, and push them to GitHub:\n\n    ``` bash\n    git add .\n    git commit -m \"Describe the changes\"\n    git push origin my-branch\n    ```\n\n5.  Create a [pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) to merge your changes into the original repository.\n\n    1.  [Tutorial of creating a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request?tool=desktop)\n\n![](images/clipboard-131139395.png)\n\n------------------------------------------------------------------------\n\n## Example: Create a new github repository\n\n-   You start with a new project\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"https://www.youtube.com/embed/nMvNe3PdO_M?si=Xza9Ybp_BjJMgAZz\" scrolling=\"no\" seamless=\"seamless\" frameborder=\"0\" width=\"100%\" height=\"769\"></iframe>\n```\n\n:::\n:::\n\n\n\n\n### Steps for Students to Follow:\n\n1.  **Create a new GitHub repository**.\n2.  **Clone the repository** to their local machine using `git clone`.\n3.  **Add the `README.md`** file into the repository\n4.  **Stage, commit**, and **push** the changes back to GitHub.\n\n## Conclusion\n\n-   Git and GitHub are essential tools for version control and collaboration.\n-   Git manages local changes, while GitHub enables collaboration in the cloud.\n-   Start using Git and GitHub for better project management and teamwork!\n\n------------------------------------------------------------------------\n\n## Questions?\n\nFeel free to ask any questions or explore Git and GitHub further!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}