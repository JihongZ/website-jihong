{
  "hash": "384c30581997a1eda57335ee1e9407dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 03: R Functions\"\nsubtitle: \"\"\nauthor: \"Jihong Zhang*, Ph.D\"\ninstitute: | \n  Educational Statistics and Research Methods (ESRM) Program*\n  \n  University of Arkansas\ndate: \"2025-08-18\"\nexecute: \n  warning: false\n  message: false\n  eval: false\n  echo: true\nformat: \n  html: \n    page-layout: full\ntoc: true\ntoc-depth: 2\nlightbox: true\ncode-fold: show\n---\n\n\n\n\n## Creating Custom Functions\n\n1.  Write a function called `fahrenheit_to_celsius` that converts a temperature from Fahrenheit to Celsius.\n\n-   Formula: $C = \\frac{(F - 32) \\times 5}{9}$\n-   Test your function with $F = 98.6$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfahrenheit_to_celsius <- function(temp_f) {\n  return((temp_f - 32) * 5 / 9)\n}\nfahrenheit_to_celsius(temp_f = 98.6)\n```\n:::\n\n\n\n\n2.  Create a function called `circle_area` that calculates the area of a circle given its radius.\n\n-   Formula: $A = \\pi \\times r^2$\n-   Use the built-in constant `pi` in R and test the function with $r = 5$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r is the circle radius\ncircle_area <- function(r){\n  return(pi * r^2) \n}\ncircle_area(r = 5)\ncircle_area(5) # 5 assign to r\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Piping\n\n1.  Transform the following code into a pipe-based version:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- filter(mtcars, hp > 100)\nresult <- arrange(result, desc(mpg))\nresult <- select(result, hp, mpg)\nresult\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  filter(hp > 100) |> \n  arrange(desc(mpg)) |> \n  select(hp, mpg)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Debugging Functions\n\n1.  Identify and correct the mistake in the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> mutate(\n  a = (a - mean(a, na.rm = TRUE)) / sd(a),\n  b = (b - mean(a, na.rm = TRUE)) / sd(b) # a should be changed to b\n)\n```\n:::\n\n\n\n\n2.  Rewrite the code by creating a custom function `standardized()` to avoid code repetition.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandardized <- function(x){\n  return((x - mean(x, na.rm = TRUE)) / sd(x))\n}\ndf |> mutate(\n  a = standardized(a),\n  b = standardized(b)\n)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Arguments in Functions\n\n1.  Create a function `greet` that takes two arguments, `name` (default = \"World\") and `punctuation` (default = \"!\"). The function should return a greeting message.\n\n-   Example: `greet(\"Alice\", \"?\")` should return `\"Hello, Alice?\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreet <- function(name = \"World\", punctuation = \"!\") {\n  paste0(\"Hello, \", name, punctuation)\n}\ngreet(name = \"Alice\", punctuation = \"?\")\n```\n:::\n\n\n\n\n2.  Test the `sum()` function by passing named arguments (`x = 3, y = 5`) and explain how the function handles them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(x = 3, y = 5)\nsum(3, 5)\nsum(c(3, 5))\n# mean(x = 3, 5)\n# mean(c(3, 5))\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Function Scope\n\n1.  Explain why the following code throws an error:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  result <- x + y # beacuase result is in the local scope\n  return(result)\n}\nadd(5, 3)\nresult  # Error\n```\n:::\n\n\n\n\n2.  Modify the code to make the variable `result` accessible outside the function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd <- function(x, y) {\n  result <<- x + y # beacuase result is in the local scope\n  return(result)\n}\nadd(6, 3)\nresult\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Flexible Arguments\n\n1.  Write a function `multiply_all()` that accepts a variable number of arguments and multiplies all the numbers together. Test your function with `multiply_all(2, 3, 4)`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiply_all <- function(x, y, z) { # flexible arguments\n  x * y * z\n}\nmultiply_all(2, 3, 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiply_all_flexible <- function(...) {\n  prod(c(...))\n}\nmultiply_all_flexible(1, 2, 3)\nmultiply_all_flexible(1, 2, 3, 5)\nmultiply_all_flexible(1, 2, 3, 5, 8)\nmultiply_all_flexible(c(1, 2, 3, 5, 8))\n```\n:::\n\n\n\n\n1.  Investigate the `mean()` function by using the help page. Explain why it can accept additional arguments like `y` in the code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x = c(1, 2, 3), y = 3) # because y is flexible argument. It is not included into calculation of mean\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Nested Functions\n\n1.  Write a function `rect_prism_volume()` that calculates the volume of a rectangular prism given its length, width, and height. Inside this function, create another function `rect_area()` to calculate the base area.\n\n    -   The **formula for the volume of a rectangular prism** is:\n\n        $V =  A_b \\times h$\n\n        $A_b = l \\times w$\n\n        where:\n\n        -   V = Volume of the rectangular prism,\n\n        -   $A_b$ = base area\n\n            -   l = Length,\n\n            -   w = Width,\n\n        -   h = Height.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the first function\nrect_area <- function(l, w){\n  A_base = l * w\n  return(A_base)\n}\n\n# the second function that contains the first function\nrect_prism_volume <- function(l, w, h){\n  return(rect_area(l, w) * h)\n}\n```\n:::\n\n\n\n\n1.  Test your function with length = 5, width = 3, height = 4.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrect_prism_volume(l =5, w = 3, h = 4)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Rescale Function\n\n1.  Create a custom function `rescale()` that rescales a numeric vector to the range 0 to 1.\n\n-   Formula: $x_{\\text{scaled}} = \\frac{x - \\min(x)}{\\max(x) - \\min(x)}$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrescale <- function(x){\n  res = (x - min(x)) / (max(x) - min(x))\n  return(res)\n}\n```\n:::\n\n\n\n\n2.  Use your `rescale()` function to rescale the columns of the following data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ndf <- tibble(\n a = rnorm(5),\n b = rnorm(5),\n c = rnorm(5)\n)\ndf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  mutate(\n    a = rescale(a),\n    b = rescale(b),\n    c = rescale(c)\n  )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}