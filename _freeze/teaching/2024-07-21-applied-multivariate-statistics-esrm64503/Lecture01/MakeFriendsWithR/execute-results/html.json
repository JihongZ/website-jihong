{
  "hash": "7162b80f3a6b6dd717a547739b889a52",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Make Friends With R, RStudio, Positron, and Quarto\"\nauthor: \"Jihong Zhang\"\nformat: html\n---\n\n\n\n<!-- Prompt: Make a brief tutorial with the format of quarto markdown to R, Rstudio, and Quarto (.qmd) can be used to execute R code/syntax. Some important sections include data import, export, loading R package-->\n\n# Make Friends With R, RStudio, Positron, and Quarto\n\nWelcome to your first steps in applied multivariate statistics! In this tutorial, you'll learn how to use R, RStudio, Positron, and Quarto (`.qmd` files) to run R code, analyze data, and create reproducible reports.\n\n------------------------------------------------------------------------\n\n## 1. What are R, RStudio, Positron, and Quarto?\n\n-   **R** (required): A powerful programming language for statistical computing and graphics.\n-   **Quarto** (required): A next-generation tool for creating dynamic documents, presentations, and websites with R (and other languages). Quarto files use the `.qmd` extension. Download [link](https://quarto.org/docs/get-started/)\n-   **RStudio** (optional): An integrated development environment (IDE) that makes using R easier. Download [link](https://posit.co/download/rstudio-desktop/)\n-   **Positron** (optional): A next-generation data science IDE created by Posit (formerly RStudio), built on VS Code architecture, designed for both R and Python workflows. Download [link](https://positron.posit.co)\n\n::: {.rmdnote}\nChoose RStudio or Positron based on your preference\n:::\n------------------------------------------------------------------------\n\n## 1.4. Getting Started with RStudio: The Classic R IDE\n\n**RStudio** is the most widely-used IDE for R programming, offering a user-friendly interface that has helped millions of data scientists learn R. It's mature, stable, and specifically designed for R workflows.\n\n### Key Features of RStudio:\n\n-   **R-focused design**: Built specifically for R programming and statistical analysis\n-   **Four-panel layout**: Organized interface with Source, Console, Environment, and Files/Plots panels\n-   **Package management**: Easy package installation and loading through GUI\n-   **Project management**: RStudio Projects for organized, reproducible workflows\n-   **Git integration**: Built-in version control support\n-   **R Markdown/Quarto support**: Native support for literate programming\n\n### RStudio Interface Layout:\n\n-   **Source Editor (top-left)**: Edit `.R`, `.qmd`, and other files with syntax highlighting\n-   **Console (bottom-left)**: Interactive R console for running commands\n-   **Environment/History (top-right)**: View objects, variables, and command history\n-   **Files/Plots/Packages/Help (bottom-right)**: Navigate files, view plots, manage packages, access help\n\n### Getting Started with RStudio:\n\n1. **Download**: Get RStudio Desktop from [posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)\n2. **Create projects**: Use File → New Project for organized workflows\n3. **Customize layout**: Tools → Global Options → Pane Layout to adjust panels\n4. **Install packages**: Use Tools → Install Packages or the Packages panel\n\n### Essential RStudio Features:\n\n-   **Code completion**: Tab completion for functions and variables\n-   **Help integration**: F1 on functions for instant help\n-   **Object inspector**: Click objects in Environment to view details\n-   **Plot history**: Navigate through previous plots in Plots panel\n-   **Addins**: Extend functionality with community-developed tools\n\n### RStudio Keyboard Shortcuts:\n\n-   **Run code**: Ctrl+Enter (Cmd+Enter on Mac)\n-   **New R script**: Ctrl+Shift+N (Cmd+Shift+N)\n-   **Render document**: Ctrl+Shift+K (Cmd+Shift+K)\n-   **Insert code chunk**: Ctrl+Alt+I (Cmd+Option+I)\n-   **Go to line**: Ctrl+G (Cmd+G)\n\n------------------------------------------------------------------------\n\n## 1.5. Introducing Positron: A Modern Data Science IDE\n\n**Positron** is Posit's newest IDE, designed specifically for data scientists working with R and Python. Built on the VS Code platform, it combines the best of modern development tools with data science-specific features.\n\n### Key Features of Positron:\n\n-   **Multi-language support**: Seamlessly work with R and Python in the same environment\n-   **Interactive console**: Enhanced R and Python consoles with rich outputs\n-   **Variable viewer**: Inspect data frames, lists, and objects with interactive exploration\n-   **Plot viewer**: View and interact with ggplot2, matplotlib, and other graphics\n-   **Integrated terminal**: Access system commands and package managers\n-   **Extension ecosystem**: Leverage VS Code's vast extension library\n\n### Positron vs RStudio:\n\n| Feature | RStudio | Positron |\n|---------|---------|----------|\n| Language Support | R-focused | R + Python |\n| Base Platform | Custom Qt | VS Code |\n| Extensions | Limited | Extensive VS Code ecosystem |\n| Performance | Traditional | Modern, faster startup |\n| Interface | Fixed panels | Flexible layouts |\n| Learning Curve | R-specific | General programming |\n\n### Getting Started with Positron:\n\n1. **Download**: Get Positron from [positron.posit.co](https://positron.posit.co/)\n2. **Open projects**: Use File → Open Folder or create new R/Python projects\n3. **Run code**: Use Ctrl+Enter (Cmd+Enter on Mac) to execute code\n4. **Explore data**: Click variables in the Variables panel to explore interactively\n\n### Positron Keyboard Shortcuts:\n\n-   **Run code**: Ctrl+Enter (Cmd+Enter)\n-   **New R console**: Ctrl+Shift+`\n-   **Render Quarto**: Ctrl+Shift+K (Cmd+Shift+K)\n-   **Command palette**: Ctrl+Shift+P (Cmd+Shift+P)\n\n## 1.6. RStudio Basics\n\n-   Source Editor (top-left): edit `.R`/`.qmd` files\n-   Choose your IDE: Try both RStudio and Positron to see which fits your workflow\n-   Explore the `tidyverse` (readr, dplyr, tidyr, ggplot2)\n-   Learn Quarto for documents, slides, and websites\n-   If using Positron, explore Python integration for data science\n-   Practice by importing a dataset, cleaning it, summarizing, and plottingpackages, read help\n-   Useful shortcuts: Run line/selection (Cmd+Enter), Render (Cmd+Shift+K)\n\n## 1.7. IDE Basics: RStudio vs Positron\n\n### RStudio Layout:\n-   Source Editor (top-left): edit `.R`/`.qmd` files\n-   Console/Terminal (bottom-left): run commands\n-   Environment/History (top-right): objects and history\n-   Files/Plots/Packages/Help (bottom-right): navigate, view plots, manage packages, read help\n\n### Positron Layout:\n-   **Editor**: Central area for `.R`/`.qmd` files with syntax highlighting\n-   **Console**: Bottom panel with enhanced R/Python consoles\n-   **Variables**: Side panel with interactive data exploration\n-   Use projects and `here::here()` for reliable paths in both RStudio and Positron options\n-   **Explorer**: File browser and project navigation\n\n### Common Shortcuts (Both IDEs):\n\n-   **Rendering**:\n    - RStudio: Use the Render button or Cmd+Shift+K\n    - Positron: Use Ctrl+Shift+K or the Command Palette\n    - Terminal: Run `quarto render` in any IDE\n\n**Note**: Both RStudio and Positron support project-based workflows, making it easy to manage paths and dependencies. Render Quarto: Cmd+Shift+K (Mac) / Ctrl+Shift+K (Windows/Linux)\n\n------------------------------------------------------------------------\n\n## 2. Running R Code in Quarto\n\nYou can write and execute R code directly in Quarto documents (*.qmd) using code chunks. This works identically in both RStudio and Positron:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello, world!\")\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 3. Install and Load Packages\n\n-   Use `install.packages()` once per machine; load each time with `library()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"readr\", \"ggplot2\", \"here\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks rstan::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jihong/Documents/website-jihong\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 4. Importing Data\n\n-   Prefer `readr::read_csv()` for CSV; `read.csv()` is the base R alternative.\n\n1.  Create a folder called \"data\" in your project folder, download `heights.csv` into that folder. Run the following chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read CSV with readr\ndata <- readr::read_csv(here::here(\"data\", \"heights.csv\"))\n\n# Base R alternative\ndata_base <- read.csv(here::here(\"data\", \"heights.csv\"))\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 5. Exporting Data\n\n-   Save data to disk using `write_csv()` or `write.csv()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(data, here::here(\"outputs\", \"clean-data.csv\"))\nwrite.csv(data, here::here(\"outputs\", \"clean-data-base.csv\"), row.names = FALSE)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 6. Basic Data Wrangling with dplyr\n\n-   Core verbs: `select()`, `filter()`, `mutate()`, `summarize()`, `group_by()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nmtcars_summary <- mtcars |>\n  group_by(cyl) |>\n  summarize(mean_mpg = mean(mpg), .groups = \"drop\")\n\nhead(mtcars_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    cyl mean_mpg\n  <dbl>    <dbl>\n1     4     26.7\n2     6     19.7\n3     8     15.1\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 7. Basic Plot with ggplot2\n\n-   Create a scatterplot and map aesthetics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size = 2) +\n  labs(color = \"Cylinders\", x = \"Weight\", y = \"MPG\")\n```\n\n::: {.cell-output-display}\n![](MakeFriendsWithR_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n## 9. Working Directories and Projects\n\n-   Use RStudio Projects and `here::here()` for reliable paths.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jihong/Documents/website-jihong/teaching/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhere::here()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jihong/Documents/website-jihong\"\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 10. Quarto Basics (YAML, Chunks, Render)\n\n-   YAML header controls title, author, format.\n-   Chunk options customize behavior (e.g., hide code, set figure captions).\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Scatterplot of wt vs mpg](MakeFriendsWithR_files/figure-html/fig-scatter-1.png){#fig-scatter width=672}\n:::\n:::\n\n\n\n-   Render via the Render button in RStudio or run `quarto render` in a terminal.\n\n------------------------------------------------------------------------\n\n## 11. Reproducibility\n\n-   Record your session details for reproducibility.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.3 (2025-02-28)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Chicago\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] here_1.0.1          lubridate_1.9.4     forcats_1.0.0      \n [4] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.4        \n [7] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[10] ggplot2_3.5.2       tidyverse_2.0.0     cmdstanr_0.8.1.9000\n[13] rstan_2.32.7        StanHeaders_2.32.10\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6         tensorA_0.36.2.1     xfun_0.52           \n [4] QuickJSR_1.7.0       htmlwidgets_1.6.4    processx_3.8.6      \n [7] inline_0.3.21        tzdb_0.5.0           vctrs_0.6.5         \n[10] tools_4.4.3          ps_1.9.0             generics_0.1.3      \n[13] stats4_4.4.3         curl_6.4.0           parallel_4.4.3      \n[16] pkgconfig_2.0.3      checkmate_2.3.2      distributional_0.5.0\n[19] RcppParallel_5.1.10  lifecycle_1.0.4      farver_2.1.2        \n[22] compiler_4.4.3       munsell_0.5.1        codetools_0.2-20    \n[25] htmltools_0.5.8.1    yaml_2.3.10          pillar_1.10.2       \n[28] abind_1.4-8          posterior_1.6.1      tidyselect_1.2.1    \n[31] digest_0.6.37        stringi_1.8.7        labeling_0.4.3      \n[34] rprojroot_2.0.4      fastmap_1.2.0        grid_4.4.3          \n[37] colorspace_2.1-1     cli_3.6.5            magrittr_2.0.3      \n[40] loo_2.8.0            pkgbuild_1.4.7       withr_3.0.2         \n[43] scales_1.3.0         backports_1.5.0      timechange_0.3.0    \n[46] rmarkdown_2.29       matrixStats_1.5.0    gridExtra_2.3       \n[49] hms_1.1.3            evaluate_1.0.3       knitr_1.50          \n[52] V8_6.0.3             rlang_1.1.6          Rcpp_1.0.14         \n[55] glue_1.8.0           jsonlite_2.0.0       R6_2.6.1            \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 12. Getting Help\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\nhelp(\"mean\")\nexample(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nmean> x <- c(0:10, 50)\n\nmean> xm <- mean(x)\n\nmean> c(xm, mean(x, trim = 0.10))\n[1] 8.75 5.50\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## 13. Next Steps\n\n-   Explore the `tidyverse` (readr, dplyr, tidyr, ggplot2)\n-   Learn Quarto for documents, slides, and websites\n-   Practice by importing a dataset, cleaning it, summarizing, and plotting\n",
    "supporting": [
      "MakeFriendsWithR_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}