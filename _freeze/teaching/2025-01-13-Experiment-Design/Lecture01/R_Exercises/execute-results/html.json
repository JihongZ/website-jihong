{
  "hash": "2c31eddbbd3c9fec4c5eb3ccd209e0a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Programming Exercises\"\nexecute: \n  eval: false\nformat: \n  html:\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    number-sections: true\n    code-tools: true\n    code-summary: \"Solution\"\n---\n\n\n\n# R Programming Exercises\n\nThis file contains exercises to practice the concepts covered in the R introduction. Each exercise includes questions in comments and solutions in hidden code chunks.\n\n## Note to Students\n\n- Try to solve each exercise before looking at the solutions\n- Copy the Questions (the commented lines) into a new R script file, and write your solutions in that file\n- Practice running the code in RStudio\n- Experiment with modifying the code to understand how it works\n- Use the help documentation (?function_name) when you're unsure about a function\n\n## Exercise 1: Basic Data Types and Vectors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a numeric vector with values 10, 20, 30, 40, 50\n# Question 2: Create a character vector with your name and two hobbies\n# Question 3: Create a logical vector with TRUE, FALSE, TRUE, FALSE\n# Question 4: Check the class and length of each vector you created\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create numeric vector\nnumbers <- c(10, 20, 30, 40, 50)\n\n# 2. Create character vector\npersonal_info <- c(\"Your Name\", \"Reading\", \"Swimming\")\n\n# 3. Create logical vector\nlogical_values <- c(TRUE, FALSE, TRUE, FALSE)\n\n# 4. Check properties\nclass(numbers)\nlength(numbers)\nclass(personal_info)\nlength(personal_info)\nclass(logical_values)\nlength(logical_values)\n```\n:::\n\n\n\n## Exercise 2: Vector Operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create two numeric vectors x = (1, 3, 5, 7, 9) and y = (2, 4, 6, 8, 10)\n# Question 2: Calculate x + y, x * y, and x^2\n# Question 3: Find the mean, sum, and standard deviation of vector x\n# Question 4: Create a sequence from 1 to 20 with step size 2\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create vectors\nx <- c(1, 3, 5, 7, 9)\ny <- c(2, 4, 6, 8, 10)\n\n# 2. Vector operations\nx + y\nx * y\nx^2\n\n# 3. Summary statistics\nmean(x)\nsum(x)\nsd(x)\n\n# 4. Sequence\nseq(1, 20, by = 2)\n```\n:::\n\n\n\n## Exercise 3: Factors and Categorical Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a factor from the vector: c(\"Low\", \"Medium\", \"High\", \"Low\", \"Medium\")\n# Question 2: Create an ordered factor with levels: \"Beginner\", \"Intermediate\", \"Advanced\"\n# Question 3: Group ages 18, 25, 30, 35, 40, 45, 50 into three categories: \"Young\" (<30), \"Middle\" (30-45), \"Senior\" (>45)\n# Question 4: Create a frequency table of your factor from question 1\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create factor\nlevels_factor <- factor(c(\"Low\", \"Medium\", \"High\", \"Low\", \"Medium\"))\n\n# 2. Create ordered factor\nskill_levels <- factor(c(\"Beginner\", \"Intermediate\", \"Advanced\", \"Beginner\", \"Advanced\"),\n                      levels = c(\"Beginner\", \"Intermediate\", \"Advanced\"),\n                      ordered = TRUE)\n\n# 3. Group ages\nages <- c(18, 25, 30, 35, 40, 45, 50)\nage_groups <- cut(ages, \n                 breaks = c(0, 30, 45, 100),\n                 labels = c(\"Young\", \"Middle\", \"Senior\"),\n                 include.lowest = TRUE)\n\n# 4. Frequency table\ntable(levels_factor)\n```\n:::\n\n\n\n## Exercise 4: Data Frames and Basic Operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a data frame with columns: Name, Age, City, and Salary\n# Question 2: Add a new column called \"Age_Group\" based on age (<30=\"Young\", 30-50=\"Middle\", >50=\"Senior\")\n# Question 3: Find the mean salary by age group\n# Question 4: Select only people from a specific city\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create data frame\nemployees <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),\n  Age = c(25, 35, 42, 28, 55),\n  City = c(\"NYC\", \"LA\", \"Chicago\", \"NYC\", \"Boston\"),\n  Salary = c(50000, 65000, 75000, 55000, 80000)\n)\n\n# 2. Add age group column\nemployees$Age_Group <- ifelse(employees$Age < 30, \"Young\",\n                             ifelse(employees$Age <= 50, \"Middle\", \"Senior\"))\n\n# 3. Mean salary by age group\naggregate(Salary ~ Age_Group, data = employees, FUN = mean)\n\n# 4. Select NYC employees\nnyc_employees <- employees[employees$City == \"NYC\", ]\n```\n:::\n\n\n\n## Exercise 5: Data Manipulation with dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Load the dplyr package and create a sample data frame\n# Question 2: Use filter() to select rows where age > 30\n# Question 3: Use select() to keep only Name and Salary columns\n# Question 4: Use mutate() to create a new column \"Salary_K\" (salary in thousands)\n# Question 5: Use group_by() and summarize() to find mean salary by city\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\nlibrary(dplyr)\n\n# 1. Create sample data\nsample_data <- data.frame(\n  Name = c(\"John\", \"Jane\", \"Mike\", \"Sarah\", \"Tom\"),\n  Age = c(25, 32, 28, 35, 29),\n  City = c(\"NYC\", \"LA\", \"NYC\", \"Chicago\", \"LA\"),\n  Salary = c(45000, 60000, 52000, 70000, 58000)\n)\n\n# 2. Filter age > 30\nolder_employees <- sample_data |> \n  filter(Age > 30)\n\n# 3. Select specific columns\nname_salary <- sample_data |> \n  select(Name, Salary)\n\n# 4. Create new column\nsample_data_with_k <- sample_data |> \n  mutate(Salary_K = Salary / 1000)\n\n# 5. Group and summarize\ncity_salary_summary <- sample_data |> \n  group_by(City) |> \n  summarize(\n    Mean_Salary = mean(Salary),\n    Count = n(),\n    .groups = \"drop\"\n  )\n```\n:::\n\n\n\n## Exercise 6: Data Reshaping (Wide to Long)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a wide format data frame with test scores at three time points\n# Question 2: Reshape the data from wide to long format\n# Question 3: Calculate the mean score for each time point\n# Question 4: Create a new column showing score improvement from Time1 to Time3\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\nlibrary(tidyr)\n\n# 1. Create wide format data\nwide_data <- data.frame(\n  ID = 1:5,\n  Score_Time1 = c(75, 82, 68, 90, 78),\n  Score_Time2 = c(78, 85, 72, 92, 81),\n  Score_Time3 = c(82, 88, 76, 95, 85)\n)\n\n# 2. Reshape to long format\nlong_data <- wide_data |> \n  pivot_longer(\n    cols = starts_with(\"Score_\"),\n    names_to = \"Time\",\n    values_to = \"Score\"\n  ) |> \n  mutate(Time = gsub(\"Score_Time\", \"\", Time))\n\n# 3. Mean score by time\ntime_means <- long_data |> \n  group_by(Time) |> \n  summarize(Mean_Score = mean(Score), .groups = \"drop\")\n\n# 4. Score improvement\nimprovement_data <- wide_data |> \n  mutate(Improvement = Score_Time3 - Score_Time1)\n```\n:::\n\n\n\n## Exercise 7: Basic Statistics and Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a numeric vector and calculate basic statistics (mean, median, sd, min, max)\n# Question 2: Create a histogram of your data\n# Question 3: Create a boxplot comparing two groups\n# Question 4: Create a scatter plot with two variables\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create data and calculate statistics\ndata_vector <- c(12, 15, 18, 22, 25, 28, 30, 32, 35, 38, 40, 42, 45, 48, 50)\n\nmean(data_vector)\nmedian(data_vector)\nsd(data_vector)\nmin(data_vector)\nmax(data_vector)\nsummary(data_vector)\n\n# 2. Histogram\nhist(data_vector, main = \"Distribution of Data\", xlab = \"Values\", col = \"lightblue\")\n\n# 3. Boxplot (create two groups)\ngroup1 <- c(12, 15, 18, 22, 25)\ngroup2 <- c(35, 38, 40, 42, 45)\nboxplot(group1, group2, names = c(\"Group 1\", \"Group 2\"), main = \"Comparison of Groups\")\n\n# 4. Scatter plot\nx_values <- 1:15\ny_values <- data_vector\nplot(x_values, y_values, main = \"Scatter Plot\", xlab = \"X\", ylab = \"Y\", pch = 16)\n```\n:::\n\n\n\n## Exercise 8: Control Structures and Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Write an if-else statement to classify scores as \"Pass\" (>=60) or \"Fail\" (<60)\n# Question 2: Use a for loop to calculate the square of numbers 1 to 10\n# Question 3: Use sapply() to calculate the square root of numbers 1 to 10\n# Question 4: Write a function that calculates the area of a circle given the radius\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. If-else for score classification\nscore <- 75\nif (score >= 60) {\n  result <- \"Pass\"\n} else {\n  result <- \"Fail\"\n}\n\n# 2. For loop for squares\nsquares <- numeric(10)\nfor (i in 1:10) {\n  squares[i] <- i^2\n}\n\n# 3. sapply for square roots\nnumbers <- 1:10\nsquare_roots <- sapply(numbers, sqrt)\n\n# 4. Function for circle area\ncircle_area <- function(radius) {\n  area <- pi * radius^2\n  return(area)\n}\n\n# Test the function\ncircle_area(5)\n```\n:::\n\n\n\n## Exercise 9: Working with Missing Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a vector with some NA values\n# Question 2: Count how many NA values are in your vector\n# Question 3: Remove NA values from your vector\n# Question 4: Replace NA values with the mean of non-NA values\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create vector with NA\ndata_with_na <- c(1, 2, NA, 4, 5, NA, 7, 8, NA, 10)\n\n# 2. Count NA values\nna_count <- sum(is.na(data_with_na))\n\n# 3. Remove NA values\ndata_clean <- na.omit(data_with_na)\n# or\ndata_clean2 <- data_with_na[!is.na(data_with_na)]\n\n# 4. Replace NA with mean\ndata_imputed <- data_with_na\ndata_imputed[is.na(data_imputed)] <- mean(data_with_na, na.rm = TRUE)\n```\n:::\n\n\n\n## Exercise 10: Comprehensive Data Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: Create a comprehensive dataset with multiple variables\n# Question 2: Perform exploratory data analysis (summary statistics, visualizations)\n# Question 3: Create new variables through transformations\n# Question 4: Group the data and calculate summary statistics by group\n\n# Write your code here:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Solutions:\n# 1. Create comprehensive dataset\ncomprehensive_data <- data.frame(\n  ID = 1:20,\n  Age = sample(18:65, 20, replace = TRUE),\n  Gender = sample(c(\"Male\", \"Female\"), 20, replace = TRUE),\n  Education = sample(c(\"High School\", \"College\", \"Graduate\"), 20, replace = TRUE),\n  Income = sample(30000:100000, 20, replace = TRUE),\n  Satisfaction = sample(1:10, 20, replace = TRUE)\n)\n\n# 2. Exploratory data analysis\nsummary(comprehensive_data)\nstr(comprehensive_data)\n\n# Visualizations\nhist(comprehensive_data$Age, main = \"Age Distribution\")\nboxplot(Income ~ Gender, data = comprehensive_data, main = \"Income by Gender\")\n\n# 3. Create new variables\ncomprehensive_data$Age_Group <- cut(comprehensive_data$Age, \n                                   breaks = c(0, 30, 50, 100),\n                                   labels = c(\"Young\", \"Middle\", \"Senior\"))\n\ncomprehensive_data$Income_K <- comprehensive_data$Income / 1000\n\n# 4. Group analysis\ngroup_summary <- comprehensive_data |> \n  group_by(Gender, Education) |> \n  summarize(\n    Mean_Income = mean(Income),\n    Mean_Satisfaction = mean(Satisfaction),\n    Count = n(),\n    .groups = \"drop\"\n  )\n```\n:::\n\n\n\n---\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}