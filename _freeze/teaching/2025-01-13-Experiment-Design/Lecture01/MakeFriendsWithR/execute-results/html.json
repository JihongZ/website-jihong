{
  "hash": "163585f2d334b0631c4c12d1eca94075",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example 01: Make Friends with R\"\nexecute: \n  eval: false\nformat: \n  html:\n    toc: true\n    toc_float: true\n    toc_depth: 2\n    toc_collapsed: true\n    number_sections: true\n    code-fold: show\n    code-summary: \"Hide the code\"\n---\n\n\n\n\n# How to use this file\n\n1.  You can review all R code on this webpage.\n\n2.  To test one certain chunk of code, you click the \"copy\" icon in the upper right hand side of the chunk block (see screenshot below)\n\n    -   ![](figures/R-copy-paste.png)\n\n3.  To review the whole file, click \"\\</\\> Code\" next to the title of this paper. Find \"View Source\" and click the button. Then, you can paste to the newly created Quarto Document.\n\n    ![](figures/code-copy-paste.png)\n\n# R SYNTAX AND NAMING CONVENTIONS\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# MAKE FRIENDS WITH R\n# BASED ON MAKE FRIENDS WITH R BY JONATHAN TEMPLIN\n# CREATED BY JIHONG ZHANG\n\n# R comments begin with a # -- there are no multiline comments\n\n# RStudio helps you build syntax\n#   GREEN: Comments and character values in single or double quotes\n\n# You can use the tab key to complete object names, functions, and arugments\n\n# R is case sensitive. That means R and r are two different things.\n```\n:::\n\n\n\n\n# R Functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In R, every statement is a function\n\n# The print function prints the contents of what is inside to the console\nprint(x = 10)\n\n# The terms inside the function are called the arguments; here print takes x\n#   To find help with what the arguments are use:\n?print\n\n# Each function returns an object\nprint(x = 10)\n\n# You can determine what type of object is returned by using the class function\nclass(print(x = 10))\n```\n:::\n\n\n\n\n# R Objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Each objects can be saved into the R environment (the workspace here)\n#   You can save the results of a function call to a variable of any name\nMyObject = print(x = 10)\nclass(MyObject)\n\n# You can view the objects you have saved in the Environment tab in RStudio\n# Or type their name\nMyObject\n\n# There are literally thousands of types of objects in R (you can create them),\n#   but for our course we will mostly be working with data frames (more later)\n\n# The process of saving the results of a function to a variable is called \n#   assignment. There are several ways you can assign function results to \n#   variables:\n\n# The equals sign takes the result from the right-hand side and assigns it to\n#   the variable name on the left-hand side:\nMyObject = print(x = 10)\n\n# The <- (Alt \"-\" in RStudio) functions like the equals (right to left)\nMyObject2 <- print(x = 10)\n\nidentical(MyObject, MyObject2)\n\n# The -> assigns from left to right:\nprint(x = 10) -> MyObject3\n\nidentical(MyObject, MyObject2, MyObject3)\n```\n:::\n\n\n\n\n# Importing and Exporting Data\n\n-   The data frame is an R object that is a rectangular array of data. The variables in the data frame can be any class (e.g., numeric, character) and go across the columns. The observations are across the rows.\n\n-   We will start by importing data from a comma-separated values (csv) file.\n\n-   We will use the read.csv() function. Here, the argument `stringsAsFactors` keeps R from creating data strings\n\n-   We will use `here::here()` function to quickly point to the target data file.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can also set the directory using setwd(). Here, I set my directory to \n#   my root folder:\n# setwd(\"~\")\n\ngetwd()\ndir()\n# If I tried to re-load the data, I would get an error:\nHeightsData = read.csv(file = \"heights.csv\", stringsAsFactors = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2: I can use the full path to the file:\n# HeightsData = \n#   read.csv(\n#     file = \"/Users/jihong/Documents/website-jihong/teaching/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data/heights.csv\", \n#     stringsAsFactors = FALSE)\n\n# Or, I can reset the current directory and use the previous syntax:\n# setwd(\"/Users/jihong/Documents/website-jihong/teaching/2024-07-21-applied-multivariate-statistics-esrm64503/Lecture01/data/\")\n\nHeightsData = read.csv(file = \"teaching/2025-01-13-Experiment-Design/Lecture01/heights.csv\",\n                       stringsAsFactors = FALSE)\nHeightsData\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note: Windows users will have to either change the direction of the slash\n#   or put two slashes between folder levels.\n\n# To show my data in RStudio, I can either double click it in the \n#   Environment tab or use the View() function\n# View(HeightsData)\n\n# You can see the variable names and contents by using the $:\nHeightsData$ID\n\n# To read in SPSS files, we will need the foreign library. The foreign\n#   library comes installed with R (so no need to use install.packages()).\nlibrary(foreign)\n\n# The read.spss() function imports the SPSS file to an R data frame if the \n#   argument to.data.frame is TRUE\nWideData = read.spss(file = \"teaching/2025-01-13-Experiment-Design/Lecture01/wide.sav\", \n                     to.data.frame = TRUE)\nWideData\n```\n:::\n\n\n\n\n# Merging R data frame objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The WideData and HeightsData have the same set of ID numbers. We can use the merge() function to merge them into a single data frame. Here, x is the name of the left-side data frame and y is the name of the right-side data frame. The arguments by.x and by.y are the name of the variable(s) by which we will merge:\nAllData = merge(x = WideData, y = HeightsData, by.x = \"ID\", by.y = \"ID\")\nAllData\n\n## Method 2: Use dplyr method, |> can be typed using `command + shift + M`\nlibrary(dplyr)\nWideData |> \n  left_join(HeightsData, by = \"ID\")\n```\n:::\n\n\n\n\n# Transforming Wide to Long\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sometimes, certain packages require repeated measures data to be in a long\n# format. \n\nlibrary(dplyr) # contains variable selection \n\n## Wrong Way\nAllData |> \n  tidyr::pivot_longer(starts_with(\"DVTime\"), names_to = \"DV\", values_to = \"DV_Value\") |> \n  tidyr::pivot_longer(starts_with(\"AgeTime\"), names_to = \"Age\", values_to = \"Age_Value\") \n\n## Correct Way\nAllData |> \n  tidyr::pivot_longer(c(starts_with(\"DVTime\"), starts_with(\"AgeTime\"))) |> \n  tidyr::separate(name, into = c(\"Variable\", \"Time\"), sep = \"Time\") |> \n  tidyr::pivot_wider(names_from = \"Variable\", values_from = \"value\") -> AllDataLong\n```\n:::\n\n\n\n\n# Gathering Descriptive Statistics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The psych package makes getting descriptive statistics very easy.\n## install.packages(\"psych\")\nlibrary(psych)\n\n# We can use describe() to get descriptive statistics across all cases:\nDescriptivesWide = describe(AllData)\nDescriptivesWide\n\nDescriptivesLong = describe(AllDataLong)\nDescriptivesLong\n\n# We can use describeBy() to get descriptive statistics by groups:\nDescriptivesLongID = describeBy(AllDataLong, group = AllDataLong$ID)\nDescriptivesLongID\n```\n:::\n\n\n\n\n# Transforming Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transforming data is accomplished by the creation of new variables. \nAllDataLong$AgeC = AllDataLong$Age - mean(AllDataLong$Age)\n\n# You can also use functions to create new variables. Here we create new terms\n#   using the function for significant digits:\nAllDataLong$AgeYear = signif(x = AllDataLong$Age, digits = 2)\nAllDataLong$AgeDecade = signif(x = AllDataLong$Age, digits = 1)\nhead(AllDataLong)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}