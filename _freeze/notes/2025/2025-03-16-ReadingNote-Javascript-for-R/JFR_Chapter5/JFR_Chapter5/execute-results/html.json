{
  "hash": "bd3296a240b86be5b89b34145edfcab6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\n---\n\n\n\n## JFR Chapter 5: Create a widget\n\nThis function puts together the minimalistic structure necessary to implement an htmlwidget and opens `play.R`, `play.js`, and `play.yaml` in the RStudio IDE or the default text editor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_package(\"playground\")\nhtmlwidgets::scaffoldWidget(\"play\")\n#>Created boilerplate for widget constructor R/play.R\n#>Created boilerplate for widget dependencies at inst/htmlwidgets/play.yaml\n#>Created boilerplate for widget javascript bindings at inst/htmlwidgets/play.js\n```\n:::\n\n\n\nHere's the directory structure for the project `playground`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"JFR_Chapter5/playground\")\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   └── play.R\n├── inst\n│   └── htmlwidgets\n│       ├── play.js\n│       └── play.yaml\n├── man\n│   ├── play-shiny.Rd\n│   └── play.Rd\n└── playground.Rproj\n```\n:::\n\n\n\nThen, use `document()` ({{< kbd cmd+shift+D >}}) and `load_all()` ({{< kbd cmd+shift+L >}}) to document and load the package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::document()\ndevtools::load_all()\n```\n:::\n\n\n\nThere is only one function in the playground package, `play()`, which is the constructor function for the widget. It takes a message as input and returns the message to HTML output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay(message = \"This is a widget!\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Click to see the source code of play.R\"}\n#' <Add Title>\n#'\n#' <Add Description>\n#'\n#' @import htmlwidgets\n#'\n#' @export\nplay <- function(message, width = NULL, height = NULL, elementId = NULL) {\n\n  # forward options using x\n  x = list(\n    message = message\n  )\n\n  # create widget\n  htmlwidgets::createWidget(\n    name = 'play',\n    x,\n    width = width,\n    height = height,\n    package = 'playground',\n    elementId = elementId\n  )\n}\n\n#' Shiny bindings for play\n#'\n#' Output and render functions for using play within Shiny\n#' applications and interactive Rmd documents.\n#'\n#' @param outputId output variable to read from\n#' @param width,height Must be a valid CSS unit (like \\code{'100\\%'},\n#'   \\code{'400px'}, \\code{'auto'}) or a number, which will be coerced to a\n#'   string and have \\code{'px'} appended.\n#' @param expr An expression that generates a play\n#' @param env The environment in which to evaluate \\code{expr}.\n#' @param quoted Is \\code{expr} a quoted expression (with \\code{quote()})? This\n#'   is useful if you want to save an expression in a variable.\n#'\n#' @name play-shiny\n#'\n#' @export\nplayOutput <- function(outputId, width = '100%', height = '400px'){\n  htmlwidgets::shinyWidgetOutput(outputId, 'play', width, height, package = 'playground')\n}\n\n#' @rdname play-shiny\n#' @export\nrenderPlay <- function(expr, env = parent.frame(), quoted = FALSE) {\n  if (!quoted) { expr <- substitute(expr) } # force quoted\n  htmlwidgets::shinyRenderWidget(expr, playOutput, env, quoted = TRUE)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}