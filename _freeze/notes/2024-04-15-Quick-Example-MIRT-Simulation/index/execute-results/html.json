{
  "hash": "e44cf143f2629977f0736843b69e3d6e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simulate response patterns under Multidimensional IRT\"\nauthor: 'Jihong Zhang'\nsubtitle: \"Using mirt package\"\ndate: 'April 15 2024'\ncategories:\n  - R\n  - Simulation\n  - Mirt\nexecute: \n  eval: true\n  echo: true\n  warning: false\nformat: \n  html: \n    code-fold: false\n    code-summary: 'Click to see the code'\n---\n\n\n\nWe need to pre-specify `a` (item slopes) and `b` (item intercepts). `mu` (factor mean) and `sigma` (factor correlation) are optional.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mirt)\n# Simulation for 6 5-category items\nset.seed(1234)\nJ = 6 # number of items\nN = 1000 # number of participants\na <- matrix(rlnorm(J, mean = 0, sd = 1), ncol = 1)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           [,1]\n[1,] 0.29907355\n[2,] 1.31973273\n[3,] 2.95778648\n[4,] 0.09578035\n[5,] 1.53591253\n[6,] 1.65873604\n```\n\n\n:::\n\n```{.r .cell-code}\n# for the graded model, ensure that there is enough space between the intercepts,\n# otherwise closer categories will not be selected often (minimum distance of 0.3 here)\ndiffs <- t(apply(matrix(runif(J*4, .3, 1), nrow = J), 1, cumsum))\nd <- -diffs + rnorm(J) + 4\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]     [,3]      [,4]\n[1,] 2.664915 2.234209 1.781049 1.1617851\n[2,] 5.469432 5.006874 4.139455 3.6538239\n[3,] 3.629467 3.107838 2.439850 1.9265796\n[4,] 2.623207 2.111322 1.171061 0.5159463\n[5,] 3.059096 2.647764 1.765822 1.3390547\n[6,] 3.972815 3.644818 3.312779 2.4810091\n```\n\n\n:::\n:::\n\n\n\n## Data Generation\n\n### Model 1: Population Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## population data: 5-category: 0-4\ndat1 <- simdata(a, d, N, itemtype = rep('graded', 6))\nhead(dat1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Item_1 Item_2 Item_3 Item_4 Item_5 Item_6\n[1,]      4      4      0      2      2      3\n[2,]      4      4      0      3      1      1\n[3,]      4      4      4      3      4      4\n[4,]      4      4      4      4      3      4\n[5,]      4      4      2      2      4      4\n[6,]      4      4      0      2      4      4\n```\n\n\n:::\n\n```{.r .cell-code}\napply(dat1, 2, min)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     0      0      0      0      0      0 \n```\n\n\n:::\n\n```{.r .cell-code}\napply(dat1, 2, max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     4      4      4      4      4      4 \n```\n\n\n:::\n:::\n\n\n\n### Model 2: 4-category Data with first two categories merged\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Data2: Merged-category data: 4-category, 0-1->0,2->1,3->2,4->3\ndat2 <- dat1\ndat2[dat2%in%0:1] <- 0\ndat2[dat2==2] <- 1\ndat2[dat2==3] <- 2\ndat2[dat2==4] <- 3\napply(dat2, 2, min)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     0      0      0      0      0      0 \n```\n\n\n:::\n\n```{.r .cell-code}\napply(dat2, 2, max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     3      3      3      3      3      3 \n```\n\n\n:::\n:::\n\n\n\n### Model 3: 4-category Data with middle 2 categories merged\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Data3: Merged-category data: 4-category, 0->0,1-2->1,3->2,4->3\ndat3 <- dat1\ndat3[dat3%in%1:2] <- 1\ndat3[dat3==3] <- 2\ndat3[dat3==4] <- 3\napply(dat3, 2, min)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     0      0      0      0      0      0 \n```\n\n\n:::\n\n```{.r .cell-code}\napply(dat3, 2, max)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nItem_1 Item_2 Item_3 Item_4 Item_5 Item_6 \n     3      3      3      3      3      3 \n```\n\n\n:::\n:::\n\n\n\n## Data Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Population model\nmod1 <- mirt(dat1, model = 1)\nmod1_param <- coef(mod1, simplify = TRUE)$items\nmod1_itemfit <- itemfit(mod1)\n\n## Tail merge model: model2\nmod2 <- mirt(dat2, model = 1)\nmod2_param <- coef(mod2, simplify = TRUE)$items\nmod2_itemfit <- itemfit(mod2)\n\n## middle category merge model: model3\nmod3 <- mirt(dat3, model = 1)\nmod3_param <- coef(mod3, simplify = TRUE)$items\nmod3_itemfit <- itemfit(mod3)\n```\n:::\n\n\n\n## Parameter Recovery\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]     [,3]      [,4]\n[1,] 2.664915 2.234209 1.781049 1.1617851\n[2,] 5.469432 5.006874 4.139455 3.6538239\n[3,] 3.629467 3.107838 2.439850 1.9265796\n[4,] 2.623207 2.111322 1.171061 0.5159463\n[5,] 3.059096 2.647764 1.765822 1.3390547\n[6,] 3.972815 3.644818 3.312779 2.4810091\n```\n\n\n:::\n\n```{.r .cell-code}\nmod1_param[,2:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             d1       d2       d3        d4\nItem_1 2.735601 2.384500 1.903656 1.3048624\nItem_2 4.858808 4.593081 3.840999 3.3620014\nItem_3 3.312650 2.689130 2.066059 1.5852103\nItem_4 2.700883 2.203063 1.191275 0.5331736\nItem_5 2.984396 2.647378 1.814976 1.3947808\nItem_6 3.998164 3.610733 3.188431 2.4446850\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_bias <- function(true, est) {\n  diffs = abs(true - est)\n  mean(diffs)\n}\n\nrmse <- function(true, est) {\n  sqrt(mean((true - est)^2))\n}\n\n\nmessage(\"Model 1 Absolute Bias: \", rev_bias(true = as.numeric(a), est = mod1_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 1 Absolute Bias: 0.138134694773941\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Model 2 Absolute Bias: \", rev_bias(true = as.numeric(a), est = mod2_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 2 Absolute Bias: 0.148123883403385\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Model 3 Absolute Bias: \", rev_bias(true = as.numeric(a), est = mod3_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 3 Absolute Bias: 0.143701203576533\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Model 1 RMSE: \", rmse(true = as.numeric(a), est = mod1_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 1 RMSE: 0.181002906235458\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Model 2 RMSE: \", rmse(true = as.numeric(a), est = mod2_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 2 RMSE: 0.192108182410819\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Model 3 RMSE: \", rmse(true = as.numeric(a), est = mod3_param[,'a1']))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel 3 RMSE: 0.199433960594364\n```\n\n\n:::\n:::\n\n\n\n## Item Fit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRMSEA_mat <- rbind(\n  mod1 = mod1_itemfit$RMSEA.S_X2,\n  mod2 = mod2_itemfit$RMSEA.S_X2,\n  mod3 = mod3_itemfit$RMSEA.S_X2\n)\ncolnames(RMSEA_mat) <- paste0('Item', 1:6)\nRMSEA_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Item1 Item2       Item3      Item4      Item5      Item6\nmod1     0     0 0.007012011 0.00000000 0.00000000 0.01453993\nmod2     0     0 0.000000000 0.01388161 0.01366644 0.01811601\nmod3     0     0 0.000000000 0.00000000 0.00000000 0.02597991\n```\n\n\n:::\n:::\n\n\n\n## Global Fit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM2_df <- rbind(\n  M2(mod1, \"C2\"),\n  M2(mod2, \"C2\"),\n  M2(mod3, \"C2\")\n)\nrownames(M2_df) <- paste0(\"Model\", 1:3)\nkableExtra::kable(M2_df)\n```\n\n::: {.cell-output-display}\n\n\n|       |       M2| df|         p|     RMSEA| RMSEA_5|  RMSEA_95|     SRMSR|       TLI|       CFI|\n|:------|--------:|--:|---------:|---------:|-------:|---------:|---------:|---------:|---------:|\n|Model1 | 7.446046|  9| 0.5907836| 0.0000000|       0| 0.0310624| 0.0244103| 1.0061040| 1.0000000|\n|Model2 | 9.723017|  9| 0.3733705| 0.0089675|       0| 0.0373899| 0.0267362| 0.9970541| 0.9982325|\n|Model3 | 9.265264|  9| 0.4131572| 0.0054317|       0| 0.0362447| 0.0273196| 0.9989821| 0.9993893|\n\n\n:::\n:::\n\n\n\n## MCMC Simulation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(parSim)\nResults <- parSim(\n  J = c(6, 10, 20),\n  N = c(100, 500, 1000),\n  # Number of repititions?\n  reps = 20, # more is better!\n  \n  # Parallel?\n  nCores = 5,\n  export = c(\"rev_bias\"),\n  expression = {\n      library(mirt)\n      a <- matrix(rlnorm(J, mean = 0, sd = 1), ncol = 1)\n      diffs <- t(apply(matrix(runif(J*4, .3, 1), nrow = J), 1, cumsum))\n      d <- -diffs + rnorm(J) + 4\n      dat1 <- simdata(a, d, N, itemtype = rep('graded', J))\n      dat2 <- dat1\n      dat2[dat2%in%0:1] <- 0\n      dat2[dat2==2] <- 1\n      dat2[dat2==3] <- 2\n      dat2[dat2==4] <- 3\n      dat3 <- dat1\n      dat3[dat3%in%1:2] <- 1\n      dat3[dat3==3] <- 2\n      dat3[dat3==4] <- 3\n      ## Population model\n      mod1 <- mirt(dat1, model = 1)\n      mod1_param <- coef(mod1, simplify = TRUE)$items\n      mod1_itemfit <- itemfit(mod1)\n      \n      ## Tail merge model: model2\n      mod2 <- mirt(dat2, model = 1)\n      mod2_param <- coef(mod2, simplify = TRUE)$items\n      mod2_itemfit <- itemfit(mod2)\n      \n      ## middle category merge model: model3\n      mod3 <- mirt(dat3, model = 1)\n      mod3_param <- coef(mod3, simplify = TRUE)$items\n      mod3_itemfit <- itemfit(mod3)\n      ## output\n      data.frame(\n       bias_mod1 = rev_bias(true = as.numeric(a), est = mod1_param[,'a1']),\n       bias_mod2 = rev_bias(true = as.numeric(a), est = mod2_param[,'a1']),\n       bias_mod3 = rev_bias(true = as.numeric(a), est = mod3_param[,'a1']),\n       SRMSR_mod1 = M2(mod1, \"C2\")$SRMSR,\n       SRMSR_mod2 = M2(mod2, \"C2\")$SRMSR,\n       SRMSR_mod3 = M2(mod3, \"C2\")$SRMSR\n      )\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nResults_plot <- Results |> \n  pivot_longer(c(starts_with(\"bias\"), starts_with(\"SRMSR\")), \n               names_to = 'Model', values_to = 'Value') |> \n  separate(Model, into = c(\"Measure\", \"Model\")) |> \n  group_by(J, N, Model, Measure) |> \n  summarise(Value = mean(Value))\n\nResults_plot |> \n  ggplot() +\n  geom_path(aes(x = N, y = Value, col = Model, group = Model)) +\n  facet_wrap(Measure ~ J, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}