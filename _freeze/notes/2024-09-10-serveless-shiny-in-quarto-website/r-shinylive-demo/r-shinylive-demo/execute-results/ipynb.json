{
  "hash": "1a7645aebf6e77c596e6f99bbb78fe94",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"shinylive-demo\"\nsidebar: false\nfilters:\n  - shinylive\nformat: html\n---\n\n::: {.cell standalone='true' viewerHeight='600'}\n\n```{.r .cell-code}\n#| standalone: true\n#| viewerHeight: 600\n#| eval: false\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot <- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x <- seq(from = -2, to = 2, length.out = 500)\n    y <- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd <- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [
      "r-shinylive-demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}