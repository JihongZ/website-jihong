---
title: "ESRM64103: Student Grades"
sidebar: false
execute: 
  echo: false
format: 
  html:
    code-link: false
    code-tools: false
---

```{r}
#| standalone: false
#| eval: false
#| viewerHeight: 420
library(shiny)
library(DT)

Student_name = c(
  "Ayankoya, Monisola Beauty",
  "Barr, Stephanie Marie",
  "Binhuwaimel, Azizah Abdulrahman A",
  "Bonge, Nicole Grace",
  "Cascante  Vallejo,Diana Carolina",
  "Hughes, Yale",
  "Lan, Xi",
  "Negrete  Becerra,Luis Arturo",
  "Shakeri, Sepideh",
  "West, Abigail Joan"
)
Student_ID = 
c(
  "011021830",
  "002796491",
  "010686196",
  "010734654",
  "010827156",
  "011088780",
  "010848887",
  "010866994",
  "011015879",
  "010953825"
)

# Example data: Student IDs and their corresponding grades
grades_data <- data.frame(
  Student_ID = Student_ID,
  Name = Student_name,
  Bonus = rep("2pts", 10),
  HW1_Grade = rep("10/10", 10),
  Total = rep("12", 10)
)

# Define the UI
ui <- fluidPage(
  titlePanel("Enter Student ID to Check Grade"),
  sidebarLayout(
    sidebarPanel(
      textInput("student_id", "Enter Student ID:", value = ""),
      actionButton("submit", "Submit")
    ),
    mainPanel(
      tableOutput("grade_output"),
      verbatimTextOutput("grade_output_error")
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  observeEvent(input$submit, {
    req(input$student_id)
    
    student_info <- grades_data[grades_data$Student_ID == input$student_id, ]
    # student_info <- grades_data[grades_data$Student_ID == "011021830", ]
    
    if (input$student_id %in% Student_ID) {
      output$grade_output <- renderTable(student_info)
    } else {
      output$grade_output_error <- renderText({
        paste("No grade found for Student ID", input$student_id)
      })
    }
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

```{r}
#| eval: false
Student_name = c(
  "Ayankoya, Monisola Beauty",
  "Barr, Stephanie Marie",
  "Binhuwaimel, Azizah Abdulrahman A",
  "Bonge, Nicole Grace",
  "Cascante  Vallejo,Diana Carolina",
  "Hughes, Yale",
  "Lan, Xi",
  "Negrete  Becerra,Luis Arturo",
  "Shakeri, Sepideh",
  "West, Abigail Joan"
)
Student_ID = 
c(
  "011021830",
  "002796491",
  "010686196",
  "010734654",
  "010827156",
  "011088780",
  "010848887",
  "010866994",
  "011015879",
  "010953825"
)

# Example data: Student IDs and their corresponding grades
grades_data <- data.frame(
  Student_ID = Student_ID,
  Name = Student_name,
  Bonus = rep("2pts", 10),
  HW1_Grade = rep("10/10", 10),
  Total = rep("12", 10)
)
write.csv(grades_data, "homework_scores.csv")
```

```{ojs}
// Import necessary modules
import { Table, Inputs } from "@observablehq/inputs";

// Load the CSV data and ensure Student_ID is a string with leading zeros
data = FileAttachment("homework_scores.csv")
  .csv({ typed: true })
  .then(rows =>
    rows.map(row => ({
      ...row,
      Student_ID: String(row.Student_ID).padStart(9, '0')
    }))
  );

// Create a flexbox container to align input and custom button in the same row
viewof inputContainer = html`<div style="
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
"></div>`;

// Create the input box
viewof studentID = Inputs.text({
  placeholder: "Enter Student ID (e.g., 012345667)"
});

// Create a custom HTML button (not using Inputs.button)
viewof confirmButton = Inputs.button("Confirm");

// Append the input box and custom button to the flexbox row
inputContainer.append(viewof studentID, viewof confirmButton);

// Filter the data based on the entered student ID
filteredData = {
  if (confirmButton) {
    return data.filter(d => d.Student_ID === studentID);
  }
  return [];
};

// Display the filtered data in a table with custom styling
Table(filteredData, {
  columns: ["Student_ID", "Name", "Bonus", "HW1_Grade", "Total"]
});


```
