---
title: "Lecture 08: Multivariate Analysis"
subtitle: "Model Setup and Assumptions"
author: "Jihong Zhang*, Ph.D"
institute: | 
  Educational Statistics and Research Methods (ESRM) Program*
  
  University of Arkansas
date: "2024-10-09"
date-modified: "2024-10-11"
sidebar: false
execute: 
  echo: true
  warning: false
output-location: column
code-annotations: below
format: 
  uark-revealjs:
    scrollable: true
    chalkboard: true
    embed-resources: false
    code-fold: false
    number-sections: false
    footer: "ESRM 64503 - Lecture 08: Multivariate Analysis"
    slide-number: c/t
    tbl-colwidths: auto
    output-file: slides-index.html
  html: 
    page-layout: full
    toc: true
    toc-depth: 2
    toc-expand: true
    lightbox: true
    code-fold: false
    fig-align: center
filters:
  - quarto
  - line-highlight
---

## Today's Class

-   Multivariate linear models: an introduction
-   How to form multivariate models in `lavaan`
-   What parameters mean
-   How they relate to the multivariate normal distribution

# Multivariate Models: An Introduction

## Multivariate Linear Models

-   The next set of lectures are provided to give an overview of multivariate linear models
    -   Models for **more than one** dependent/outcome variables
-   Our focus will be on models where the DV is plausibly continuous
    -   so we’ll use error terms that are multivariate normally distributed
    -   Not a necessity – **generalized multivariate models** are possible

## Classical vs. Contemporary Methods

-   In "classical" multivariate textbooks and classes multivariate linear models fall under the names of Multivariate ANOVA (MANOVA) and Multivariate Regression

-   These methods rely upon least squares estimation which:

    1.  Inadequate with missing data
    2.  Offers very limited methods of setting covariance matrix structures
    3.  Does not allow for different sets predictor variables for each outcome
    4.  Does not give much information about model fit
    5.  Does not provide adequate model comparison procedures

-   The classical methods have been subsumed into the modern (likelihood or Bayes-based) multivariate methods

    -   Subsume: include or absorb (something) in something else
    -   Meaning: modern methods do what classical methods do (and more)

## Contemporary Methods for Estimating Multivariate Linear Models

-   We will discuss three large classes of multivariate linear modeling methods:

    -   Path analysis models (typically through structural equation modeling and path analysis software)
    -   Linear mixed models (typically through linear models software)
    -   Psychological network models (typically through psychological network software)
    -   Bayesian networks (frequently not mentioned in social sciences but subsume all we are doing)

-   The theory behind each is identical – the main difference is in software

    -   Some software does a lot (`Mplus` software is likely the most complete), but none (as of 2024) do it all

-   We will start with path analysis (via the `lavaan` package) as the modeling method is more direct but then move to linear mixed models software (via the `nlme` and `lme4` packages)

-   Bayesian networks will be discussed in the Bayes section of the course and will use entirely different software

## The "Curse" of Dimensionality: Shared Across Models

-   Having lots of parameters creates a number of problems

    -   Estimation issues for small sample sizes
    -   Power to detect effects
    -   Model fit issues for large numbers of outcomes

-   **Curse of dimensionality**: for multivariate normal data, there's a quadratic increase in the number of parameters as the number of outcomes increases linearly

-   To be used as an analysis model, however, a covariance structure must “fit” as well as the saturated/unstructured covariance matrix

## Biggest Difference From Univariate Models: Model Fit

1.  In univariate linear models the "model for the variance" wasn’t much of a model - There was one variance term possible and one term estimated
    -   A saturated model - all variances/covariances are freely estimated without any constrains - Model fit was always perfect
2.  In multivariate linear models, because of the number of variances/covariances, oftentimes models are not saturated for the variances
    -   Therefore, model fit becomes an issue
3.  Any non-saturated model for the variances must be shown to fit the data before being used for interpretation
    -   "fit the data" has differing standards depending on software type used

## Today's Example Data

-   Data are simulated based on the results reported in:

-   Sample of 350 undergraduates (229 women, 121 men)

    -   In simulation, 10% of variables were missing (using missing completely at random mechanism)

-   Dictionary:

    1.  Prior Experience at High School Level (HSL)
    2.  Prior Experience at College Level (CC)
    3.  Perceived Usefulness of Mathematics (USE)
    4.  Math Self-Concept (MSC)
    5.  Math Anxiety (MAS)
    6.  Math Self-Efficacy (MSE)
    7.  Math Performance (PERF)
    8.  Female (sex variable: 0 = male; 1 = female)

```{r}
#| results: hold
library(ESRM64503)
library(kableExtra)
library(tidyverse)
library(DescTools)
head(dataMath)
dim(dataMath)
```

```{r}
Desc(dataMath[,2:8], plotit = FALSE, conf.level = FALSE)
```

## Using MVN Likelihoods in `lavaan`

> [The lavaan package](https://www.lavaan.ugent.be/) is developed by Dr. [Yves Rosseel](https://research.ugent.be/web/person/yves-rosseel-0/en) to provide useRs, researchers and teachers a free open-source, but commercial-quality package for latent variable modeling. You can use lavaan to estimate a large variety of multivariate statistical models, including **path analysis**, **confirmatory factor analysis**, **structural equation modeling** and **growth curve models**.

-   `lavaan`’s default model is a linear (mixed) model that uses ML with the multivariate normal distribution

-   ML is sometimes called a full information method (FIML)

    -   Full information is the term used when each observation gets used in a likelihood function
    -   The contrast is limited information (not all observations used; typically summary statistics are used)

```{r}
#| eval: false
#| echo: true
install.packages('lavaan')
library(lavaan)
```

```{r}
#| echo: false
library(lavaan)
```

## Revisiting Univariate Linear Regression

-   We will begin our discussion by starting with perhaps the simplest model we will see: a univariate empty model
    -   We will use the PERF variable from our example data: Performance on a mathematics assessment
-   The empty model for PERF is:
    -   $e_{i, PERF} \sim N(0, \sigma^2_{e,PERF})$
    -   Two parameters are estimated: [$\beta_{0,PERF}$ and $\sigma^2_{e,PERF}$]{.mohu}

$$
\text{PERF}_i = \beta_{0,\color{tomato}{PERF}} + e_{i, \color{tomato}{PERF}}
$$

-   Here, the additional subscript is added to denote these terms are part of the model for the PERF variable
    -   We will need these when we get to multivariate models and path analysis

## `lavaan` Syntax: General

-   Estimating a multivariate model using `lavaan` contains three steps"
    1.  Build a string object including syntax for models (e.g., `model01.syntax`)
    2.  Estimate the model with observed data and save it to a *fit* object(e.g., `model01.fit <- cfa(mode01.syntax, data)`)
    3.  Extract the results from the *fit* object
-   The `lavaan` package works by taking the typical R model syntax (as from `lm()`) and putting it into a quoted character variable
    -   `lavaan` model syntax also includes other commands used to access other parts of the model (really, parts of the MVN distribution)
-   Here:
    -   `~~` indicate variance or covariance between variables on either side (`perf ~~ perf`) estimates variance
    -   `~1` indicate intercept for one variable (`perf~1`)

```{r}
#| results: hold
#| output-location: default
## Syntax for model01
model01.syntax <- " #<1>
## Variances:
perf ~~ perf

## Means:
perf ~ 1
"
## Estimation for model01
model01.fit <- cfa(model01.syntax, data=dataMath, mimic="MPLUS", fixed.x = TRUE, estimator = "MLR") #<2>

## Print output
summary(model01.fit)
```

1.  model syntax is a string object containing our model specification
2.  We use the `cfa()` function to run the model based on the syntax

## Model Parameter Estimates and Assumptions

```{r filename = "Summary of lavaan's cfa()"}
#| eval: false
Intercepts:
                   Estimate  Std.Err  z-value  P(>|z|)
    perf             13.966    0.174   80.397    0.000
Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
    perf              8.751    0.756   11.581    0.000
```

```{r filename = "Summary of lm()"}
summary(lm(perf ~ 1, data = dataMath))
```

-   Parameter Estimates:
    -   $\beta_{0,PERF} = 13.966$
    -   $\sigma^2_{e,PERF} = 8.751$
-   Using the model estimates, we known that:

$$
\text{PERF}_i \sim N(13.966, 8.751)
$$

# Multivariate Empty Models

## Adding One More Variable: Multivariate Regression

-   We already know how to use `lavaan` to estimate univariate model, let's move on to model two variables as outcomes

    -   **Mathematics performance (perf)**
    -   **Perceived Usefulness of Mathematics (use)**

-   Assumption: We will assume these to be continuous variables (conditionally MVN)

-   Initially, we will only look at an empty model with these two variables:

    -   Empty models are baseline models
    -   We will use these to show how such models look based on the characteristics of the multivariate normal distribution
    -   We will also show the bigger picture when modeling multivariate data: how we must be sure to model the covariance matrix correctly

## Multivariate Empty Model: The Notation

-   The multivariate model for `perf` and `use` is given by two regression models, which are estimated **simultaneously**:

$$
\text{PERF}_i = \beta_{0,\text{PERF}}+e_{i,\text{PERF}}
$$

$$
\text{USE}_i = \beta_{0,\text{USE}}+e_{i,\text{USE}}
$$

-   As there are two variables, the error terms have a joint distribution that will be multivariate normal

$$
\begin{bmatrix}e_{i,\text{PERF}}\\e_{i,\text{USE}}\end{bmatrix} \sim \mathbf{N}_2 (\mathbf{0}=\begin{bmatrix}0\\0\end{bmatrix}, \mathbf{R}=\begin{bmatrix}\sigma^2_{e,\text{PERF}} & \sigma_{e,\text{PERF},\text{USE}}\\ \sigma_{e,\text{PERF},\text{USE}}&\sigma^2_{e,\text{USE}}\end{bmatrix})
$$

-   Each error term (diagonal elements in $\mathbf{R}$) has its own variance but now there is a covariance between error terms
    -   We will soon that the overall $\mathbf{R}$ matrix structure can be modified

## Data Model

-   Before showing the syntax and the results, we must first describe how the multivariate empty model implies how our data should look

-   Multivariate model with matrices: $$
    \begin{bmatrix}\text{PERF}_i\\\text{USE}_i\end{bmatrix} =\begin{bmatrix}1&0\\0&1\end{bmatrix}\begin{bmatrix}\beta_{0,\text{PERF}}\\\beta_{0,\text{USE}}\end{bmatrix} + \begin{bmatrix}e_{i,\text{PERF}}\\e_{i,\text{USE}}\end{bmatrix}
    $$

$$
\mathbf{Y_i = X_iB + e_i}
$$

-   Using expected values and linear combination rules, we can show that:

$$
\begin{bmatrix}\text{PERF}_i\\\text{USE}_i\end{bmatrix} \sim \mathbf{N}_2 (\boldsymbol{\mu}_i=\begin{bmatrix}\beta_{0,\text{PERF}}\\\beta_{0,\text{USE}}\end{bmatrix}, \mathbf{V}_i =\mathbf{R}=\begin{bmatrix}\sigma^2_{e,\text{PERF}} & \sigma_{e,\text{PERF},\text{USE}}\\ \sigma_{e,\text{PERF},\text{USE}}&\sigma^2_{e,\text{USE}}\end{bmatrix})
$$

$$
\mathbf{Y}_i \sim N_2(\mathbf{X}_i\mathbf{B},\mathbf{V}_i)
$$

## `lavaan` Syntax: Multivariate Regression Model

Number of parameters is 5, including two means and three variance and covaraince components.

```{r}
model02.syntax = "
# Variances:
perf ~~ perf #<1>
use ~~ use   #<2>

# Covariance:
perf ~~ use   #<3>

# Means:
perf ~ 1    #<4>
use ~ 1     #<5>
"
```

1.  $\sigma^2_{e, \text{PERF}}$
2.  $\sigma^2_{e,\text{USE}}$
3.  $\sigma^2_{e, \text{PERF}, \text{USE}}$
4.  $\beta_{0, \text{PERF}}$
5.  $\beta_{0, \text{USE}}$

-   This covariance matrix is said to be **saturated**: All parameters are estimated - It is also called an unstructured covariance matrix

-   No other structure for the covariance matrix can fit better (only as well as)

## Multivariate Regression Model Results

### Output of `lavaan`

```{r}
#| output-location: default
## Estimation for model01
model02.fit <- cfa(model02.syntax, data=dataMath, mimic="MPLUS", fixed.x = TRUE, estimator = "MLR") 

## Print output
summary(model02.fit)
```

-   Question: why is the sample size different from Model 1?

```{r}
table(is.na(dataMath$perf) & is.na(dataMath$use))
```

### Correlation Between PERF and USE

```{r}
#| output-location: default
# Covaraince Estimates
parameterestimates(model02.fit)[1:3,] |> show_table()

# Standardized Parameters
standardizedsolution(model02.fit)[1:3,] |> show_table()
```

```{r}
D = matrix(c(sqrt(8.742), 0, 0,  sqrt(249.245)), nrow = 2)
S = matrix(c(8.742, 6.847, 6.847,  249.245), nrow = 2)
solve(D) %*% S %*% solve(D)
```

## Comparing Model with Data

```{r}
library(mvtnorm)
x = expand.grid(
  perf = seq(0, 25, .1),
  use = seq(0, 120, .1)
)
sim_dat <- cbind(
  x,
  density = dmvnorm(x, mean = c(13.959, 52.440), sigma = S)
)

  
mod2_density <- ggplot() +
  geom_contour_filled(aes(x = perf, y = use, z = density), data = sim_dat) +
  geom_point(aes(x = perf, y = use), data = dataMath, colour = "white", alpha = .5) +
  labs( x= "PERF", y="USE") +
  theme_classic() +
  theme(text = element_text(size = 20)) 
mod2_density
```

-   We can use our estimated parameters to simulation the **model-implied density plot** for `perf` and `use`, which can be compared to the observed data of `perf` and `use`

## Interactive 3D Plot for Estimated MVN

$$
\begin{bmatrix}\text{PERF}_i\\\text{USE}_i\end{bmatrix} \sim \mathbf{N}_2 (\boldsymbol{\mu}_i=\begin{bmatrix}13.959\\52.440\end{bmatrix}, \mathbf{V}_i =\mathbf{R}=\begin{bmatrix}8.742 & 6.847\\ 6.847 & 249.245 \end{bmatrix})
$$

```{r}
#| fig-cap: "Multivariate Regression Model Estimated Density"
#| code-fold: true
#| output-location: default
library(plotly)
density_surface <- sim_dat |> 
  pivot_wider(names_from = use, values_from = density) |> 
  select(-perf) |> 
  as.matrix()
plot_ly(z = density_surface, x = seq(0, 120, .1), y = seq(0, 25, .1), colors = "PuRd", color = "green",
        width = 1600, height = 800) |> add_surface() 
```

## A Different Model for the data

-   To demonstrate how models may vary in terms of model fit (and to set up a discussion of model fit and model comparisons) we will estimate a model where we set the covariance between PERF and USE to zero
    -   Zero covariance implies zero correlation – which is unlikely to be true given our previous analysis
-   You likely would not use this model in a real data analysis
    -   If anything, you may start with a zero covariance and then estimate one
-   But, this will help to introduce come concepts needed to assess the quality of the multivariate model

## `lavaan` Syntax: Zero Covariance

```{r}
model03.syntax = "
# Variances:
perf ~~ perf 
use ~~ use   

# Covariance:
perf ~~ 0*use   #<1>

# Means:
perf ~ 1  
use ~ 1   
"
```

1.  We constrain the residual covaraince between `perf` and `use` $\sigma_{e, \text{PERF}, \text{USE}} = 0$ using `0*`

```{r}
#| output-location: default
## Estimation for model01
model03.fit <- cfa(model03.syntax, data=dataMath, mimic="MPLUS", fixed.x = TRUE, estimator = "MLR") 

## Print output
parameterestimates(model03.fit) |> show_table()
```

## Model Assumption

-   The zero covariance now leads to the following assumptions about the data:

    $$
    \begin{bmatrix}\text{PERF}_i\\\text{USE}_i\end{bmatrix} \sim \mathbf{N}_2 (\boldsymbol{\mu}_i=\begin{bmatrix}13.959\\52.440\end{bmatrix}, \mathbf{V}_i =\mathbf{R}=\begin{bmatrix} 8.750 & \color{tomato}{0} \\ \color{tomato}{0} & 249.200 \end{bmatrix})
    $$

-   Because these are MVN, we are assuming PERF is independent from USE (they have zero correlation/covariance)

-   **Question**: Our new model (zero covariance) is better or worse fitting to data compared to our previous model (freely estimated covariance)?

    -   Answer: [I think our new model is worse (we don't know this "worse" is significant or not) because of fewer parameters and stronger assumptions.]{.mohu}

## Model Results

```{r}
#| output-location: default
parameterestimates(model02.fit) |> show_table()
parameterestimates(model03.fit) |> show_table()
```

## Examining Model/Data Fit

```{r}
#| code-fold: true
#| results: hold
#| output-location: default
sim_dat_2 <- cbind(
  x,
  density = dmvnorm(x, mean = c(13.959, 52.440), 
                    sigma = matrix(c(8.750535, 0, 0, 249.200921), nrow = 2))
)

  
mod3_density <- ggplot() +
  geom_contour_filled(aes(x = perf, y = use, z = density), data = sim_dat_2) +
  geom_point(aes(x = perf, y = use), data = dataMath, colour = "white", alpha = .5) +
  labs( x= "PERF", y="USE", title = "Model 3's Density") +
  theme_classic() +
  theme(text = element_text(size = 20)) 

mod2_density
mod3_density
```

## Wrapping Up

1.  This lecture was an introduction to the estimation of multivariate linear models for multivariate outcomes the using path analysis/SEM package `lavaan`

2.  We saw that the model for continuous data uses the multivariate normal distribution in its likelihood function

### Next Class

1.  Does each model fit the data well (absolute model fit)?
2.  If not, how can we improve model fit?
3.  Which model fits better (relative model fit)?
4.  Answers are given in the following lectures...
