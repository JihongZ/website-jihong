---
title: "Lecture 09: Visualizing Numerical Data"
subtitle: "`ggplot2` package"
date: "2025-02-05"
execute: 
  eval: true
  echo: true
  warning: false
  message: false
output-location: default
code-annotations: below
format: 
  html:
    code-tools: true
    code-line-numbers: false
    code-fold: false
    number-offset: 0
    fig-align: center
  uark-revealjs:
    scrollable: true
    chalkboard: true
    embed-resources: false
    code-fold: false
    number-sections: false
    footer: "ESRM 64503"
    slide-number: c/t
    tbl-colwidths: auto
    output-file: slides-index.html
    out.width: "100%"
---

```{r packages, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(openintro)
loans_full_schema <- loans_full_schema %>%
  mutate(grade = factor(grade, ordered = TRUE))
```

# Terminology

## Number of variables involved

-   Univariate data analysis - distribution of single variable
-   Bivariate data analysis - relationship between two variables
-   Multivariate data analysis - relationship between many variables at once, usually focusing on the relationship between two while conditioning for others

## Types of variables

-   **Numerical variables** can be classified as **continuous** or **discrete** based on whether or not the variable can take on an infinite number of values or only non-negative whole numbers, respectively.
-   If the variable is **categorical**, we can determine if it is **ordinal** based on whether or not the levels have a natural ordering.

## Data: Lending Club

::::: columns
::: column
-   Thousands of loans made through the Lending Club, which is a platform that allows individuals to lend to other individuals

-   Not all loans are created equal -- ease of getting a loan depends on (apparent) ability to pay back the loan

-   Data includes loans *made*, these are not loan applications
:::

::: column
```{r echo=FALSE, out.width = "100%"}
knitr::include_graphics("images/lending-club.png")
```
:::
:::::

## Take a peek at data

```{r output.lines=18}
library(openintro)
glimpse(loans_full_schema)
```

## Selected variables

```{r}
loans <- loans_full_schema %>%
  select(loan_amount, interest_rate, term, grade, 
         state, annual_income, homeownership, debt_to_income)
glimpse(loans)
```

## Selected variables

| variable | type | description |
|------------------|------------------|-------------------------------------|
| `loan_amount` | numerical, continuous | Amount of the loan received, in US dollars |
| `interest_rate` | numerical, continuous | Interest rate on the loan, in an annual percentage |
| `term` | numerical, discrete | The length of the loan, which is always set as a whole number of months |
| `grade` | categorical, ordinal | Loan grade, which takes a values A through G and represents the quality of the loan and its likelihood of being repaid |
| `state` | categorical, not ordinal | US state where the borrower resides |
| `annual_income` | numerical, continuous | Borrowerâ€™s annual income, including any second income, in US dollars |
| `homeownership` | categorical, not ordinal | Indicates whether the person owns, owns but has a mortgage, or rents |
| `debt_to_income` | numerical, continuous | Debt-to-income ratio |

# Visualizing Continous data

## Describing shapes of numerical distributions

-   shape:
    -   skewness: right-skewed, left-skewed, symmetric (skew is to the side of the longer tail)
    -   modality: unimodal, bimodal, multimodal, uniform
-   center: mean (`mean`), median (`median`), mode (not always useful)
-   spread: range (`range`), standard deviation (`sd`), inter-quartile range (`IQR`)
-   unusual observations

# Histogram

## Histogram

```{r}
summary(loans$loan_amount)
```

```{r message = TRUE, out.width = "50%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_histogram()
```

## Histograms and binwidth

::: panel-tabset
## binwidth = 1000

```{r out.width = "50%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_histogram(binwidth = 1000)
```

## binwidth = 5000

```{r out.width = "50%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_histogram(binwidth = 5000)
```

## binwidth = 20000

```{r out.width = "50%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_histogram(binwidth = 20000)
```
:::

## Customizing labels of histograms

::: panel-tabset
## Plot

```{r ref.label = "hist-custom", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r hist-custom, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount)) +
  geom_histogram(binwidth = 5000) +
  labs( #<1>
    x = "Loan amount ($)", 
    y = "Frequency", 
    title = "Amounts of Lending Club loans" 
  ) 
```

1.  `labs()` can modify axis, legend, and plot labels
:::

## Fill with a categorical variable

::: panel-tabset
## Plot

```{r ref.label = "hist-fill", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r hist-fill, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount, 
                  fill = homeownership)) + #<1>
  geom_histogram(binwidth = 5000,
                 alpha = 0.5) + #<2>
  labs(
    x = "Loan amount ($)",
    y = "Frequency",
    title = "Amounts of Lending Club loans"
  )
```

1.  Add `homeownership` to fill with certain category
2.  Add `alpha=` argument to set up transparency for the figure
:::

## Facet with a categorical variable

::: panel-tabset
## Plot

```{r ref.label = "hist-facet", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r hist-facet, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + 
  geom_histogram(binwidth = 5000) +
  labs(
    x = "Loan amount ($)",
    y = "Frequency",
    title = "Amounts of Lending Club loans"
  ) +
  facet_wrap(~ homeownership, nrow = 3) #<<
```
:::

## Color of bar borders

::: panel-tabset
## Plot

```{r ref.label = "hist-color", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r hist-color, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + 
  geom_histogram(binwidth = 5000, color = "white") +
  labs(
    x = "Loan amount ($)",
    y = "Frequency",
    title = "Amounts of Lending Club loans"
  ) +
  facet_wrap(~ homeownership, nrow = 3) #<<
```
:::

## Position of Histogram Bars

::: panel-tabset
## Plot

```{r ref.label = "hist-dodge", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r hist-dodge, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount, fill = homeownership)) + 
  geom_histogram(binwidth = 5000, position = position_dodge()) +
  labs(
    x = "Loan amount ($)",
    y = "Frequency",
    title = "Amounts of Lending Club loans"
  ) 
```
:::

# Density plot

## Density plot

```{r}
ggplot(loans, aes(x = loan_amount)) +
  geom_density()
```

## Density plots and adjusting bandwidth

::: panel-tabset
## adjust = 0.5

```{r out.width = "100%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_density(adjust = 0.5)
```

## adjust = 1

```{r out.width = "100%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_density(adjust = 1) # default bandwidth
```

## adjust = 2

```{r out.width = "100%"}
ggplot(loans, aes(x = loan_amount)) +
  geom_density(adjust = 2)
```
:::

## Customizing density plots

::: panel-tabset
## Plot

```{r ref.label = "density-custom", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r density-custom, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount)) +
  geom_density(adjust = 2) +
  labs( #<<
    x = "Loan amount ($)", #<<
    y = "Density", #<<
    title = "Amounts of Lending Club loans" #<<
  ) #<<
```
:::

## Adding a categorical variable

::: panel-tabset
## Plot

```{r ref.label = "density-cat", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r density-cat, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = loan_amount, 
                  fill = homeownership)) + #<<
  geom_density(adjust = 2, 
               alpha = 0.5) + #<<
  labs(
    x = "Loan amount ($)",
    y = "Density",
    title = "Amounts of Lending Club loans", 
    fill = "Homeownership" #<<
  )
```
:::

# Box plot

## Box plot

-   Boxplot visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually.
    -   The lower and upper **hinges** correspond to the first and third quartiles (the 25th and 75th percentiles).
    -   The **whiskers** extend from the hinge to the smallest and largest value no further than 1.5 \* IQR from the hinge (where IQR is the inter-quartile range, or distance between the first and third quartiles).

```{r}
ggplot(loans, aes(x = interest_rate)) +
  geom_boxplot()
```

## Box plot and outliers

```{r}
ggplot(loans, aes(x = annual_income)) +
  geom_boxplot()
```

## Customizing box plots

::: panel-tabset
## Plot

```{r ref.label = "box-custom", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r box-custom, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = interest_rate)) +
  geom_boxplot() +
  labs(
    x = "Interest rate (%)",
    y = NULL,
    title = "Interest rates of Lending Club loans"
  ) +
  theme( #<<
    axis.ticks.y = element_blank(), #<<
    axis.text.y = element_blank() #<<
  ) #<<
```
:::

## Adding a categorical variable

::: panel-tabset
## Plot

```{r ref.label = "box-cat", echo = FALSE, warning = FALSE, out.width = "100%"}
```

## Code

```{r box-cat, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(x = interest_rate,
                  y = grade)) + #<<
  geom_boxplot() +
  labs(
    x = "Interest rate (%)",
    y = "Grade",
    title = "Interest rates of Lending Club loans",
    subtitle = "by grade of loan" #<<
  )
```
:::

# Relationships numerical variables

## Scatterplot

```{r warning = FALSE}
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
  geom_point()
```

## Hex plot

```{r warning = FALSE}
ggplot(loans, aes(x = debt_to_income, y = interest_rate)) +
  geom_hex()
```

## Hex plot

```{r warning = FALSE}
ggplot(loans %>% filter(debt_to_income < 100), 
       aes(x = debt_to_income, y = interest_rate)) +
  geom_hex()
```

# Visualize Categorical Variable

## Bar plot

```{r}
ggplot(loans, aes(x = homeownership)) +
  geom_bar()
```

## Segmented bar plot

```{r}
ggplot(loans, aes(x = homeownership, 
                  fill = grade)) + #<<
  geom_bar()
```

## Segmented bar plot

```{r}
ggplot(loans, aes(x = homeownership, fill = grade)) +
  geom_bar(position = "fill") #<<
```

------------------------------------------------------------------------

::: callout-note
## Question

Which bar plot is a more useful representation for visualizing the relationship between homeownership and grade?
:::

::::: columns
::: column
```{r echo=FALSE, out.width = "100%"}
ggplot(loans, aes(x = homeownership, fill = grade)) +
  geom_bar()
```
:::

::: column
```{r echo=FALSE, out.width = "100%"}
ggplot(loans, aes(x = homeownership, fill = grade)) +
  geom_bar(position = "fill")
```
:::
:::::

## Customizing bar plots

::: panel-tabset
## Plot

```{r ref.label = "bar-custom", echo = FALSE, warning = FALSE, out.width="100%"}
```

## Code

```{r bar-custom, fig.show = "hide", warning = FALSE}
ggplot(loans, aes(y = homeownership, #<<
                  fill = grade)) +
  geom_bar(position = "fill") +
  labs( #<<
    x = "Proportion", #<<
    y = "Homeownership", #<<
    fill = "Grade", #<<
    title = "Grades of Lending Club loans", #<<
    subtitle = "and homeownership of lendee" #<<
  ) #<<
```
:::

# Relationships between numerical and categorical variables

## Already talked about...

-   Colouring and faceting histograms and density plots
-   Side-by-side box plots

## Violin plots

```{r warning = FALSE}
ggplot(loans, aes(x = homeownership, y = loan_amount)) +
  geom_violin()
```

## Ridge plots

```{r warning = FALSE}
library(ggridges)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) + 
  geom_density_ridges(alpha = 0.5)
```

# Designing effective visualizations

## Keep it simple

::::: columns
::: column
```{r pie-3d, echo = FALSE, out.width="100%"}
knitr::include_graphics("images/pie-3d.jpg")
```
:::

::: column
```{r pie-to-bar, echo = FALSE, out.width="100%"}
d <- tribble(
  ~category, ~value,
  "Cutting tools", 0.03,
  "Buildings and administration", 0.22,
  "Labor", 0.31,
  "Machinery", 0.27,
  "Workplace materials", 0.17
)
ggplot(d, aes(x = fct_reorder(category, value), y = value)) +
  geom_col() +
  theme_minimal() +
  coord_flip() +
  labs(x = "", y = "")
```
:::
:::::

## Use color to draw attention

::::: columns
::: column
```{r echo = FALSE, out.width="100%"}
d %>%
  mutate(category = str_replace(category, " ", "\n")) %>%
  ggplot(aes(x = category, y = value, fill = category)) +
  geom_col() +
  theme_minimal() +
  labs(x = "", y = "") +
  theme(legend.position = "none")
```
:::

::: column
```{r echo = FALSE, out.width="100%"}
ggplot(d, aes(x = fct_reorder(category, value), y = value, fill = category)) +
  geom_col() +
  theme_minimal() +
  coord_flip() +
  labs(x = "", y = "") +
  scale_fill_manual(values = c("red", rep("gray", 4))) +
  theme(legend.position = "none")
```
:::
:::::

## Tell a story

```{r echo = FALSE, out.width = "80%"}
knitr::include_graphics("images/time-series-story.png")
```

> Credit: Angela Zoss and Eric Monson, Duke DVS

# Principles for effective visualizations

## Principles for effective visualizations

-   Order matters
-   Put long categories on the y-axis
-   Keep scales consistent
-   Select meaningful colors
-   Use meaningful and nonredundant labels

## Data

In September 2019, YouGov survey asked 1,639 GB adults the following question:

::::: columns
::: column
> In hindsight, do you think Britain was right/wrong to vote to leave EU?
>
> -   Right to leave\
> -   Wrong to leave\
> -   Don't know
:::

::: column
```{r echo = FALSE}
brexit <- tibble(
  opinion = c(
    rep("Right", 664), rep("Wrong", 787), rep("Don't know", 188)
  ),
  region = c(
    rep("london", 63), rep("rest_of_south", 241), rep("midlands_wales", 145), rep("north", 176), rep("scot", 39),
    rep("london", 110), rep("rest_of_south", 257), rep("midlands_wales", 152), rep("north", 176), rep("scot", 92),
    rep("london", 24), rep("rest_of_south", 49), rep("midlands_wales", 57), rep("north", 48), rep("scot", 10)
  )
)
```

```{r echo = FALSE, out.width="100%"}
ggplot(brexit, aes(x = opinion)) +
  geom_bar()
```
:::
:::::

Source: [YouGov Survey Results](https://d25d2506sfb94s.cloudfront.net/cumulus_uploads/document/x0msmggx08/YouGov%20-%20Brexit%20and%202019%20election.pdf), retrieved Oct 7, 2019

# Order matters

## Alphabetical order is rarely ideal

::: panel-tabset
## Plot

```{r ref.label="default-opinion", echo = FALSE}
```

## Code

```{r default-opinion, fig.show = "hide"}
ggplot(brexit, aes(x = opinion)) +
  geom_bar()
```
:::

## Order by frequency

::: panel-tabset
## Plot

```{r ref.label="infreq", echo = FALSE}
```

## Code

`fct_infreq`: Reorder factors' levels by frequency

```{r infreq, fig.show = "hide"}
ggplot(brexit, aes(x = fct_infreq(opinion))) + #<<
  geom_bar()
```
:::

## Clean up labels

::: panel-tabset
## Plot

```{r ref.label="labels", echo = FALSE}
```

## Code

```{r labels, fig.show = "hide"}
ggplot(brexit, aes(x = opinion)) +
  geom_bar() +
  labs( #<<
    x = "Opinion", #<<
    y = "Count" #<<
  ) #<<
```
:::

## Alphabetical order is rarely ideal

::: panel-tabset
## Plot

```{r ref.label="region-default", echo = FALSE, out.width="100%"}
```

## Code

```{r region-default, fig.show = "hide"}
ggplot(brexit, aes(x = region)) +
  geom_bar()
```
:::

## Use inherent level order

::: panel-tabset
## Relevel

`fct_relevel`: Reorder factor levels using a custom order

```{r relevel, fig.show = "hide", out.width="100%"}
brexit <- brexit %>%
  mutate(
    region = fct_relevel( #<<
      region,
      "london", "rest_of_south", "midlands_wales", "north", "scot"
    )
  )
```

## Plot

```{r echo=FALSE}
ggplot(brexit, aes(x = region)) +
  geom_bar()
```
:::

## Clean up labels

::: panel-tabset
## Recode

`fct_recode`: Change factor levels by hand

```{r recode, fig.show = "hide", out.width="100%"}
brexit <- brexit %>%
  mutate(
    region = fct_recode( #<<
      region,
      London = "london",
      `Rest of South` = "rest_of_south",
      `Midlands / Wales` = "midlands_wales",
      North = "north",
      Scotland = "scot"
    )
  )
```

## Plot

```{r recode-plot, echo=FALSE}
ggplot(brexit, aes(x = region)) +
  geom_bar()
```
:::

# Put long categories on the y-axis

## Long categories can be hard to read

```{r ref.label="recode-plot", echo = FALSE, out.width="100%"}
```

## Move them to the y-axis

::: panel-tabset
## Plot

```{r ref.label="flip", echo = FALSE, out.width="100%"}
```

## Code

```{r flip, fig.show = "hide"}
ggplot(brexit, aes(y = region)) + #<<
  geom_bar()
```
:::

## And reverse the order of levels

::: panel-tabset
## Plot

```{r ref.label="rev", echo = FALSE, out.width="100%"}
```

## Code

`fct_rev`: Reverse order of factor levels

```{r rev, fig.show = "hide"}
ggplot(brexit, aes(y = fct_rev(region))) + #<<
  geom_bar()
```
:::

## Clean up labels

::: panel-tabset
## Plot

```{r ref.label="labels-again", echo = FALSE, out.width="100%"}
```

\]

## Code

```{r labels-again, fig.show = "hide"}
ggplot(brexit, aes(y = fct_rev(region))) +
  geom_bar() +
  labs( #<<
    x = "Count", #<<
    y = "Region" #<<
  ) #<<
```
:::

# Pick a purpose

## Segmented bar plots can be hard to read

::: panel-tabset
## Plot

```{r ref.label="segment", echo = FALSE, out.width="100%"}
```

## Code

```{r segment, fig.show = "hide"}
ggplot(brexit, aes(y = region, fill = opinion)) + #<<
  geom_bar()
```
:::

## Use facets

::: panel-tabset
## Plot

```{r ref.label="facet", echo = FALSE, fig.asp = 0.45, out.width = "100%"}
```

## Code

```{r facet, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = region)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) #<<
```
:::

## Avoid redundancy?

```{r echo = FALSE, fig.asp = 0.45, out.width = "90%"}
ggplot(brexit, aes(y = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1)
```

## Redundancy can help tell a story

::: panel-tabset
## Plot

```{r ref.label="facet-fill", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r facet-fill, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1)
```
:::

## Be selective with redundancy

::: panel-tabset
## Plot

```{r ref.label="hide-legend", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r hide-legend, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") #<<
```
:::

## Use informative labels

::: panel-tabset
## Plot

```{r ref.label="informative-label", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r informative-label, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?", #<<
    x = NULL, y = NULL
  )
```
:::

## A bit more info

::: panel-tabset
## Plot

```{r ref.label="more-info", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r more-info, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019", #<<
    caption = "Source: https://d25d2506sfb94s.cloudfront.net/cumulus_uploads/document/x0msmggx08/YouGov%20-%20Brexit%20and%202019%20election.pdf", #<<
    x = NULL, y = NULL
  )
```
:::

## Let's do better

::: panel-tabset
## Plot

```{r ref.label="short-link", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r short-link, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1) +
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019",
    caption = "Source: bit.ly/2lCJZVg", #<<
    x = NULL, y = NULL
  )
```
:::

## Fix up facet labels

::: panel-tabset
## Plot

```{r ref.label="label-wrap", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r label-wrap, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region,
    nrow = 1,
    labeller = label_wrap_gen(width = 12) #<<
  ) + 
  guides(fill = "none") +
  labs(
    title = "Was Britain right/wrong to vote to leave EU?",
    subtitle = "YouGov Survey Results, 2-3 September 2019",
    caption = "Source: bit.ly/2lCJZVg",
    x = NULL, y = NULL
  )
```
:::

# Select meaningful colors

## Rainbow colors not always the right choice

```{r ref.label="label-wrap", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Manually choose colors when needed

::: panel-tabset
## Plot

```{r ref.label="red-green", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r red-green, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c( #<<
    "Wrong" = "red", #<<
    "Right" = "green", #<<
    "Don't know" = "gray" #<<
  )) #<<
```
:::

## Choosing better colors

[Source: colorbrewer2.org](https://colorbrewer2.org/)

```{r echo = FALSE, out.width = "60%"}
knitr::include_graphics("images/color-brewer.png")
```

## Use better colors

::: panel-tabset
## Plot

```{r ref.label="color-brewer", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r color-brewer, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c(
    "Wrong" = "#ef8a62", #<<
    "Right" = "#67a9cf", #<<
    "Don't know" = "gray" #<<
  ))
```
:::

## Select theme

::: panel-tabset
## Plot

```{r ref.label="theme", echo = FALSE, fig.asp = 0.45, out.width = "90%"}
```

## Code

```{r theme, fig.show = "hide"}
ggplot(brexit, aes(y = opinion, fill = opinion)) +
  geom_bar() +
  facet_wrap(~region, nrow = 1, labeller = label_wrap_gen(width = 12)) +
  guides(fill = "none") +
  labs(title = "Was Britain right/wrong to vote to leave EU?",
       subtitle = "YouGov Survey Results, 2-3 September 2019",
       caption = "Source: bit.ly/2lCJZVg",
       x = NULL, y = NULL) +
  scale_fill_manual(values = c("Wrong" = "#ef8a62",
                               "Right" = "#67a9cf",
                               "Don't know" = "gray")) +
  theme_minimal() #<<
```
:::

## Resource

1.  [DataScienceBox's GitHub](https://github.com/tidyverse/datascience-box/tree/main/course-materials/_slides/u2-d03-viz-num)
2.  [datasciencebox.org](https://datasciencebox.org/)
3.  [Using ggplot2 in packages](https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html#best-practices-for-common-tasks)
