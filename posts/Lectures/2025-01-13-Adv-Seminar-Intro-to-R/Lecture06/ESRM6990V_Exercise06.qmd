---
title: "Exercise 06: Date and Time"
subtitle: ""
author: "Jihong Zhang*, Ph.D"
institute: | 
  Educational Statistics and Research Methods (ESRM) Program*
  
  University of Arkansas
date: "2025-08-18"
sidebar: false
execute: 
  warning: false
  message: false
  eval: false
  echo: true
format: 
  html: 
    page-layout: full
toc: true
toc-depth: 2
lightbox: true
code-fold: show
---


### **Question 1: Basic Date-Time Functions**
1. Load the `lubridate` package and print the current date and time using R functions.
2. Convert the following character strings into `Date` objects:
   - `"2024-07-01"`
   - `"15/08/2023"` (Use the correct format for parsing.)
3. Convert the following character strings into `POSIXct` date-time objects:
   - `"2023-12-25 18:30:00"`
   - `"07-13-2024 14:45"` (Use the correct format for parsing.)

   
```{r}
#| echo: false
library(lubridate)
ymd("2024-07-01")
dmy("15/08/2023")

ymd_hms("2024-01-15 14:30:45")
mdy_hm("07-13-2024 14:45") # correct
```


### **Question 2: Importing and Parsing Dates**
1. Create a CSV file (or use an inline string) with the following data:
   ```
   date, datetime
   01-15-2024, 2024/01/15 14:20:00
   02-28-2023, 2023-02-28 23:59:59
   ```
   - Read this CSV into R using `read_csv()`.
   - Ensure that the `date` column is parsed as a `Date` and the `datetime` column is parsed as a `POSIXct` object.


   
2. Modify the import function to parse the `date` column correctly, assuming it follows the `"MM-DD-YYYY"` format.

```{r}
#| echo: false

csv_data <- "
  date, datetime
  01-15-2024, 2024/01/15 14:20:00
  02-28-2023, 2023-02-28 23:59:59
"
library(readr)
library(lubridate)

df <- read_csv(csv_data)
df

df2 <- read_csv(csv_data, col_types = cols(date = col_date("%m-%d-%Y")))
df2
```


```{r}
#| echo: false
df3 <- df2 |> mutate(datetime = ymd_hms(datetime))
df3
```

### **Question 3: Extracting Components from Dates**
1. Given the date vector:
   ```{r}
   dates <- as.Date(c("2023-07-15", "2024-01-01", "2025-12-31"))
   ```
   - Extract the **year**, **month**, and **day** components.
   - Extract the **day of the week** in both numeric and abbreviated name formats.
   - Extract the **day of the year**.

```{r}
#| echo: false
dates <- as.Date(c("2023-07-15", "2024-01-01", "2025-12-31"))
year(dates)  
month(dates) 
day(dates)
wday(dates)
yday(dates)
```


### **Question 4: Rounding and Formatting Dates**
1. Given the date-time `"2024-07-12 15:47:23"`, apply:
   - `floor_date()` to round it down to the nearest hour.
   - `ceiling_date()` to round it up to the nearest day.
   - `round_date()` to round it to the nearest 10-minute interval.

```{r}
#| echo: false
library(lubridate)

dt <- ymd_hms("2024-07-12 15:47:23")

# Round down to the nearest hour
floor_dt <- floor_date(dt, unit = "hour")

# Round up to the nearest day
ceiling_dt <- ceiling_date(dt, unit = "day")

# Round to the nearest 10-minute interval
round_dt <- round_date(dt, unit = "10 minutes")

# Print results
floor_dt    # "2024-07-12 15:00:00"
ceiling_dt  # "2024-07-13 00:00:00"
round_dt    # "2024-07-12 15:50:00"
```

2. Convert `"2025-02-15"` into the following formats using `format()`:
   - `"YYYY/MM/DD"`
   - `"Month Day, Year"` (e.g., `"February 15, 2025"`)
   - `"Day-Month-Year"` (e.g., `"15-February-2025"`)

```{r}
#| echo: false
date <- as.Date("2025-02-15")

# Format as "YYYY/MM/DD"
format_1 <- format(date, "%Y/%m/%d") 

# Format as "Month Day, Year"
format_2 <- format(date, "%B %d, %Y") 

# Format as "Day-Month-Year"
format_3 <- format(date, "%d-%B-%Y") 

# Print results
format_1  # "2025/02/15"
format_2  # "February 15, 2025"
format_3  # "15-February-2025"
```


### **Question 5: Working with Time Zones**
1. Retrieve the systemâ€™s current time zone and display all available time zones containing `"America"`.
2. Convert `"2024-08-01 12:00:00"` from `"UTC"` to:
   - `"America/New_York"`
   - `"Europe/London"`
   - `"Asia/Tokyo"`
3. Calculate the time difference (in hours) between `"US/Central"` and `"Asia/Hong_Kong"` on **January 1, 2025**.
    - Hint: use `difftime(units = "hours")` to return time difference between two time

```{r}
#| echo: false
# Get the system's current time zone
current_tz <- Sys.timezone()

# List all available time zones containing "America"
america_tzs <- OlsonNames()[grep("America", OlsonNames())]

# Print results
current_tz     # Example: "America/Chicago" (varies by system)
america_tzs    # Displays all time zones containing "America"
```

```{r}
#| echo: false
library(lubridate)

# Define the UTC datetime
utc_time <- ymd_hms("2024-08-01 12:00:00", tz = "UTC")

# Convert to different time zones
ny_time <- with_tz(utc_time, "America/New_York")
london_time <- with_tz(utc_time, "Europe/London")
tokyo_time <- with_tz(utc_time, "Asia/Tokyo")

# Print results
ny_time      # "2024-08-01 08:00:00 EDT"
london_time  # "2024-08-01 13:00:00 BST"
tokyo_time   # "2024-08-01 21:00:00 JST"
```

```{r}
#| echo: false
# Define the datetime in "US/Central"
central_time <- ymd_hms("2025-01-01 00:00:00", tz = "US/Central")

# Convert to "Asia/Hong_Kong"
hk_time <- ymd_hms("2025-01-01 00:00:00", tz = "Asia/Hong_Kong")

# Compute time difference in hours
time_difference <- as.numeric(difftime(hk_time, central_time, units = "hours"))

# Print result
time_difference  # 14 (hours)
```

