---
title: "Lecture 02: R Objects, Functions, Packages"
subtitle: "Getting Started"
author: "Jihong Zhang*, Ph.D"
institute: | 
  Educational Statistics and Research Methods (ESRM) Program*
  
  University of Arkansas
date: "2024-10-09"
date-modified: "2024-10-11"
sidebar: false
execute: 
  echo: true
  warning: false
  eval: true
output-location: default
code-annotations: below
format: 
  html:
    code-tools: true
    code-line-numbers: false
    code-fold: false
    number-offset: 0
    anchor-sections: true
    number-sections: false
  uark-revealjs:
    scrollable: true
    chalkboard: true
    embed-resources: false
    code-fold: false
    number-sections: false
    footer: "ESRM 64503 - Lecture 02: Object/Function/Package"
    slide-number: c/t
    tbl-colwidths: auto
    output-file: slides-index.html
---

## Today's Class

1.  R objects
    1.  Data types
    2.  Vectors
    3.  Coercion
    4.  Not available (NA)
    5.  Sorting
    6.  Vector arithmetics
    7.  Indexing

## Preparation

-   Install and load `dslabs` package

    ```{r}
    #| eval: false
    install.packages("dslabs")
    library(dslabs)
    ```

```{r}
#| eval: true
#| echo: false
library(dslabs)
```

# R Objects

## Data Types

1.  Variables is one most frequently used R object. Variables can be of different types. Some examples of variables are:
    1.  `character/numeric/logical variable`
    2.  `vector`
    3.  `list (data.frame)`
    4.  `matrix`

```{r}
#| eval: true
library("dslabs")
class("Hello World")
class(3)
class(TRUE)
class(murders)
```

------------------------------------------------------------------------

### Data frames

1.  The most common way of storing a dataset in R is in a *data frame*.

    1.  We will use `murders` data in the `dslabs` package as the example:
        -   state. US state
        -   abb. Abbreviation of US state
        -   region. Geographical US region
        -   population. State population (2010)
        -   total. Number of gun murders in state (2010)

2.  we can think of a data frame as a table with **rows** representing **observations** and the different **variables** reported for each observation defining the **columns**.

    ```{r}
    head(murders)
    ```

3.  Most pre-built datasets are stored in R packages For example, you can access the `murders` by loading the `dslabs` package.

    ```{r}
    class(murders)
    ```

------------------------------------------------------------------------

-   Some **helpful functions** that you can find out more about the structure of data frame.

    ```{r}
    #| eval: true
    #| error: true
    str(murders) # structure of the data frame
    tail(murders)
    murders$population # method 1: access the specific column
    murders[["population"]] # method 2: access the specific column
    murders[["flower"]] # it will say "NULL" when the column doesn't exist
    murders$flower # it will say "NULL" when the column doesn't exist
    names(murders) # variables' name
    ```

------------------------------------------------------------------------

### Vectors

1.  The object `murders$population` is not one number but several. We call these types of objects ***vectors***.

2.  A vector is a combination of **values with the same type\* (except NA)**

3.  A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries.

4.  Some helpful functions that tells you more about the vector

    ```{r}
    #| eval: true
    pop <- murders$population
    length(pop) # how many entries are in the vector
    pop[5] # extract 5th entries from the vector
    class(pop) # one vector has only have one data types (except list)
    class(murders$state)
    ```

------------------------------------------------------------------------

4.  One special vector is **logical** vector. It must be either `TRUE` (1) or `FALSE` (0), which are special values in R

    ```{r}
    #| eval: true
    TRUE == 1
    "TRUE" == 1
    z <- c(2, 3, 7, 8, 10)
    LargerThanFive <- (z > 5)
    LargerThanFive
    z[LargerThanFive]
    class(LargerThanFive)

    EqualToSeven <- (z == 7)
    print(EqualToSeven)
    ```

    Here, `>` is a relational operator. You can use the relational operator like, `<`, `<=`, `>=`, `==` (is equal to), `!=` (is not equal to) to elementwise compare variables in vectors. `identical` function could be use to determine whether two objects are the same.

    ```{r}
    #| eval: true

    identical(z, c(2, 3, 7, 8, 10))
    ```

------------------------------------------------------------------------

### Factors

1.  Factors are another type of vectors that are useful for storing categorical data with a few levels.

2.  For example, in `murders` dataset, we can see there are only 4 regions

```{r}
class(murders$region)
levels(murders$region)
table(murders$region)
```

3.  In the background, R stores these levels as integers and keeps a map to keep track of the labels.

------------------------------------------------------------------------

4.  We can manipulate the order of the factor based on another variables using `reorder` function

```{r}
region <- murders$region
levels(region)
value <- murders$total # the total number of murder
region_ordered <- reorder(region, value, FUN = sum)
levels(region_ordered)

south_as_reference <- factor(region, levels = c("South", "Northeast", "North Central", "West"))
levels(south_as_reference)
```

```{r}
library(dplyr)
murders |> 
    group_by(region) |> 
    summarise(total_value = sum(total))
```

------------------------------------------------------------------------

### List

1.  Data frames are a special case of **lists**. Lists are useful because you can store any combination of different types. You can create a list using the list function like this:

```{r}
record <- list(name = "John Doe",
             student_id = 1234,
             grades = c(95, 82, 91, 97, 93),
             final_grade = "A")
```

2.  This list includes a character, a number, a vector with five numbers, and another character.

```{r}
record
class(record)
```

------------------------------------------------------------------------

3.  The same function to extract columns from data frames can also be used to list:

```{r}
record$student_id
record[["student_id"]]
```

4.  You might also encounter [**lists without variable names**]{.underline}.

```{r}
record2 <- list("John Doe", 1234)
record2
record2[[1]]
```

------------------------------------------------------------------------

### Matrix

1.  **Matrices** are similar to data frames in that they are two-dimensional: they have rows and columns.

2.  However, like numeric, character and logical vectors, entries in matrices have to be all the same type.

3.  Yet **matrices have a major advantage over data frames**: we can perform matrix algebra operations, a powerful type of mathematical technique.

4.  We can define a matrix using the `matrix` function. We need to specify the data in the matrix as well as **the number of rows and columns**.

    ```{r}
    mat <- matrix(data = 1:12, nrow = 4, ncol = 3) # 4 rows and 3 columns
    mat
    ```

------------------------------------------------------------------------

5.  You can access specific entries in a matrix using square brackets (`[`). If you want **the second row, third column**, you use:

    ```{r}
    mat[2, 3]
    ```

    If you want the entire second row, you leave the column spot empty:

    ```{r}
    mat[2, ]
    ```

    Similarly, if you want the entire third column or 2 to 3 columns, you leave the row spot empty:

    ```{r}
    mat[, 3]
    mat[, 2:3]
    ```

## Exercise 02-01

1.  Make sure the US murders dataset is loaded. Use the function `str` to examine the structure of the murders object. Which of the following best describes the variables represented in this data frame?

    -   The 51 states.
    -   The murder rates for all 50 states and DC.
    -   The state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010.
    -   `str` shows no relevant information.

2.  What are the column names used by the data frame for these five variables?

3.  Use the accessor `$` to extract the state abbreviations and assign them to the object `a`. What is the class of this object?

4.  Now use the square brackets to extract the state abbreviations and assign them to the object `b`. Use the identical function to determine if a and b are the same.

5.  We saw that the region column stores a factor. You can corroborate this by typing:

```{r}
#| eval: false
class(murders$region)
```

With one line of code, use the functions levels and length to determine the number of regions defined by this dataset.

6.  The function `table` takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of number of states per region.

## Other features of R objects

### Naming Convention

-   When writing code in R, it’s important to choose variable names that are both **meaningful** and **avoid conflicts with existing functions** or reserved words in the language.

-   Some basic rules in R are that variable names have to **start with a letter**, **can’t contain spaces**, and **should not be variables that are predefined** in R, such as `c`.

```{r}
#| error: true
#| eval: false
# ------------------
this.is.a.numer <- 3
print(this.is.a.numer)
# ------------------
2 <- this.is.a.numer
`2` <- this.is.a.numer
print(2)
print(`2`)
# ------------------
`@_@` <- "funny"
paste0("You look like ", `@_@`)
# ------------------
`@this` <- 3 
print(`@this`)
# ------------------
`I hate R programming` <- "No, you don't"
print(`I hate R programming`)
```

------------------------------------------------------------------------

### Workspace

-   We use `<-` to **assign** values to the variables. We can also assign values using `=` instead of `<-`, but we recommend against using `=` to avoid confusion.

    ```{r}
    coef_a <- 1
    coef_b <- 1
    coef_c <- -1
    ```

-   So we have object in the **global environment** of R session. The workspace **global environment** is the place storing the objects we can use

-   You can see all the variables saved in your workspace by typing:

    ```{r}
    ls()
    ```

------------------------------------------------------------------------

-   In RStudio, the *Environment* tab shows the values:

    ![](https://rafalab.dfci.harvard.edu/dsbook-part-1/R/img/rstudio-environment.png)

------------------------------------------------------------------------

-   We should see `coef_a`, `coef_b`, and `coef_c`.

-   **Missing R object in workspace**: If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type `some_random_object` you will receive the following message: `Error: object 'some_random_object' not found`.

    ```{r}
    #| error: true
    print(some_random_object)
    ```

-   Now since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:

    ```{r}
    (-coef_b + sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)
    (-coef_b - sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)
    ```

::: callout-note
## Operators

-   `-`: is a negative operator which switches the sign of object

-   `+` and `*` and `/` : addition, multiplication, and division

-   `sqrt`: a prebuilt R function of calculating the squared root of the object

-   `^`: exponent operator to calculate the "power" of the "base"; `a^3` : a to the 3rd power
:::

------------------------------------------------------------------------

-   **Help**: You can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the `help` function like this:

    ```{r}
    help("log")
    ?log
    ```

    -   The help page will show you what arguments the function is expecting. For example, `log` needs `x` and `base` to run.

    -   The base of the function `log` defaults to `base = exp(1)` making `log` the natural log by default.

        ![](images/clipboard-1863636552.png)

    -   You can also use `args` to look at the arguments

        ```{r}
        args(log)
        log(x = 8, base = 2)
        ```

    -   If specifying [the arguments’ names]{.underline}, then we can include them in whatever order we want:

        ```{r}
        log(base = 2, x = 8)
        ```

------------------------------------------------------------------------

### Prebuilt objects

-   There are several datasets or values that are included for users to practice and test out functions. For example, you can use $\pi$ in your calculation directly:

    ```{r}
    pi
    ```

-   Or infinity value $\infty$:

    ```{r}
    Inf + 1
    ```

-   You can see all the available datasets by typing:

    ```{r}
    data()
    ```

-   For example, if you type `iris`, it will output the famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width:

    ```{r}
    #| eval: false
    iris
    ?iris
    ```

    You can check the detailed help page of `iris` using `?` as we did for functions.

------------------------------------------------------------------------

### Saving workspace

-   Objects and functions remain in the workspace until you end your session or erase them with the function `rm`.

-   **Autosave**: Your current workspaces also can be saved for later use.

    -   In fact, when you quit R, Rstudio asks you if you want to save your workspace as `.RData`. If you do save it, the next time you start R, the program will restore the workspace.

-   **ManualSave**: We actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved.

    ```{r}
    #| eval: false
    save(file = "project_lecture_2.RData") # Save Workspace as project_lecture_2.RData
    load("project_lecture_2.RData") # Load Workspace
    ```

## Commenting your code

-   If a line of R code starts with the symbol `#`, it is a comment and is not evaluated.

    -   We can use this to write reminders of why we wrote particular code:

    ```{r}
    ## Code to compute solution to quadratic equatio
    ## Define the variables
    coef_a <- 3 
    coef_b <- 2
    coef_c <- -
    ## Now compute the solution
    (-coef_b + sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)
    (-coef_b - sqrt(coef_b^2 - 4*coef_a*coef_c))/(2*coef_a)
    ```

# Vectors

## Creating Vectors

-   We can create vectors using the function c, which stands for concatenate. We use c to concatenate entries in the following way:

```{r}
codes <- c(380, 124, 818)
codes
```

-   We can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.

```{r}
country <- c("italy", "canada", "egypt")
```

-   In R you can also use single quotes:

```{r}
country <- c('italy', 'canada', 'egypt')
```

But be careful not to confuse the single quote `'` with the back quote \`.

-   By now you should know that if you type:

```{r}
#| eval: true
#| error: true
country <- c(italy, canada, egypt)
```

you receive an error because the variables italy, canada, and egypt are not defined. If we do not use the quotes, R looks for variables with those names and returns an error.

## Named vectors

-   Sometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:

```{r}
codes <- c(italy = 380, canada = 124, egypt = 818)
codes
class(codes)
length(codes)
names(codes)
str(codes)
```

## Sequences

-   Another useful function for creating vectors generates sequences:

```{r}
seq(1, 10)
```

::: callout-note
The first argument defines the start, and the second defines the end which is included.
:::

-   The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:

```{r}
seq(1, 10, 2)
```

-   If we want consecutive integers, we can use the following shorthand:

```{r}
1:10
```

## Subsetting

-   We use square brackets to access specific elements of a vector.

```{r}
codes
codes[2]
codes[c(1,3)]
codes[1:2]
codes["canada"]
codes[c("egypt","italy")]
```

## Exercise 02-02

1.  What is the sum of the first 100 positive integers? The formula for the sum of integers 1 through n is $n(n+1)/2$. Define

    $n=100$ and then use R to compute the sum of 1 through 100 using the formula. What is the sum?

2.  Now use the same formula to compute the sum of the integers from 1 through 1000.

3.  Look at the result of typing the following code into R:

    -   Based on the result, what do you think the functions `seq` and `sum` do? You can use help.

```{r}
n <- 1000 
x <- seq(1, n) 
sum(x)
```

4.  In math and programming, we say that we evaluate a function when we replace the argument with a given value. So if we type `sqrt(4)`, we evaluate the `sqrt` function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log (use `log()` function), in base 10, of the square root of 100.

## Coercion

-   When an entry does not match the expected, some of the prebuilt R functions try to guess what was meant before throwing an error.

```{r}
x <- c(1, "canada", 3)
print(x)
class(x)
```

::: callout-note
R *coerced* the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings `"1"` and `"3"`.
:::

------------------------------------------------------------------------

-   R also offers functions to change from one type to another. For example, you can turn numbers into characters with:

```{r}
#| error: true
x <- 1:5
y <- as.character(x)
y
sum(x)
sum(y)
sum(as.numeric(y))
```

## Not availables (NA)

-   A special value called an `NA` for “not available”:

```{r}
#| error: true
x <- c("1", "b", "3")
as.numeric(x)
```

-   You can also calculate the summary statistics of vector including `NA` using `sum` or `mean`

    -   The solution is add `na.rm` argument to remove the `NA` from the vector

```{r}
#| error: true
sum(x)
sum(x, na.rm = TRUE)
```

## Sorting

-   We can sort the numeric vector from largest to lowest using `sort`

```{r}
library(dslabs)
sort(murders$total)
```

-   To identify the index that sorts input vectors, we can use `order`:

```{r}
position_of_rankings = order(murders$total) 
position_of_rankings
murders[position_of_rankings, ]
```

------------------------------------------------------------------------

### Ranking

-   The function `rank` is also related to order and can be useful:

```{r}
x <- c(31, 4, 15, 92, 65)
rank(x)
```

-   `order` and `sort` are functions for sorting the data frame. `rank` is more easy to used for filter certain cases with specific ranking.

```{r}
murders[rank(murders$total) == 1, ]
murders[rank(murders$total) == max(rank(murders$total)), ]
```

## Vector arithmetics

-   You can summarize a numeric vector using some familiar math terms

    -   You can use `min`, `max`, `mean`, `median`, and `sd` R functions to calculate summary statistics of a vector

```{r}
x <- 1:5
mean(x); median(x); min(x); max(x)
```

-   You can get positions of largest number or lowest number or certain number

    ```{r}
    x <- c(31, 4, 15, 92, 65)
    which.max(x)
    which.min(x)
    which(x == 4)
    ```

------------------------------------------------------------------------

### Rescaling a vector

-   Arithmetic operations on vectors occur *element-wise*. For a quick example, suppose we have height in inches:

    -   and want to convert to centimeters. Notice what happens when we multiply `inches` by 2.54:

```{r}
inches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
inches * 2.54
```

-   Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:

```{r}
inches - 69
```

------------------------------------------------------------------------

### Two vectors

-   If we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:

$$
\begin{bmatrix}a\\b\\c\\d\end{bmatrix} + \begin{bmatrix}e\\f\\g\\h\end{bmatrix} = \begin{bmatrix}a+e\\b+f\\c+g\\d+h\end{bmatrix}
$$

-   The same holds for other mathematical operations, such as `-`, `*` and `/`.

    -   This implies that to compute the murder rates we can simply type:

```{r}
murder_rate <- murders$total / murders$population * 100000
```

-   Once we do this, we notice that California is no longer near the top of the list.

```{r}
murders$state[order(murder_rate)]
```

------------------------------------------------------------------------

-   **What if the lengths of two vectors differ?**

```{r}
x <- c(1, 2, 3)
y <- c(10, 20, 30, 40, 50, 60, 70)
x + y
```

::: callout-warning
So if the vectors don’t match in length, it is natural to assume that we should get an error. But we don’t. Notice what happens: one vector `x` **recycles**. Another common source of unnoticed errors in R is the use of ***recycling***.
:::

## Index

-   R provides a powerful and convenient way of indexing vectors. We can, for example, subset a vector based on properties of another vector.

    -   Imagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate.

```{r}
ind <- murder_rate <= 0.71
ind
murders$state[ind]
murders$state[which(murder_rate <= 0.71)]
```

::: callout-note
Note that we get back a logical vector with `TRUE` for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.
:::

------------------------------------------------------------------------

### Logical Operation

-   we can use the `&` to get a vector of logicals that tells us which states satisfy both conditions:

```{r}
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
```

-   We can find out states that meets two conditions: (1) West region (2) nyrder_rate lower than .71

```{r}
west <- murders$region == "West"
safe <- murder_rate <= .71
ind <- safe & west
murders$state[ind]
```

------------------------------------------------------------------------

### Other Indexing: Which one & match & `%in%`

-   The function `which` tells us which entries of a logical vector are TRUE. So we can type:

```{r}
ind <- which(murders$state == "California")
ind
murder_rate[ind]
```

-   Instead of just one state we want to find out the murder rates for several states

```{r}
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
murder_rate[ind]
```

-   When you are uncertain, use `%in%`. Imagine you are not sure if Boston, Dakota, and Washington are states.

```{r}
c("Boston", "Dakota", "Washington") %in% murders$state

murders$state %in% c("Boston", "Dakota", "Washington")
```

## Exercise 02-03

1 We will use the US murders dataset for this exercises. Make sure you load it prior to starting. Use the `$` operator to access the population size data and store it as the object `pop`. Then use the sort function to redefine `pop` so that it is sorted. Finally, use the `[` operator to report the smallest population size.

2 Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use order instead of sort.

3 We can actually perform the same operation as in the previous exercise using the function which.min. Write one line of code that does this.

4 Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable states to be the state names from the murders data frame. Report the name of the state with the smallest population.

5.  You can create a data frame using the data.frame function. Here is a quick example:

```{r}
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", 
          "San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
```

Use the `rank` function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called ranks, then create a data frame with the state name and its rank. Call the data frame `my_df`.

6.  Repeat the previous exercise, but this time order my_df so that the states are ordered from least populous to most populous. Hint: create an object ind that stores the indexes needed to order the population values. Then use the bracket operator \[ to re-order each column in the data frame.

7.  The na_example vector represents a series of counts. You can quickly examine the object using:

```{r}
str(na_example)
```

However, when we compute the average with the function mean, we obtain an NA:

```{r}
mean(na_example)
```

The `is.na` function returns a logical vector that tells us which entries are NA. Assign this logical vector to an object called ind and determine how many NAs does na_example have.

8.  Now compute the average again, but only for the entries that are not NA. Hint: remember the ! operator, which turns FALSE into TRUE and vice versa.
