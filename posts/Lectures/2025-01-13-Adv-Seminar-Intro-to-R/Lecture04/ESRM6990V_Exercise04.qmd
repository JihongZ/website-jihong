---
title: "Exercise 04: Data Manipulation and Function Scope Exercises"
subtitle: ""
author: "Jihong Zhang*, Ph.D"
institute: | 
  Educational Statistics and Research Methods (ESRM) Program*
  
  University of Arkansas
date: "2025-08-18"
sidebar: false
execute: 
  warning: false
  message: false
  eval: false
  echo: true
format: 
  html: 
    page-layout: full
toc: true
toc-depth: 2
lightbox: true
code-fold: show
---


# Data Import Exercises

## Exercise 1: Importing Data from CSV

You are working with the following CSV file containing employee information:

```
Employee ID,Full Name,Department,Salary,Years of Experience
1,John Doe,HR,50000,5
2,Jane Smith,Engineering,N/A,8
3,Michael Johnson,Marketing,55000,6
4,Susan Lee,HR,52000,4
5,David Kim,Engineering,65000,7
6,Amy Brown,Marketing,57000,5
```

1. Use the `read_csv()` function to import this data into R.
  - For illustration, you can use literal data for importing.

```{r}
#| eval: false
#| echo: false
#| message: false 
library(readr)
employee_data <- read_csv(I(
"
Employee ID,Full Name,Department,Salary,Years of Experience
1,John Doe,HR,50000,5
2,Jane Smith,Engineering,N/A,8
3,Michael Johnson,Marketing,55000,6
4,Susan Lee,HR,52000,4
5,David Kim,Engineering,65000,7
6,Amy Brown,Marketing,57000,5
"  
))
employee_data
```  
  
2. Clean the data by replacing any missing salary values with NA.

```{r}
#| eval: false
#| echo: false
#| message: false 
employee_data_NATrans <- read_csv(I(
"
Employee ID,Full Name,Department,Salary,Years of Experience
1,John Doe,HR,50000,5
2,Jane Smith,Engineering,N/A,8
3,Michael Johnson,Marketing,55000,6
4,Susan Lee,HR,52000,4
5,David Kim,Engineering,65000,7
6,Amy Brown,Marketing,57000,5
"  
), na = "N/A")
employee_data_NATrans
```

3. Rename the columns to use snake case (employee_id, full_name, department, salary, years_of_experience).

```{r}
#| eval: false
#| echo: false
#| message: false 
library(dplyr)
employee_data_cleaned <- employee_data_NATrans %>%
  rename(employee_id = `Employee ID`,
         full_name = `Full Name`,
         department = `Department`,
         salary = `Salary`,
         years_of_experience = `Years of Experience`)
employee_data_cleaned
```





## Exercise 2: Importing Data Using Custom Delimiters

You have another dataset where the values are separated by semicolons (;) instead of commas:

```
Employee ID;Full Name;Department;Salary;Years of Experience
1;John Doe;HR;50000;5
2;Jane Smith;Engineering;60000;8
3;Michael Johnson;Marketing;55000;6
4;Susan Lee;HR;52000;4
5;David Kim;Engineering;65000;7
6;Amy Brown;Marketing;57000;5
```

- Use `read_delim()` to import this dataset with the semicolon delimiter (`;`).

```{r}
#| eval: false
#| echo: false
#| message: false
data_txt = "
Employee ID;Full Name;Department;Salary;Years of Experience
1;John Doe;HR;50000;5
2;Jane Smith;Engineering;60000;8
3;Michael Johnson;Marketing;55000;6
4;Susan Lee;HR;52000;4
5;David Kim;Engineering;65000;7
6;Amy Brown;Marketing;57000;5"
employee_data_semicolon <- read_delim(I(data_txt), delim = ";")
employee_data_semicolon
```

# Data Tidying Exercises

## Exercise 3: Pivoting Data Longer

You have a dataset that tracks the number of customers visiting different stores each week:

```{r}
store_visits <- tibble(
  store = c("Store A", "Store B", "Store C"),
  week_1 = c(120, 150, 110),
  week_2 = c(130, 160, 120),
  week_3 = c(140, 170, 130),
  week_4 = c(110, 140, 100),
  week_5 = c(160, 180, 150)
)
```

- Use `pivot_longer()` to convert this dataset into a long format, where each row represents a single observation for a specific week.

```{r}
#| eval: false
#| echo: false
#| message: false
store_visits_long <- store_visits %>%
  pivot_longer(
    cols = starts_with("week_"), 
    names_to = "week", 
    values_to = "visits"
  )
store_visits_long
```

## Exercise 4: Pivoting Data Wider

You have a long-format dataset that tracks the average test scores of students in different subjects over several terms:

```{r}
scores_long <- tibble(
  student = c("Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"),
  term = c("Term 1", "Term 2", "Term 1", "Term 2", "Term 1", "Term 2"),
  subject = c("Math", "Math", "Math", "Math", "Math", "Math"),
  score = c(85, 90, 78, 80, 92, 95)
)
```


- Use `pivot_wider()` to convert this dataset into a wide format, where each term (e.g., "Term 1", "Term 2") is a column, and the scores are the values.

```{r}
#| eval: false
#| echo: false
#| message: false
scores_wide <- scores_long %>%
  pivot_wider(
    names_from = term, 
    values_from = score
  )
scores_wide
```


## Exercise 5: Combining pivot_longer() and pivot_wider()

You have a dataset tracking the number of calls received by a customer service center, split by department and month:

```{r}
calls_wide <- tibble(
  department = c("Sales", "Support", "Billing"),
  january = c(200, 150, 180),
  february = c(210, 160, 190),
  march = c(220, 170, 200)
)
```


- First, use `pivot_longer()` to convert this dataset into a long format, where each row corresponds to a specific department and month.
- Then, use `pivot_wider()` to convert the long dataset back into a wide format, where the months are columns and the values represent the number of calls.

```{r}
#| eval: false
#| echo: false
#| message: false
calls_long <- calls_wide %>%
  pivot_longer(
    cols = c("january", "february", "march"), 
    names_to = "month", 
    values_to = "calls"
  )
calls_wide_again <- calls_long %>%
  pivot_wider(
    names_from = month, 
    values_from = calls
  )
```

