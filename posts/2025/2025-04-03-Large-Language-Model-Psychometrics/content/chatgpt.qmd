---
title: "OpenAI Cookbook for Psychometricians with R and Python"
date: "2025-03-07"
date-modified: "`{r} Sys.Date()`"
draft: false
bibliography: ../references.bib
image: ../images/thumbnail_chatgpt.png
tbl-cap-location: top
citation:
  type: webpage
  issued: 2025-03-07
execute: 
  cache: true  
format: 
  html:
    code-tools: false
    code-line-numbers: false
    code-fold: false
    code-summary: "Click this to see R code"
---

::: callout-important
#### Notice
This is a **draft** document. The content is not final and may change in the future. Please check back later for updates.
:::

```{r setup}
#| echo: false
library(reticulate)
library(jsonlite)
library(tidyverse)
library(kableExtra)
library(glue)
```

![The generated Likert-scale motivation item by GPT-4.1](images/clipboard-1126306144.png){#fig-gpt-item}

## GPT-4.1

OpenAI published [GPT-4.1](https://platform.openai.com/docs/models/gpt-4.1) (Model: `gpt-4.1-2025-04-14`) on April 2025. The price is \$2 / 1M token. As a reference, in my recent project of using LLM to generate survey responses, the number of tokens per prompt ranges from 5K to 10K, which means 100 calls cost around \$2 or \$.02 / calling.

Next, I used one tiny experiment to examine the differences between GPT-4o and GPT-4.1 when answering to the same prompt. The prompt is a general prompt from my recent project.

As shown in @fig-gpt-compr, two items show differences in generated survey responses. It may be because the emotional words such as "ashamed" or "failure".

-   Item6: I feel **ashamed** when I miss an exercise session.

-   Item7: I feel like a **failure** when I haven't exercised in a while.

In contrast to choosing "**Somewhat disagree**" by GPT-4o, GPT-4.1 tend to choose "**Disagree**" in these two items with negatively emotional words. Does GPT-4.1 tend to be more emotionally similar to humans — mentally avoiding negative emotion?

```{r}
#| code-fold: true
#| code-summary: "Create meta prompts without personal information"
instruction <- "
Instructions:

For your output,
  - Only provide the numerical responses.
  - Format your responses as a semicolon-separated list: X;X;X;X;X;X;X, where X represents your selected option for each question, the total number of X depends on number of items.
  - Example: '1;3;2' corresponds to:
  	- 1 (Strongly Agree) for the first question
  	- 3 (Somewhat Agree) for the second question
  	- 2 (Agree) for the third question
  	
The scale for all items is: 1 = Strongly disagree, 2 = Disagree, 3 = Somewhat disagree, 4 = Somewhat agree, 5 = Agree, 6 = Strongly agree.  	
"
prompt <- "
Role & Task:

You are a staff member of club serving underserved communities. The program enrolls at least 50% of youth (ages 9–14) from low-income households (as defined by free/reduced lunch status) and minority backgrounds.

Your task is to construct a persona. Based on this persona, generate numerical responses to survey items in Survey Questions section using a Likert scale in Response Scale section that aligns with your expressed views.

Survey Questions:
Item1: I exercise because other people say I should.
Item2: I take part in exercise because my friends/family/spouse say I should.
Item3: I exercise because others will not be pleased with me if I don't.
Item4: I feel under pressure from my friends/family to exercise.
Item5: I feel guilty when I don't exercise.
Item6: I feel ashamed when I miss an exercise session.
Item7: I feel like a failure when I haven't exercised in a while.
Item8: I value the benefits of exercise.
Item9: It's important to me to exercise regularly.
Item10: I think it is important to make the effort to exercise regularly.
Item11: I get restless if I don't exercise regularly.
Item12: I exercise because it's fun.
Item13: I enjoy my exercise sessions.
Item14: I find exercise a pleasurable activity.
Item15: I get pleasure and satisfaction from participating in exercise
"
```

```{python}
#| code-fold: true
#| code-summary: "Python code to call GPT API"
#| cache: true
import time  # Import the time module
from dis import Instruction
import os
import csv
from openai import OpenAI

# ChatGPT
def get_response_gpt4o(instructions, input, temp):
    # Initialize the OpenAI API client
    client = OpenAI()
    response = client.responses.create(
        model="gpt-4o",
        instructions=instructions,
        input=input,
        temperature=temp,
    )
    return response.output_text

def get_response_gpt41(instructions, input, temp):
    # Initialize the OpenAI API client
    client = OpenAI()
    response = client.responses.create(
        model="gpt-4.1-2025-04-14",
        instructions=instructions,
        input=input,
        temperature=temp,
    )
    return response.output_text
```

```{r}
#| fig-cap: "Generated survey output for GPT-4o and GPT-4.1"
#| label: fig-gpt-compr
#| code-fold: true
#| code-summary: "ggplot2 for generated responses"
#| cache: true
gpt4o_resp <- py$get_response_gpt4o(instructions=instruction, 
                                    input=prompt, temp = 0)
gpt41_resp <- py$get_response_gpt41(instructions=instruction, 
                                    input=prompt, temp = 0)

res <- data.frame(
  gpt4o = unlist(str_split(gpt4o_resp, ";")),
  gpt41 = unlist(str_split(gpt41_resp, ";")),
  Item = factor(1:15)
) |> 
  pivot_longer(starts_with("gpt"), names_to = "Model", values_to = "Response")

ggplot(res) +
  geom_path(aes(x = Item, y = Response, color = Model, group = Model) ) +
  scale_color_manual(values = c("royalblue", "red3"), 
                     labels = c("GPT4.1", "GPT4o")) +
  theme_classic()
```

### Response probability distribution vs. responses value

Instead of asking LLM to generate survey responses directly, we can also instruct LLMs to generate probability distributions of responses for each item. For example, instead of letting LLM output "1;2;2" for three 5-point Liker-scale items, we ask LLMs to output `Xi_k1:pi1,Xi_k2:pi2,Xi_k3:pi3,Xi_k4:pi4,Xi_k5:pi5,Xi_k6:pi6;`.

where:

  - `Xi_kj` denotes response option j (from 1 to 6) for item i
  - `pij` is the probability (between 0 and 1) of selecting that option. 
  - Each line (separated by semicolons) corresponds to a different item
  - The probabilities for each item must sum to 1

```{r second_run}
#| code-fold: true
#| code-summary: "Use response probabities for generated responses"
#| cache: true
instruction2 <- "
Instructions:
Generate probabilistic responses for each survey item using the following format. Each response should represent a probability distribution across six ordinal options of 15 items. The pribabilities of all options of each item should be two or three decimal places. Ensure that for each item, the sum of all six probabilities equals 1.

- Output format:

Provide only numerical responses. Use a semicolon-separated list to indicate the probability of selecting each response option for each item.

- Structure:

For Item i, the response should follow this pattern:

Xi_k1:pi1,Xi_k2:pi2,Xi_k3:pi3,Xi_k4:pi4,Xi_k5:pi5,Xi_k6:pi6;

where:
  - Xi_kj denotes response option j (from 1 to 6) for item i
  - pij is the probability (between 0 and 1) of selecting that option. 
  - Each line (separated by semicolons) corresponds to a different item
  - The probabilities for each item must sum to 1

- Example:
  
  X1_k1:0.50,X1_k2:0.10,X1_k3:0.10,X1_k4:0.10,X1_k5:0.10,X1_k6:0.10;

This indicates that for Item 1, the probabilities of selecting options 1 through 6 are 50%, 10%, 10%, 10%, 10%, and 10%, respectively.

- Scale (applies to all items):
  1 = Strongly Disagree
  2 = Disagree
  3 = Somewhat Disagree
  4 = Somewhat Agree
  5 = Agree
  6 = Strongly Agree
"

gpt4o_resp2 <- py$get_response_gpt4o(instructions=instruction2, 
                                    input=prompt, temp = 0)
gpt41_resp2 <- py$get_response_gpt41(instructions=instruction2, 
                                    input=prompt, temp = 0)
```

You can find that GPT models can understand the prompt very well

```{r}
cat(gpt4o_resp2)
```

Let's do some data cleaning and then visualize the item response probabilities.

```{r second_run_vis}
#| code-fold: true
#| code-summary: "Visualize the response probability for two LLM mdoels"
#| fig-cap: "Item response probabity distribution for GPT-4o and GPT-4.1"
#| label: fig-gpt-prob
#| fig-width: 10
get_df_from_output <- function(raw_gpt_op) {
  all_item_resp_name <- NULL
  all_item_resp_prob <- NULL
  item_resps <- str_split(raw_gpt_op, "\n")[[1]]
  for (i in 1:length(item_resps)) { # i = 1
    each_resp_foritem <- str_split(str_remove(item_resps[i], ";"), ",")[[1]]
    for (r in 1:length(each_resp_foritem)) { # for each response, r = 1
      each_resp <- str_split(each_resp_foritem[r], ":")[[1]]
      each_resp_name <- each_resp[1]
      each_resp_prob <- as.numeric(each_resp[2])
      all_item_resp_name <- c(all_item_resp_name, each_resp_name)
      all_item_resp_prob <- c(all_item_resp_prob, each_resp_prob)
    }
  }
  res <- data.frame(
    item_resps = all_item_resp_name,
    probability = all_item_resp_prob
  ) |> 
    separate(item_resps, into = c("Item", "Option"), sep = "_") |> 
    mutate(Option = factor(str_remove(Option, "k"), levels = 1:6),
           Item = factor(Item, levels = paste0("X", 15:1)))
  return(res)
}

gpt4o_resp2_dt <- get_df_from_output(gpt4o_resp2)
gpt41_resp2_dt <- get_df_from_output(gpt41_resp2)

dt_comb <- rbind(
  gpt4o_resp2_dt |> mutate(Model = "GPT-4o"),
  gpt41_resp2_dt |> mutate(Model = "GPT-4.1")
) 

mycolors = c("#4682B4", "#B4464B", "#B4AF46", 
             "#1B9E77", "#D95F02", "#7570B3",
             "#E7298A", "#66A61E", "#B4F60A")

ggplot(dt_comb) +
  geom_col(aes(x=Item, y = probability, fill = Option), 
           position =  position_stack(reverse = TRUE)) +
  geom_text(aes(x=Item, y = probability, 
                label = probability, group = Item),
            size = 2,
            position = position_stack(reverse = TRUE, vjust = 0.5)) +
  facet_wrap(~ Model) +
  coord_flip() +
  scale_fill_manual(values = mycolors)
```

As @fig-gpt-prob shows, GPT-4.1 has varied item probability in Item 6 and Item 7. Taking item 7 for example, choosing 2 (Disagree) and 3 (Somewhat disagree) has same probability (p = .22) for GPT-4.1, while GPT-4o tend to have more in 1-Strongly disagree (p = .3) than 2-Disagree (p = .25) and 1-Somewhat disagree (p = .2).

In addition, GPT-4o seems to have exactly same item response distribution for item 8-10 and item 12-15. In contrast, GPT-4.1 has different item response distribution for these items.

::: callout-important
#### Takehome note
-   GPT-4.1 is more sensitive to emotional words than GPT-4o.
-   GPT-4.1 is more likely to have different response probability distribution across items that GPT-4o, suggesting GPT-4.1 can have more diversity in generation item responses.
:::

## Response API Walk-through

As shown in @fig-gpt-item, OpenAI provides [Prompts Playground](https://platform.openai.com/playground/prompts?models=gpt-4o) to test your prompt. OpenAI has recently updated their API from Chat to [Response API](https://platform.openai.com/docs/api-reference/responses).

To use the Response API, update `OpenAI` python module to the latest using the following command:

``` bash
pip install openai --upgrade
```

::: macwindow
**Responses vs. Chat Completions**

For OpenAI, there are two types of API interfaces (see [Responses vs. Chat Completions](https://platform.openai.com/docs/guides/responses-vs-chat-completions)). Previously, I use `client.chat.completions` for example. In the following example, I will use `client.responses`.

```{python}
#| cache: true
import os
from openai import OpenAI

client = OpenAI()

response = client.responses.create(
    model="gpt-4o",
    instructions="You are a coding assistant that talks like a pirate.",
    input="How do I check if a Python object is an instance of a class?",
)

print(response.output_text)
```
:::

### Image example

![](https://campusdata.uark.edu/resources/images/FacultyStaffProfile/jzhang.jpg?1743825231865&w=440){width="40%"}

```{python}
#| cache: true
#| code-fold: true
#| code-summary: "Response API with image as input"
from openai import OpenAI

client = OpenAI()
response = client.responses.create(
    model="gpt-4o",
    input=[
        {"role": "user", "content": "Describe the person  in the image using 5-6 sentences?"},
        {
            "role": "user",
            "content": [
                {
                    "type": "input_image",
                    "image_url": "https://campusdata.uark.edu/resources/images/FacultyStaffProfile/jzhang.jpg?1743825231865&w=440",
                }
            ],
        },
    ],
)


print(response.output_text)
```

#### Use AI to reproduce academic figure

Let's try a more academic figure --- a histogram plot from the web:

```{python}
#| eval: true
#| code-fold: true
#| code-summary: "LLM-generated R code"
#| cache: true

from openai import OpenAI

client = OpenAI()
response = client.responses.create(
    model="gpt-4o",
    input=[
        {"role": "user", "content": "You are a R programming assistant. Provide R code to generate this figure. Make sure only R code is provide."},
        {
            "role": "user",
            "content": [
                {
                    "type": "input_image",
                    "image_url": "https://seaborn.pydata.org/_images/distributions_3_0.png",
                }
            ],
        },
    ],
)


print(response.output_text)
```

::::: columns
::: column
##### Original Plot

![](https://seaborn.pydata.org/_images/distributions_3_0.png)
:::

::: column
##### AI-generated Plot

```{r}
#| code-fold: true
#| code-summary: "R Code"
# Required packages
library(ggplot2)
library(palmerpenguins)

# Plot
ggplot(penguins, aes(x = flipper_length_mm)) +
  geom_histogram(binwidth = 5, fill = "steelblue", color = "black", alpha = 0.6) +
  theme_minimal(base_size = 15) +
  labs(x = "flipper_length_mm", y = "Count")
```
:::
:::::

### Conversation State

Resource: <https://platform.openai.com/docs/guides/conversation-state?api-mode=responses>

The idea is creating a dynamic R vectors. The appended R string can change LLM conversation state including history.

In OpenAI, the `previous_response_id` parameter was used to chain responses and create a threaded conversation.

```{python}
#| results: asis
from openai import OpenAI

client = OpenAI()
def get_conversation(history): 
  response = client.responses.create(
      model="gpt-4o-mini", input=history, store=False
  )
  
  history += [
    {"role": output.role, "content": output.content} for output in response.output]
    
  return history

history = [{"role": "user", "content": "Can your generate one 6-Likert scale item response with item difficult as 2 for a persoon with 1 standard deviation factor score?"}]
res = get_conversation(history)
print(res[1]['content'][0].text)

# A second response will be like:
res.append({"role": "user", "content": "Can your generate another 6-Likert scale item response with item difficult as 2 and item discrimination as 1 for a persoon with 2 standard deviation factor score?"})
res2 = get_conversation(res)
print(res2[3]['content'][0].text)
```

## Example 1: Construct LLM function calling with Python and R

The following section is inspired by the fascinating guide in the [post](https://pavelbazin.com/post/the-essential-guide-to-large-language-models-structured-output-and-function-calling/?utm_source=reddit&utm_medium=social&utm_campaign=structured_output&utm_content=sub_python) authored by Pavel Bazin.

First of all, type in the following bash command in the terminal to install `openai` python module if you already have Python installed.

``` bash
pip install openai
python3 -m pip install openai
pip install openai --upgrade
```

The next step is to either create a new Python file (`.py`) or use `{python}` code chunk in Quarto, in which importing the `OpenAI` module and construct a python function called `llm_eval()`. This function can call OpenAI ChatGPT (e.g., `gpt-4o`) via the API key:

```{python}
# Further down these imports will be ommited for brevity
import os
from openai import OpenAI


def llm_eval(prompt: str, message: str, model: str = "gpt-4o"):
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": message},
    ]

    return client.chat.completions.create(
        model=model,
        messages=messages
    )
```

Then, we should be able to call the function either in R (use `reticulate` package) or in Python:

:::: panel-tabset
### R

```{r}
#| cache: true
library(reticulate)

prompt = "
You are a data parsing assistant. 
User provides a list of groceries. 
Your goal is to output it as JSON.
"
message = "I'd like to buy some bread, pack of eggs, few apples, and a bottle of milk."

res = py$llm_eval(prompt=prompt, message=message) #<1>

json_data = res$choices[[1]]$message$content

cat(json_data)
```

::: rmdnote
There are two things that should be noted:

1.  If you are using Quarto, use `py$<python object>` in R code chunk to have access to the python object. If you put python code and R code in multiple files, use `source_python("<Path to Python file>")` to load the python function into R session.

2.  In contrast to use `res.choices[0].message.content` in Python, note that the nested list in R is extract using `$` with the starting index as `1`.
:::

### Python

```{python}
#| eval: false

prompt = """
You are a data parsing assistant. 
User provides a list of groceries. 
Your goal is to output it as JSON.
"""
message = "I'd like to buy some bread, pack of eggs, few apples, and a bottle of milk."

res = eval(prompt=prompt, message=message)
json_data = res.choices[0].message.content

print(json_data)
```
::::

### `response_format`: Structured Response

LLM returned a markdown formatted string containing JSON by default. The reason is that we didn’t enable structured output in the API call.

To return the plain JSON text, we can structure output in Python function through setting up `response_format`:

```{python}
def llm_eval2(prompt: str, message: str, model: str = "gpt-4o"):
    
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": message},
    ]
    
    return client.chat.completions.create(
        model=model,
        messages=messages,
        # Enable structured output capability
        response_format={"type": "json_object"},
    )
```

```{r}
# A R function to request LLM's response given prompt and message.
get_response <- function(prompt, message) {
  res <- py$llm_eval2(prompt=as.character(prompt), 
                      message=as.character(message))
  output <- res$choices[[1]]$message$content
  return(output)
}
```

Now, running the same code will return plain JSON. That is great not only because we don’t need to parse anything extra, but it also guarantees that the LLM won’t include any free-form text such as “Sure, here is your data! {…}”.

```{r}
#| cache: true

json_data2 = get_response(prompt=prompt, message=message)

cat(json_data2)
```

We can further transform the JSON text into multiple format:

-   Data Frame
-   List
-   Vector

```{r}
list_data2 <- jsonlite::fromJSON(json_data2)
```

::: panel-tabset
### Data Frame

```{r}
kable(as.data.frame(list_data2))
```

### Vector

```{r}
list_data2$groceries
```
:::

### Structure as a HTML list

To further structure the output as HTML list (e.g., `<ul></ul>`), we can construct a simple sparser in Python and print it in R like this:

```{python}
import json
def render(data: str):
    data_dict = json.loads(data)
    backslash ="\n\t"

    return f"""
    <ul>
        {"".join([ f"<li>{x}</li>" for x in data_dict["groceries"]])}
    </ul>
    """
```

```{r}
#| results: asis
#| cache: true
library(htmltools)
HTML(py$render(json_data2))
```

### Utilize Schema to Define Data Shape

The problem is, we don’t have the data shape defined; let’s call it **JSON schema**. Our schema is now up to the LLM, and it might change based on user input. Let’s rephrase the user query to see it in action. Instead of asking, “I’d like to buy some bread, a pack of eggs, a few apples, and a bottle of milk,” let’s ask, “12 eggs, 2 bottles of milk, 6 sparkling waters.”

```{r}
#| echo: true
message = "12 eggs, 2 bottles of milk, 6 sparkling waters"

res = py$llm_eval2(prompt=prompt, message=message)

json_data = res$choices[[1]]$message$content

cat(json_data)
```

As seen in the output, ChatGPT can incorporate inputs with quantities into outputs with extra quantity attribute.

::: rmdnote
OpenAI introduced the next step for [Structured Output](https://platform.openai.com/docs/guides/structured-outputs/structured-outputs). You can get the same results using `response_format={"type": "json_object"}` and parse data yourself without using beta version of API which was not performing reliably in our products.
:::

For the following experiment, let's create two prompts (No schema vs. With schema) and two inputs (Vague quantity vs. Precise quantity). We let LLM to generate the outputs for these 4 conditions:

::: panel-tabset
### R

```{r}
#| cache: true
prompt_old = "
You are data parsing assistant. 
User provides a list of groceries. 
Your goal is to output is as JSON.
"

prompt_schema = "
You are data parsing assistant. 
User provides a list of groceries. 
Use the following JSON schema to generate your response:

{{
    'groceries': [
        { 'name': ITEM_NAME, 'quantity': ITEM_QUANTITY }
    ]
}}

Name is any string, quantity is a numerical value.
"

vague_input <- "I'd like to buy some bread, pack of eggs, few apples, and a bottle of milk."
precise_input <- "12 eggs, 2 bottles of milk, 6 sparkling waters."

tabset_condition <- apply(expand.grid(c("No_Schema", "With_Schema"), c("Vague_Input", "Precise_Input")), 1, \(x) paste0(x[1], "+", x[2]))

dat_prompt_input <- data.frame(
  expand.grid(
    prompts = c(prompt_old, prompt_schema),
    inputs = c(vague_input, precise_input), stringsAsFactors = FALSE
  )
  
)

dat_output <- dat_prompt_input |> 
  rowwise() |> 
  mutate(
    json_data =get_response(prompt = prompts, message = inputs) 
  )
```

### Python

```{python}
#| eval: false
prompt = """
You are data parsing assistant. 
User provides a list of groceries. 
Use the following JSON schema to generate your response:

{{
    "groceries": [
        { "name": ITEM_NAME, "quantity": ITEM_QUANTITY }
    ]
}}

Name is any string, quantity is a numerical value.
"""

inputs = [
    "I'd like to buy some bread, pack of eggs, few apples, and a bottle of milk.",
    "12 eggs, 2 bottles of milk, 6 sparkling waters.",
]

for message in inputs:
    res = eval(prompt=prompt, message=message)
    json_data = res.choices[0].message.content
    print(json_data)
```
:::

The outputs for 4 conditions show that the condition of the prompt with schema and the input with precise quantity has the most clear LLM output.

::: macwindow
```{r}
#| results: hide
#| code-fold: true
#| code-summary: "Function to convert JSON to Markdown Table"
json_to_markdownTBL <- function(x) {
  dat <- as.data.frame(fromJSON(x)) # convert JSON into data.frame
  md_dat <- paste0(kableExtra::kable(dat, format = "simple"), collapse ="\n")
  return(md_dat)
}
data_frame_output <- sapply(dat_output$json_data, json_to_markdownTBL) |> 
  unlist()
```

```{r}
#| results: asis
#| code-fold: true
#| code-summary: "Compile pieces of informatiom into output"
content <- paste0(glue("
### {tabset_condition}
**Prompt**:\n{dat_output$prompts}\n\n
**Input**:\n\n{dat_output$inputs}\n\n
**LLMOutput**:\n\n{dat_output$json_data}\n\n
**R DataFrame**:\n\n{data_frame_output}\n\n
"), collapse = "")
glue("::: panel-tabset\n{content}:::")

```
:::

## Resources

-   [YouTube Video](https://www.youtube.com/watch?v=0pGxoubWI6s): OpenAI Just Changed Everything (Responses API Walkthrough)
    -   [GitHub Repo](https://github.com/daveebbelaar/ai-cookbook/tree/main/models/openai/05-responses)
